<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++图论基础 - 最短路径问题</title>
      <link href="/C-%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98.html"/>
      <url>/C-%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件目标"><a href="#课件目标" class="headerlink" title="课件目标"></a>课件目标</h2><ul><li>了解最短路径问题的基本概念。</li><li>掌握最常用的最短路径算法：Dijkstra算法、Bellman-Ford算法和Floyd-Warshall算法。</li><li>理解每种算法的应用场景、优缺点及其实现方式。</li><li>通过代码示例帮助学生深入理解算法的实际应用。</li></ul><span id="more"></span><h2 id="一、最短路径问题概述"><a href="#一、最短路径问题概述" class="headerlink" title="一、最短路径问题概述"></a>一、最短路径问题概述</h2><h3 id="1-1-什么是最短路径问题？"><a href="#1-1-什么是最短路径问题？" class="headerlink" title="1.1 什么是最短路径问题？"></a>1.1 什么是最短路径问题？</h3><p>在图论中，最短路径问题是指：在给定图中的某一个源点出发，找到到其他各个顶点的最短路径长度。在加权图中，每一条边都有一个权重，表示从一个顶点到另一个顶点的代价。</p><h3 id="1-2-最短路径问题的实际应用"><a href="#1-2-最短路径问题的实际应用" class="headerlink" title="1.2 最短路径问题的实际应用"></a>1.2 最短路径问题的实际应用</h3><ul><li><strong>GPS导航</strong>：计算最短的驾驶路径。</li><li><strong>网络路由</strong>：选择网络中最优的传输路径。</li><li><strong>城市规划</strong>：最短通路规划。</li></ul><h2 id="二、常见的最短路径算法"><a href="#二、常见的最短路径算法" class="headerlink" title="二、常见的最短路径算法"></a>二、常见的最短路径算法</h2><h3 id="2-1-Dijkstra算法"><a href="#2-1-Dijkstra算法" class="headerlink" title="2.1 Dijkstra算法"></a>2.1 Dijkstra算法</h3><h4 id="2-1-1-算法简介"><a href="#2-1-1-算法简介" class="headerlink" title="2.1.1 算法简介"></a>2.1.1 算法简介</h4><p>Dijkstra算法用于在加权图中，找到从一个源点到所有其他顶点的最短路径。该算法基于贪心算法，每次选择当前距离最短的顶点，更新它的邻接顶点的最短路径。</p><h4 id="2-1-2-算法步骤："><a href="#2-1-2-算法步骤：" class="headerlink" title="2.1.2 算法步骤："></a>2.1.2 算法步骤：</h4><ol><li>初始化：设定源点到所有其他顶点的距离为∞，源点到自己的距离为0。</li><li>每次从未访问的顶点中选择一个距离源点最近的顶点，标记为已访问。</li><li>更新该顶点的邻接点的距离：如果通过该顶点到达某个邻接点的距离比原来的距离更短，则更新距离。</li><li>重复2-3步骤，直到所有顶点都被访问过。</li></ol><h4 id="2-1-3-适用场景"><a href="#2-1-3-适用场景" class="headerlink" title="2.1.3 适用场景"></a>2.1.3 适用场景</h4><p>适用于没有负权边的图。<br>图中的边权都为正值。</p><h4 id="2-1-4-C-代码实现"><a href="#2-1-4-C-代码实现" class="headerlink" title="2.1.4 C++代码实现"></a>2.1.4 C++代码实现</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression">INT_MAX</span></span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>                                     <span class="token comment">/* 用于表示 {权重, 顶点} */</span><span class="token comment">/* Dijkstra 算法 */</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> adj<span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dist</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">/* 存储最短路径 */</span>    dist<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                           <span class="token comment">/* 源点到自己是0 */</span>    priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pii<span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span>          <span class="token comment">/* 最小堆（优先队列） */</span>    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> source<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>                                <span class="token comment">/* 当前顶点 */</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>                                 <span class="token comment">/* 当前顶点的最短路径 */</span>        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                              <span class="token comment">/* 如果当前路径不是最短的，跳过 */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment">/* 遍历所有邻接点 */</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">int</span> weight <span class="token operator">=</span> edge<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">/* 发现更短路径 */</span>                dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 输出最短路径 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"从源点到顶点 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" 没有路径\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"源点到顶点 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" 的最短路径为: "</span> <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                                                  <span class="token comment">/* 图中有5个顶点 */</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;&gt;</span> <span class="token function">adj</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">/* 邻接表表示图 */</span>    <span class="token comment">/* 构建图，使用邻接表表示 */</span>    adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> source <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">dijkstra</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> adj<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码解释</strong>：</p><ul><li><strong>邻接表</strong>：<code>adj</code> 用来存储图中的边和权重。</li><li><strong>优先队列</strong>：用来存储当前访问的节点及其最短路径，确保每次都能选择到当前最短的节点进行更新。</li><li><strong>时间复杂度</strong>：O((V+E)logV)，其中 V 是顶点数，E 是边数。</li></ul><p><strong>示例输出</strong>：</p><pre class="line-numbers language-none"><code class="language-none">源点到顶点 0 的最短路径为: 0源点到顶点 1 的最短路径为: 8源点到顶点 2 的最短路径为: 5源点到顶点 3 的最短路径为: 9源点到顶点 4 的最短路径为: 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Bellman-Ford算法"><a href="#2-2-Bellman-Ford算法" class="headerlink" title="2.2 Bellman-Ford算法"></a>2.2 Bellman-Ford算法</h3><h4 id="2-2-1-算法简介"><a href="#2-2-1-算法简介" class="headerlink" title="2.2.1 算法简介"></a>2.2.1 算法简介</h4><p>Bellman-Ford算法是一种用于求解单源最短路径的算法，能够处理带负权边的图。与Dijkstra算法不同，Bellman-Ford算法可以检测图中是否有负权环。</p><h4 id="2-2-2-算法步骤："><a href="#2-2-2-算法步骤：" class="headerlink" title="2.2.2 算法步骤："></a>2.2.2 算法步骤：</h4><ol><li>初始化：源点到自己的距离为0，其他点为∞。</li><li>对所有的边进行 V−1 次松弛操作，每次更新通过该边可以得到的最短路径。</li><li>再进行一次松弛操作，如果仍然可以更新，说明图中存在负权环。</li></ol><h4 id="2-2-3-适用场景"><a href="#2-2-3-适用场景" class="headerlink" title="2.2.3 适用场景"></a>2.2.3 适用场景</h4><p>适用于带负权边的图。<br>可以检测负权环。</p><h4 id="2-2-4-C-代码实现"><a href="#2-2-4-C-代码实现" class="headerlink" title="2.2.4 C++代码实现"></a>2.2.4 C++代码实现</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression">INT_MAX</span></span><span class="token comment">// Bellman-Ford 算法</span><span class="token keyword">bool</span> <span class="token function">bellmanFord</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> adj<span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dist</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// V-1 次松弛操作</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> u <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token keyword">int</span> weight <span class="token operator">=</span> edge<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 检查是否有负权环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> u <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">int</span> weight <span class="token operator">=</span> edge<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"图中存在负权环\n"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 输出最短路径</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"从源点到顶点 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" 没有路径\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"源点到顶点 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" 的最短路径为: "</span> <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">adj</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建图，包含负权边</span>    adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adj<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> source <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">bellmanFord</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> adj<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码解释</strong>：</p><ul><li><strong>负权边的处理</strong>：通过 V−1 次松弛操作，确保所有边都能被更新。</li><li><strong>负权环检测</strong>：在最后一次松</li></ul><p>弛操作中，如果仍然能更新路径，则说明图中存在负权环。</p><p><strong>示例输出</strong>：</p><pre class="line-numbers language-none"><code class="language-none">源点到顶点 0 的最短路径为: 0源点到顶点 1 的最短路径为: -1源点到顶点 2 的最短路径为: 2源点到顶点 3 的最短路径为: 3源点到顶点 4 的最短路径为: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><h3 id="3-1-Dijkstra与Bellman-Ford比较"><a href="#3-1-Dijkstra与Bellman-Ford比较" class="headerlink" title="3.1 Dijkstra与Bellman-Ford比较"></a>3.1 Dijkstra与Bellman-Ford比较</h3><ul><li><strong>时间复杂度</strong>：Dijkstra算法O((V+E)logV)，适用于无负权边的图。Bellman-Ford算法O(VE)，可以处理负权边和负权环。</li><li><strong>适用范围</strong>：Dijkstra适合边权为正的图，而Bellman-Ford适合有负权边的图，且能检测负权环。</li></ul><h3 id="3-2-Floyd-Warshall算法"><a href="#3-2-Floyd-Warshall算法" class="headerlink" title="3.2 Floyd-Warshall算法"></a>3.2 Floyd-Warshall算法</h3><p>Floyd-Warshall算法是求解所有顶点对最短路径的算法，适用于较小规模的图，时间复杂度为O(V^3)，但其空间复杂度较高。</p><h2 id="四、课堂练习"><a href="#四、课堂练习" class="headerlink" title="四、课堂练习"></a>四、课堂练习</h2><h3 id="4-1-编写代码，使用Dijkstra算法求解给定图的最短路径。"><a href="#4-1-编写代码，使用Dijkstra算法求解给定图的最短路径。" class="headerlink" title="4.1 编写代码，使用Dijkstra算法求解给定图的最短路径。"></a>4.1 编写代码，使用Dijkstra算法求解给定图的最短路径。</h3><h3 id="4-2-使用Bellman-Ford算法检测给定图中是否存在负权环。"><a href="#4-2-使用Bellman-Ford算法检测给定图中是否存在负权环。" class="headerlink" title="4.2 使用Bellman-Ford算法检测给定图中是否存在负权环。"></a>4.2 使用Bellman-Ford算法检测给定图中是否存在负权环。</h3><h3 id="4-3-修改代码，实现Floyd-Warshall算法，计算图中所有顶点对的最短路径。"><a href="#4-3-修改代码，实现Floyd-Warshall算法，计算图中所有顶点对的最短路径。" class="headerlink" title="4.3 修改代码，实现Floyd-Warshall算法，计算图中所有顶点对的最短路径。"></a>4.3 修改代码，实现Floyd-Warshall算法，计算图中所有顶点对的最短路径。</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++图论基础-概念和遍历</title>
      <link href="/C-%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E6%A6%82%E5%BF%B5%E5%92%8C%E9%81%8D%E5%8E%86.html"/>
      <url>/C-%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E6%A6%82%E5%BF%B5%E5%92%8C%E9%81%8D%E5%8E%86.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-图的定义和基本概念"><a href="#1-图的定义和基本概念" class="headerlink" title="1. 图的定义和基本概念"></a>1. 图的定义和基本概念</h3><p>在图论中，图（Graph）是由顶点（Vertex）和边（Edge）构成的集合。我们可以通过图来表示各种关系，比如社交网络中的人际关系、城市交通中的路线等。图的基本元素包括顶点和边。</p><span id="more"></span><h4 id="1-1-图的基本组成"><a href="#1-1-图的基本组成" class="headerlink" title="1.1 图的基本组成"></a>1.1 图的基本组成</h4><ul><li><strong>顶点（Vertex）：</strong> 图中的基本单位，表示对象或元素。例如，社交网络中的“人”、城市图中的“城市”等。</li><li><strong>边（Edge）：</strong> 连接两个顶点的线，表示这些顶点之间的关系。例如，社交网络中的“朋友关系”、城市图中的“公路”。</li></ul><p>图可以用不同的方式分类，主要包括以下几类：</p><ul><li><strong>有向图（Directed Graph）：</strong> 边有方向。即边从一个顶点指向另一个顶点。例如，一个网页的链接。</li><li><strong>无向图（Undirected Graph）：</strong> 边没有方向，表示两个顶点之间的双向关系。例如，社交网络中的朋友关系。</li><li><strong>加权图（Weighted Graph）：</strong> 边有权重，表示边的“大小”或“成本”，例如地图中的路程长度。</li><li><strong>非加权图（Unweighted Graph）：</strong> 边没有权重，边只表示是否存在连接。</li><li><strong>简单图（Simple Graph）：</strong> 不包含自环和多重边，即每对顶点之间至多有一条边。</li></ul><h3 id="2-图的存储结构"><a href="#2-图的存储结构" class="headerlink" title="2. 图的存储结构"></a>2. 图的存储结构</h3><p>在计算机中，图的存储方式有多种，最常用的存储方式是 <strong>邻接矩阵</strong> 和 <strong>邻接表</strong>。</p><h4 id="2-1-邻接矩阵（Adjacency-Matrix）"><a href="#2-1-邻接矩阵（Adjacency-Matrix）" class="headerlink" title="2.1 邻接矩阵（Adjacency Matrix）"></a>2.1 邻接矩阵（Adjacency Matrix）</h4><p>邻接矩阵是一个二维数组，表示图中顶点之间的连接关系。如果图有 <code>n</code> 个顶点，那么邻接矩阵是一个 <code>n x n</code> 的矩阵。矩阵中的元素表示顶点之间是否有边，如果存在边，则值为 <code>1</code> 或 <code>权重</code>；如果不存在边，则值为 <code>0</code> 或无穷大。</p><ul><li><strong>优点</strong>：<ul><li>判断两顶点之间是否有边的时间复杂度是 O(1)。</li><li>实现简单，适用于边数较多的图。</li></ul></li><li><strong>缺点</strong>：<ul><li>空间复杂度为 O(n^2)，对于稀疏图，空间浪费较大。</li><li>边的遍历时间复杂度较高，遍历所有边的时间是 O(n^2)。</li></ul></li></ul><h4 id="2-2-邻接表（Adjacency-List）"><a href="#2-2-邻接表（Adjacency-List）" class="headerlink" title="2.2 邻接表（Adjacency List）"></a>2.2 邻接表（Adjacency List）</h4><p>邻接表使用一个数组来存储每个顶点的邻接点，通常使用链表或动态数组来存储每个顶点的邻接点。这种存储方式适合稀疏图。</p><ul><li><strong>优点</strong>：<ul><li>空间效率高，适合稀疏图，空间复杂度为 O(n + m)，其中 <code>n</code> 是顶点数，<code>m</code> 是边数。</li><li>遍历顶点的所有邻接点时间复杂度为 O(d)，其中 d 是顶点的度。</li></ul></li><li><strong>缺点</strong>：<ul><li>判断两顶点之间是否有边的时间复杂度是 O(d)，其中 d 是顶点的度。</li></ul></li></ul><h3 id="3-数组模拟临界表存储"><a href="#3-数组模拟临界表存储" class="headerlink" title="3. 数组模拟临界表存储"></a>3. 数组模拟临界表存储</h3><p>在图的实现中，通常用邻接表来存储图，因为它比邻接矩阵更节省空间。数组模拟邻接表存储时，我们用一个数组，每个数组的元素保存一个链表，链表中的节点表示与该顶点相连的其他顶点。</p><h4 id="3-1-实现思路"><a href="#3-1-实现思路" class="headerlink" title="3.1 实现思路"></a>3.1 实现思路</h4><ol><li>定义一个结构体 <code>Edge</code>，表示图中的边，存储边的终点。</li><li>用一个 <code>vector&lt;vector&lt;int&gt;&gt;</code> 或 <code>vector&lt;list&lt;int&gt;&gt;</code> 来表示邻接表。</li></ol><h4 id="3-2-示例代码"><a href="#3-2-示例代码" class="headerlink" title="3.2 示例代码"></a>3.2 示例代码</h4><p>以下是使用邻接表来存储图并进行边的添加的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 顶点最大数</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> adjList<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 邻接表</span><span class="token comment">// 添加一条边</span><span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    adjList<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 有向图，u -&gt; v</span>    adjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无向图，需要反向添加</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>  <span class="token comment">// 顶点数n和边数m</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>        <span class="token function">addEdge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 输出邻接表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Vertex "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-图的遍历"><a href="#4-图的遍历" class="headerlink" title="4. 图的遍历"></a>4. 图的遍历</h3><p>图的遍历算法是图论中的一个基础问题，常见的遍历算法有 <strong>深度优先搜索（DFS）</strong> 和 <strong>广度优先搜索（BFS）</strong>。这两种算法分别使用递归和队列来遍历图中的顶点。</p><h4 id="4-1-深度优先搜索（DFS）"><a href="#4-1-深度优先搜索（DFS）" class="headerlink" title="4.1 深度优先搜索（DFS）"></a>4.1 深度优先搜索（DFS）</h4><p><strong>DFS</strong> 是一种深度优先的遍历方式，它会从一个起始点出发，沿着一条路径一直深入直到没有未访问的邻接点，再回溯到上一个顶点。DFS 的特点是通过递归或栈来实现。</p><ul><li><strong>时间复杂度：</strong> O(V + E)，其中 V 是顶点数，E 是边数。</li><li><strong>空间复杂度：</strong> O(V)，栈空间最多存储 V 个顶点。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> adjList<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 邻接表</span><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 记录访问状态</span><span class="token comment">// 深度优先搜索</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token comment">// 输出当前访问的顶点</span>    <span class="token comment">// 递归访问与u相连的所有未访问的邻接点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> adjList<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token comment">// 构建邻接表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>        adjList<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        adjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无向图</span>    <span class="token punctuation">}</span>    <span class="token comment">// 从节点1开始DFS遍历</span>    <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-广度优先搜索（BFS）"><a href="#4-2-广度优先搜索（BFS）" class="headerlink" title="4.2 广度优先搜索（BFS）"></a>4.2 广度优先搜索（BFS）</h4><p><strong>BFS</strong> 是一种层次优先的遍历方式，它会从起始点出发，首先访问所有邻接点，然后再访问每个邻接点的邻接点，以此类推。BFS 使用队列来实现。</p><ul><li><strong>时间复杂度：</strong> O(V + E)，其中 V 是顶点数，E 是边数。</li><li><strong>空间复杂度：</strong> O(V)，队列最多存储 V 个顶点。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> adjList<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 邻接表</span><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 记录访问状态</span><span class="token comment">// 广度优先搜索</span><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token comment">// 输出当前访问的顶点</span>        <span class="token comment">// 访问与u相连的所有未访问的邻接点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> adjList<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token comment">// 构建邻接表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>        adjList<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        adjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无向图</span>    <span class="token punctuation">}</span>    <span class="token comment">// 从节点1开始BFS遍历</span>    <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>图的定义</strong>：图是由顶点和边组成的数据结构。图可以是有向的、无向的、加权的等。</li><li><strong>图的存储结构</strong>：主要有邻接矩阵和邻接表两种。邻接矩阵适用于边多的图，而邻接表适用于稀疏图。</li><li><strong>数组模拟邻接表</strong>：使用 <code>vector</code> 或 <code>list</code> 来存储每个顶点的邻接点。</li><li></li></ul><p> <strong>图的遍历</strong>：</p><ul><li><strong>深度优先搜索（DFS）</strong>：利用递归或者栈的方式从一个顶点出发，尽可能深入地访问每个顶点。</li><li><strong>广度优先搜索（BFS）</strong>：利用队列的方式，从起始顶点开始，层层展开地访问图中的顶点。</li></ul><p>这些基础知识和代码示例构成了理解和实现图论相关问题的基础。在实际应用中，掌握这些算法和数据结构将帮助你解决许多图相关的计算机问题。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++Dijkstra算法</title>
      <link href="/C-Dijkstra%E7%AE%97%E6%B3%95.html"/>
      <url>/C-Dijkstra%E7%AE%97%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="📚-Dijkstra-算法详解（C-）"><a href="#📚-Dijkstra-算法详解（C-）" class="headerlink" title="📚 Dijkstra 算法详解（C++）"></a>📚 <strong>Dijkstra 算法详解（C++）</strong></h1><h2 id="1-什么是-Dijkstra-算法？"><a href="#1-什么是-Dijkstra-算法？" class="headerlink" title="1. 什么是 Dijkstra 算法？"></a><strong>1. 什么是 Dijkstra 算法？</strong></h2><p><strong>Dijkstra 算法</strong>是一种用于<strong>计算单源最短路径</strong>的经典算法。它可以在<strong>加权有向图或无向图</strong>中找到<strong>从起点到其他所有节点的最短路径</strong>。</p><span id="more"></span><h3 id="1-1-适用范围"><a href="#1-1-适用范围" class="headerlink" title="1.1 适用范围"></a><strong>1.1 适用范围</strong></h3><ul><li>图中<strong>没有负权边</strong>（有负权边时应使用 <strong>Bellman-Ford 算法</strong>）。  </li><li>可以处理<strong>稠密图</strong>（邻接矩阵）和<strong>稀疏图</strong>（邻接表）。</li></ul><h3 id="1-2-基本思想"><a href="#1-2-基本思想" class="headerlink" title="1.2 基本思想"></a><strong>1.2 基本思想</strong></h3><ul><li>使用<strong>贪心策略</strong>：每次选择<strong>当前距离起点最近的节点</strong>，并更新其相邻节点的最短路径。  </li><li>使用一个<strong>优先队列</strong>（小顶堆）来加速找到当前最短路径的节点。</li></ul><h2 id="2-Dijkstra-算法步骤"><a href="#2-Dijkstra-算法步骤" class="headerlink" title="2. Dijkstra 算法步骤"></a><strong>2. Dijkstra 算法步骤</strong></h2><h3 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a><strong>2.1 初始化</strong></h3><ol><li>设定一个<strong>源点</strong>（起始节点）。  </li><li>将源点到自身的距离设为 <code>0</code>，其他所有节点的距离设为 <strong>无穷大（∞）</strong>。  </li><li>使用<strong>优先队列</strong>（小顶堆）存储当前的节点和最短距离。</li></ol><h3 id="2-2-过程"><a href="#2-2-过程" class="headerlink" title="2.2 过程"></a><strong>2.2 过程</strong></h3><ol><li>从优先队列中取出<strong>当前距离最小的节点</strong>。  </li><li>遍历该节点的<strong>所有相邻节点</strong>，更新相邻节点的<strong>最短路径</strong>：  <pre class="line-numbers language-none"><code class="language-none">d[v] = min(d[v], d[u] + w(u, v))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>其中：<ul><li>( d[v] )：当前到节点 ( v ) 的最短距离。  </li><li>( d[u] )：起始点到当前节点 ( u ) 的最短距离。  </li><li>( w(u, v) )：从节点 ( u ) 到 ( v ) 的边的权重。</li></ul></li><li>将更新后的节点重新加入<strong>优先队列</strong>。  </li><li>重复上述步骤，直到优先队列为空。</li></ol><h3 id="2-3-结束"><a href="#2-3-结束" class="headerlink" title="2.3 结束"></a><strong>2.3 结束</strong></h3><ul><li>当所有节点都被访问过后，算法结束。  </li><li>结果是<strong>源点到其他所有节点的最短路径</strong>。</li></ul><h2 id="3-C-实现-Dijkstra-算法"><a href="#3-C-实现-Dijkstra-算法" class="headerlink" title="3. C++ 实现 Dijkstra 算法"></a><strong>3. C++ 实现 Dijkstra 算法</strong></h2><h3 id="3-1-邻接表表示的-Dijkstra-算法"><a href="#3-1-邻接表表示的-Dijkstra-算法" class="headerlink" title="3.1 邻接表表示的 Dijkstra 算法"></a><strong>3.1 邻接表表示的 Dijkstra 算法</strong></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 定义邻接表中的边</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">;</span>     <span class="token comment">// 目标节点</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span> <span class="token comment">// 边的权重</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// Dijkstra 算法函数</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Edge<span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dist</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储从起点到每个节点的最短距离</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记节点是否已经被访问</span>    <span class="token comment">// 小顶堆：按最短距离排序</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>    <span class="token comment">// 起点到自身的距离为 0</span>    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 取出当前距离最小的节点</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> current <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentDist <span class="token operator">=</span> current<span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token comment">// 当前节点的最短距离</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> current<span class="token punctuation">.</span>second<span class="token punctuation">;</span>          <span class="token comment">// 当前节点的编号</span>        <span class="token comment">// 如果当前节点已访问，则跳过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历当前节点的所有邻接边</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Edge<span class="token operator">&amp;</span> edge <span class="token operator">:</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>to<span class="token punctuation">;</span>            <span class="token keyword">int</span> weight <span class="token operator">=</span> edge<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>            <span class="token comment">// 更新最短路径</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 输出结果</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Node\tShortest Distance from Source"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 节点数</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Edge<span class="token operator">&gt;&gt;</span> <span class="token function">graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加边 (节点编号从 0 开始)</span>    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 源点为节点 0</span>    <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-代码解析"><a href="#4-代码解析" class="headerlink" title="4. 代码解析"></a><strong>4. 代码解析</strong></h2><h3 id="4-1-数据结构"><a href="#4-1-数据结构" class="headerlink" title="4.1 数据结构"></a><strong>4.1 数据结构</strong></h3><ul><li><code>vector&lt;vector&lt;Edge&gt;&gt; graph</code>：邻接表存储图结构。  </li><li><code>vector&lt;int&gt; dist</code>：存储从起点到各个节点的最短距离。  </li><li><code>priority_queue</code>：存储当前节点及其最短距离，使用<strong>小顶堆</strong>确保每次访问的是<strong>当前距离最小的节点</strong>。</li></ul><h3 id="4-2-算法流程"><a href="#4-2-算法流程" class="headerlink" title="4.2 算法流程"></a><strong>4.2 算法流程</strong></h3><ol><li>初始化所有节点的最短距离为 <code>INT_MAX</code>，源点距离为 <code>0</code>。  </li><li>使用小顶堆维护每次要访问的<strong>最短距离节点</strong>。  </li><li>访问节点并更新其相邻节点的最短距离。  </li><li>如果有更短的路径，将节点重新加入到优先队列中。</li></ol><h2 id="5-时间与空间复杂度"><a href="#5-时间与空间复杂度" class="headerlink" title="5. 时间与空间复杂度"></a><strong>5. 时间与空间复杂度</strong></h2><ul><li><strong>时间复杂度</strong>：( O((V + E) \cdot \log V) )  <ul><li>( V )：节点数  </li><li>( E )：边数  </li><li>每次从优先队列中取出节点需要 ( \log V )，遍历所有边共计 ( O(E) )。</li></ul></li><li><strong>空间复杂度</strong>：( O(V + E) )  <ul><li>存储邻接表和优先队列所需的空间。</li></ul></li></ul><h2 id="6-Dijkstra-算法的应用"><a href="#6-Dijkstra-算法的应用" class="headerlink" title="6. Dijkstra 算法的应用"></a><strong>6. Dijkstra 算法的应用</strong></h2><ol><li><strong>地图导航</strong>：计算最短路径。  </li><li><strong>网络路由</strong>：最短路径选择。  </li><li><strong>资源分配</strong>：在有限资源下的最优分配路径。  </li><li><strong>游戏开发</strong>：角色移动路径规划。</li></ol><h2 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a><strong>7. 注意事项</strong></h2><ul><li><strong>不能处理负权边</strong>：负权边会导致路径更新出错。  </li><li><strong>多源最短路径</strong>：需要对每个源点分别执行 Dijkstra 算法，或者使用 <strong>Floyd-Warshall 算法</strong>。</li></ul><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a><strong>8. 总结</strong></h2><ul><li><strong>核心思想</strong>：每次选择当前未访问节点中<strong>距离源点最近的节点</strong>，并更新其相邻节点的最短路径。  </li><li><strong>关键数据结构</strong>：<strong>优先队列</strong>（小顶堆）。  </li><li><strong>限制</strong>：不能有负权边。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 Dijkstra算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++哈夫曼编码</title>
      <link href="/C-%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.html"/>
      <url>/C-%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="📚-哈夫曼编码（Huffman-Coding）详解"><a href="#📚-哈夫曼编码（Huffman-Coding）详解" class="headerlink" title="📚 哈夫曼编码（Huffman Coding）详解"></a>📚 <strong>哈夫曼编码（Huffman Coding）详解</strong></h1><h2 id="1-什么是哈夫曼编码？"><a href="#1-什么是哈夫曼编码？" class="headerlink" title="1. 什么是哈夫曼编码？"></a><strong>1. 什么是哈夫曼编码？</strong></h2><p><strong>哈夫曼编码（Huffman Coding）</strong> 是一种广泛使用的<strong>数据压缩算法</strong>，用于减少数据传输和存储所需的空间。它属于一种<strong>前缀编码</strong>（Prefix Code），即任意一个字符的编码都不会是另一个字符编码的前缀，避免了解码歧义。</p><span id="more"></span><h3 id="1-1-应用场景"><a href="#1-1-应用场景" class="headerlink" title="1.1 应用场景"></a><strong>1.1 应用场景</strong></h3><ul><li>文件压缩（例如 ZIP、GZIP 等）</li><li>图像压缩（例如 JPEG）</li><li>网络通信传输数据</li></ul><h3 id="1-2-基本思想"><a href="#1-2-基本思想" class="headerlink" title="1.2 基本思想"></a><strong>1.2 基本思想</strong></h3><ul><li>频率（或权重）越高的字符使用的<strong>编码越短</strong>，频率越低的字符使用的<strong>编码越长</strong>。</li><li>使用<strong>二叉树</strong>构建编码，频率较小的字符处于树的底部，频率较大的字符靠近根节点。</li></ul><h2 id="2-哈夫曼编码的核心步骤"><a href="#2-哈夫曼编码的核心步骤" class="headerlink" title="2. 哈夫曼编码的核心步骤"></a><strong>2. 哈夫曼编码的核心步骤</strong></h2><ol><li><p><strong>统计字符频率</strong>  </p><ul><li>统计每个字符在数据中的出现次数。</li></ul></li><li><p><strong>构建哈夫曼树</strong>  </p><ul><li>将每个字符作为一个<strong>叶子节点</strong>，频率作为节点权重。  </li><li>取出<strong>频率最小的两个节点</strong>，合并成一个新的节点，新的节点的频率是两者之和。  </li><li>重复此过程，直到所有节点合并成一棵树。</li></ul></li><li><p><strong>生成编码</strong>  </p><ul><li>从根节点开始，<strong>左子树编码为 0，右子树编码为 1</strong>。  </li><li>遍历整棵树，为每个字符生成对应的二进制编码。</li></ul></li><li><p><strong>编码与解码</strong>  </p><ul><li>使用生成的二进制编码进行数据压缩。  </li><li>解码时，使用哈夫曼树进行还原。</li></ul></li></ol><h2 id="3-哈夫曼编码示例"><a href="#3-哈夫曼编码示例" class="headerlink" title="3. 哈夫曼编码示例"></a><strong>3. 哈夫曼编码示例</strong></h2><h3 id="步骤解析"><a href="#步骤解析" class="headerlink" title="步骤解析"></a><strong>步骤解析</strong></h3><h3 id="3-1-合并节点的核心思想"><a href="#3-1-合并节点的核心思想" class="headerlink" title="3.1. 合并节点的核心思想"></a><strong>3.1. 合并节点的核心思想</strong></h3><ol><li><p><strong>每次选择频率最小的两个节点</strong>  </p><ul><li>将这两个节点作为新节点的左右子节点。  </li><li>新节点的频率是这两个节点的频率之和。</li></ul></li><li><p><strong>将新节点加入到集合中</strong>  </p><ul><li>将合并后的新节点重新加入到节点集合中，继续进行下一轮合并。</li></ul></li><li><p><strong>重复以上步骤，直到只剩下一个节点</strong>  </p><ul><li>最终，所有节点将合并成一棵<strong>哈夫曼树</strong>。  </li><li>根节点的频率是所有字符频率的总和。</li></ul></li></ol><h3 id="3-2-详细示例解析"><a href="#3-2-详细示例解析" class="headerlink" title="3.2. 详细示例解析"></a><strong>3.2. 详细示例解析</strong></h3><h3 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a><strong>示例数据</strong></h3><p>假设有以下字符及其频率：</p><table><thead><tr><th>字符</th><th>频率</th></tr></thead><tbody><tr><td>a</td><td>5</td></tr><tr><td>b</td><td>9</td></tr><tr><td>c</td><td>12</td></tr><tr><td>d</td><td>13</td></tr><tr><td>e</td><td>16</td></tr><tr><td>f</td><td>45</td></tr></tbody></table><h3 id="3-2-1-第一步：将每个字符作为独立节点"><a href="#3-2-1-第一步：将每个字符作为独立节点" class="headerlink" title="3.2.1 第一步：将每个字符作为独立节点"></a><strong>3.2.1 第一步：将每个字符作为独立节点</strong></h3><pre class="line-numbers language-none"><code class="language-none">a(5), b(9), c(12), d(13), e(16), f(45)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-2-第二步：选择频率最小的两个节点进行合并"><a href="#3-2-2-第二步：选择频率最小的两个节点进行合并" class="headerlink" title="3.2.2 第二步：选择频率最小的两个节点进行合并"></a><strong>3.2.2 第二步：选择频率最小的两个节点进行合并</strong></h3><ul><li>选择 <code>a(5)</code> 和 <code>b(9)</code>，合并成新节点，频率为 <code>5 + 9 = 14</code>。</li></ul><pre class="line-numbers language-none"><code class="language-none">  (a+b)(14)  /      \a(5)    b(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>将新节点 <code>(a+b)(14)</code> 加回节点集合：</li></ul><pre class="line-numbers language-none"><code class="language-none">(a+b)(14), c(12), d(13), e(16), f(45)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-3-第三步：再次选择频率最小的两个节点"><a href="#3-2-3-第三步：再次选择频率最小的两个节点" class="headerlink" title="3.2.3 第三步：再次选择频率最小的两个节点"></a><strong>3.2.3 第三步：再次选择频率最小的两个节点</strong></h3><ul><li>选择 <code>c(12)</code> 和 <code>d(13)</code>，合并成新节点，频率为 <code>12 + 13 = 25</code>。</li></ul><pre class="line-numbers language-none"><code class="language-none">  (c+d)(25)  /      \c(12)   d(13)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>将新节点 <code>(c+d)(25)</code> 加回节点集合：</li></ul><pre class="line-numbers language-none"><code class="language-none">(a+b)(14), (c+d)(25), e(16), f(45)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-4-第四步：继续选择频率最小的两个节点"><a href="#3-2-4-第四步：继续选择频率最小的两个节点" class="headerlink" title="3.2.4 第四步：继续选择频率最小的两个节点"></a><strong>3.2.4 第四步：继续选择频率最小的两个节点</strong></h3><ul><li>选择 <code>(a+b)(14)</code> 和 <code>e(16)</code>，合并成新节点，频率为 <code>14 + 16 = 30</code>。</li></ul><pre class="line-numbers language-none"><code class="language-none">      ((a+b)+e)(30)      /       \  (a+b)(14)   e(16)  /     \a(5)   b(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将新节点 <code>(a+b+e)(30)</code> 加回节点集合：</li></ul><pre class="line-numbers language-none"><code class="language-none">(c+d)(25), ((a+b)+e)(30), f(45)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-5-第五步：合并剩下的两个最小节点"><a href="#3-2-5-第五步：合并剩下的两个最小节点" class="headerlink" title="3.2.5 第五步：合并剩下的两个最小节点"></a><strong>3.2.5 第五步：合并剩下的两个最小节点</strong></h3><ul><li>选择 <code>(c+d)(25)</code> 和 <code>((a+b)+e)(30)</code>，合并成新节点，频率为 <code>25 + 30 = 55</code>。</li></ul><pre class="line-numbers language-none"><code class="language-none">      ((c+d)+((a+b)+e))(55)      /                \  (c+d)(25)        ((a+b)+e)(30)  /     \           /       \c(12)  d(13)   (a+b)(14)   e(16)                    /  \                  a(5) b(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将新节点加入集合：</li></ul><pre class="line-numbers language-none"><code class="language-none">((c+d)+((a+b)+e))(55), f(45)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-6-第六步：合并最后两个节点"><a href="#3-2-6-第六步：合并最后两个节点" class="headerlink" title="3.2.6 第六步：合并最后两个节点"></a><strong>3.2.6 第六步：合并最后两个节点</strong></h3><ul><li>合并 <code>f(45)</code> 和 <code>((c+d)+((a+b)+e))(55)</code>，频率为 <code>45 + 55 = 100</code>。</li></ul><pre class="line-numbers language-none"><code class="language-none">   ROOT(100)   /       \f(45)   ((c+d)+((a+b)+e))(55)           /                \       (c+d)(25)       ((a+b)+e)(30)       /     \           /       \     c(12)  d(13)   (a+b)(14)   e(16)                         /  \                       a(5) b(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-生成哈夫曼编码"><a href="#3-3-生成哈夫曼编码" class="headerlink" title="3.3. 生成哈夫曼编码"></a><strong>3.3. 生成哈夫曼编码</strong></h3><h3 id="3-3-1-编码规则"><a href="#3-3-1-编码规则" class="headerlink" title="3.3.1 编码规则"></a><strong>3.3.1 编码规则</strong></h3><ul><li><strong>向左走，编码为 0</strong>  </li><li><strong>向右走，编码为 1</strong></li></ul><h3 id="3-3-2-编码生成"><a href="#3-3-2-编码生成" class="headerlink" title="3.3.2 编码生成"></a><strong>3.3.2 编码生成</strong></h3><ul><li><code>f</code> → <code>0</code>  </li><li><code>c</code> → <code>100</code>  </li><li><code>d</code> → <code>101</code>  </li><li><code>a</code> → <code>1100</code>  </li><li><code>b</code> → <code>1101</code>  </li><li><code>e</code> → <code>111</code></li></ul><h3 id="3-4-合并节点的贪心思想"><a href="#3-4-合并节点的贪心思想" class="headerlink" title="3.4. 合并节点的贪心思想"></a><strong>3.4. 合并节点的贪心思想</strong></h3><h3 id="为什么每次选择最小的两个节点合并？"><a href="#为什么每次选择最小的两个节点合并？" class="headerlink" title="为什么每次选择最小的两个节点合并？"></a><strong>为什么每次选择最小的两个节点合并？</strong></h3><ol><li><p><strong>减少树的高度</strong>  </p><ul><li>频率小的节点放在树的底层，减少高频字符的路径长度。</li></ul></li><li><p><strong>保证整体编码长度最小</strong>  </p><ul><li>频率越高的字符路径越短，减少整体编码的长度。</li></ul></li><li><p><strong>贪心选择局部最优解</strong>  </p><ul><li>每次选择最小的两个节点合并，最终得到整体最优的哈夫曼树。</li></ul></li></ol><h3 id="3-5-代码回顾"><a href="#3-5-代码回顾" class="headerlink" title="3.5. 代码回顾"></a><strong>3.5. 代码回顾</strong></h3><h3 id="核心逻辑（合并节点部分）"><a href="#核心逻辑（合并节点部分）" class="headerlink" title="核心逻辑（合并节点部分）"></a><strong>核心逻辑（合并节点部分）</strong></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    HuffmanNode<span class="token operator">*</span> left <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HuffmanNode<span class="token operator">*</span> right <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 合并两个最小频率节点</span>    HuffmanNode<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">HuffmanNode</span><span class="token punctuation">(</span><span class="token char">'$'</span><span class="token punctuation">,</span> left<span class="token operator">-&gt;</span>freq <span class="token operator">+</span> right<span class="token operator">-&gt;</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>    newNode<span class="token operator">-&gt;</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    newNode<span class="token operator">-&gt;</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token comment">// 将新节点加入小顶堆</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每次取出<strong>两个最小节点</strong>。</li><li>合并为新节点，新的频率是两者之和。</li><li>将新节点重新插入到<strong>小顶堆</strong>中。</li></ul><h3 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6. 总结"></a><strong>3.6. 总结</strong></h3><ol><li><strong>每次合并最小的两个节点</strong>，确保局部最优。  </li><li><strong>重复合并，直到构建出一棵完整的哈夫曼树</strong>。  </li><li><strong>使用二叉树的左 0 右 1 规则生成编码</strong>。  </li><li><strong>小顶堆保证每次能够快速找到最小的两个节点</strong>。</li></ol><h2 id="4-哈夫曼编码-C-实现"><a href="#4-哈夫曼编码-C-实现" class="headerlink" title="4. 哈夫曼编码 C++ 实现"></a><strong>4. 哈夫曼编码 C++ 实现</strong></h2><h3 id="4-1-代码示例"><a href="#4-1-代码示例" class="headerlink" title="4.1 代码示例"></a><strong>4.1 代码示例</strong></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 定义哈夫曼树的节点</span><span class="token keyword">struct</span> <span class="token class-name">HuffmanNode</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>        <span class="token comment">// 字符</span>    <span class="token keyword">int</span> freq<span class="token punctuation">;</span>         <span class="token comment">// 频率</span>    HuffmanNode <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token function">HuffmanNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">freq</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 比较函数，用于优先队列</span><span class="token keyword">struct</span> <span class="token class-name">Compare</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>HuffmanNode<span class="token operator">*</span> l<span class="token punctuation">,</span> HuffmanNode<span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> l<span class="token operator">-&gt;</span>freq <span class="token operator">&gt;</span> r<span class="token operator">-&gt;</span>freq<span class="token punctuation">;</span> <span class="token comment">// 小顶堆</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 递归打印哈夫曼编码</span><span class="token keyword">void</span> <span class="token function">printCodes</span><span class="token punctuation">(</span>HuffmanNode<span class="token operator">*</span> root<span class="token punctuation">,</span> string code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是叶子节点，打印字符和对应编码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> <span class="token char">'$'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> code <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printCodes</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> code <span class="token operator">+</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printCodes</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> code <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 哈夫曼编码主函数</span><span class="token keyword">void</span> <span class="token function">HuffmanCoding</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> freqTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>HuffmanNode<span class="token operator">*</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>HuffmanNode<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Compare<span class="token operator">&gt;</span> minHeap<span class="token punctuation">;</span>    <span class="token comment">// 将字符和频率加入最小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> pair <span class="token operator">:</span> freqTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">HuffmanNode</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>first<span class="token punctuation">,</span> pair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 构建哈夫曼树</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HuffmanNode<span class="token operator">*</span> left <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HuffmanNode<span class="token operator">*</span> right <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个新节点，将左右子节点合并</span>        HuffmanNode<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">HuffmanNode</span><span class="token punctuation">(</span><span class="token char">'$'</span><span class="token punctuation">,</span> left<span class="token operator">-&gt;</span>freq <span class="token operator">+</span> right<span class="token operator">-&gt;</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-&gt;</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        newNode<span class="token operator">-&gt;</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 打印哈夫曼编码</span>    <span class="token function">printCodes</span><span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> freqTable <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">HuffmanCoding</span><span class="token punctuation">(</span>freqTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-代码解析"><a href="#4-2-代码解析" class="headerlink" title="4.2 代码解析"></a><strong>4.2 代码解析</strong></h3><ol><li><p><strong>定义节点结构体</strong>  </p><ul><li>每个节点包含字符、频率、左右子节点指针。</li></ul></li><li><p><strong>使用优先队列（小顶堆）</strong>  </p><ul><li>频率小的节点优先出队。</li></ul></li><li><p><strong>构建哈夫曼树</strong>  </p><ul><li>每次合并两个频率最小的节点，形成新节点并重新加入堆中。</li></ul></li><li><p><strong>生成编码</strong>  </p><ul><li>使用<strong>递归遍历</strong>生成每个字符的编码。</li></ul></li><li><p><strong>打印编码</strong>  </p><ul><li>对叶子节点进行编码输出。</li></ul></li></ol><h3 id="4-3-示例输出"><a href="#4-3-示例输出" class="headerlink" title="4.3 示例输出"></a><strong>4.3 示例输出</strong></h3><pre class="line-numbers language-none"><code class="language-none">f: 0c: 100d: 101a: 1100b: 1101e: 111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-哈夫曼编码的优缺点"><a href="#5-哈夫曼编码的优缺点" class="headerlink" title="5. 哈夫曼编码的优缺点"></a><strong>5. 哈夫曼编码的优缺点</strong></h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ <strong>优点</strong></h3><ol><li>高效的压缩算法。  </li><li>适用于字符频率分布不均匀的场景。  </li><li>前缀编码，无解码歧义。</li></ol><h3 id="❌-缺点"><a href="#❌-缺点" class="headerlink" title="❌ 缺点"></a>❌ <strong>缺点</strong></h3><ol><li>频率统计可能较耗时。  </li><li>对于字符频率相对均匀的数据，压缩效果不显著。  </li><li>在动态数据流中编码效率较低。</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h2><ul><li>哈夫曼编码是一种<strong>贪心算法</strong>，在每一步都选择频率最小的节点进行合并。  </li><li>构建哈夫曼树的核心是<strong>小顶堆</strong>，以确保频率最小的节点被优先处理。  </li><li>哈夫曼编码是一种<strong>无前缀编码</strong>，有效避免了编码歧义。</li></ul><p>通过这个示例和讲解，相信你已经对哈夫曼编码有了清晰的理解！🚀</p><h1 id="📚-注：小顶堆（Min-Heap）详解"><a href="#📚-注：小顶堆（Min-Heap）详解" class="headerlink" title="📚 注：小顶堆（Min Heap）详解"></a>📚 <strong>注：小顶堆（Min Heap）详解</strong></h1><h2 id="1-什么是小顶堆？"><a href="#1-什么是小顶堆？" class="headerlink" title="1. 什么是小顶堆？"></a><strong>1. 什么是小顶堆？</strong></h2><p><strong>小顶堆（Min Heap）</strong> 是一种<strong>二叉堆</strong>（Binary Heap），它满足以下两个特性：</p><ol><li><p><strong>完全二叉树</strong>：  </p><ul><li>小顶堆必须是一棵<strong>完全二叉树</strong>，即每一层都被完全填满，除了最后一层可以不满，但节点必须从左到右连续排列。</li></ul></li><li><p><strong>堆序性（堆性质）</strong>：  </p><ul><li><strong>根节点的值小于或等于其所有子节点的值</strong>。  </li><li>对于每一个节点 ( i )：</li></ul><pre class="line-numbers language-none"><code class="language-none">A[i] &lt;= A[2i+1] // (左子节点)A[i] &lt;= A[2i+2] // (右子节点)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="2-小顶堆的关键特性"><a href="#2-小顶堆的关键特性" class="headerlink" title="2. 小顶堆的关键特性"></a><strong>2. 小顶堆的关键特性</strong></h2><ol><li><p><strong>根节点</strong>  </p><ul><li>堆顶（根节点）总是存储<strong>最小的元素</strong>。</li></ul></li><li><p><strong>插入操作</strong>  </p><ul><li>新元素插入到堆的末尾，然后进行<strong>上浮操作</strong>，以确保堆的性质保持不变。</li></ul></li><li><p><strong>删除操作</strong>  </p><ul><li>通常删除<strong>根节点</strong>（最小值）。  </li><li>用堆的最后一个节点替换根节点，然后进行<strong>下沉操作</strong>，以重新维持堆的性质。</li></ul></li><li><p><strong>优先队列</strong>  </p><ul><li>小顶堆常用于实现<strong>优先队列</strong>（Priority Queue），保证每次出队的都是当前最小的元素。</li></ul></li></ol><h2 id="3-小顶堆与大顶堆的区别"><a href="#3-小顶堆与大顶堆的区别" class="headerlink" title="3. 小顶堆与大顶堆的区别"></a><strong>3. 小顶堆与大顶堆的区别</strong></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>小顶堆 (Min Heap)</strong></th><th><strong>大顶堆 (Max Heap)</strong></th></tr></thead><tbody><tr><td><strong>根节点</strong></td><td>最小值</td><td>最大值</td></tr><tr><td><strong>子节点</strong></td><td>子节点值 &gt;= 根节点值</td><td>子节点值 &lt;= 根节点值</td></tr><tr><td><strong>应用场景</strong></td><td>哈夫曼编码、最短路径算法</td><td>堆排序、最大值查找</td></tr></tbody></table><h2 id="4-C-中的优先队列与小顶堆"><a href="#4-C-中的优先队列与小顶堆" class="headerlink" title="4. C++ 中的优先队列与小顶堆"></a><strong>4. C++ 中的优先队列与小顶堆</strong></h2><h3 id="4-1-std-priority-queue"><a href="#4-1-std-priority-queue" class="headerlink" title="4.1 std::priority_queue"></a><strong>4.1 <code>std::priority_queue</code></strong></h3><p>在 C++ 中，默认的 <code>std::priority_queue</code> 是<strong>大顶堆</strong>，即最大值优先。</p><p>要实现<strong>小顶堆</strong>，可以使用以下两种方式：</p><ol><li><strong>自定义比较器</strong>  </li><li><strong>使用 <code>std::greater</code> 函数对象</strong></li></ol><h3 id="4-2-小顶堆示例"><a href="#4-2-小顶堆示例" class="headerlink" title="4.2 小顶堆示例"></a><strong>4.2 小顶堆示例</strong></h3><h4 id="示例-1：使用-std-greater-实现小顶堆"><a href="#示例-1：使用-std-greater-实现小顶堆" class="headerlink" title="示例 1：使用 std::greater 实现小顶堆"></a><strong>示例 1：使用 <code>std::greater</code> 实现小顶堆</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 使用 greater&lt;int&gt; 实现小顶堆</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> minHeap<span class="token punctuation">;</span>    <span class="token comment">// 插入元素</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取出最小元素</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小顶堆的元素出队顺序："</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minHeap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>✅ 输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">小顶堆的元素出队顺序：1 5 10 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例-2：使用自定义比较器"><a href="#示例-2：使用自定义比较器" class="headerlink" title="示例 2：使用自定义比较器"></a><strong>示例 2：使用自定义比较器</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 自定义比较器</span><span class="token keyword">struct</span> <span class="token class-name">Compare</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span> <span class="token comment">// a 大于 b 时，a 排在后面</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Compare<span class="token operator">&gt;</span> minHeap<span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小顶堆的元素出队顺序："</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minHeap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>✅ 输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">小顶堆的元素出队顺序：1 3 8 15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="5-小顶堆的应用场景"><a href="#5-小顶堆的应用场景" class="headerlink" title="5. 小顶堆的应用场景"></a><strong>5. 小顶堆的应用场景</strong></h2><ol><li><strong>哈夫曼编码</strong>  <ul><li>使用小顶堆确保每次选择权重最小的两个节点进行合并。</li></ul></li><li><strong>Dijkstra 算法</strong>  <ul><li>寻找最短路径时，使用小顶堆优先选择当前路径最短的节点。</li></ul></li><li><strong>Top K 问题</strong>  <ul><li>在大量数据中快速找到前 K 小的元素。</li></ul></li><li><strong>事件驱动仿真</strong>  <ul><li>模拟器中按照事件发生的时间顺序处理事件。</li></ul></li></ol><h2 id="6-总结-1"><a href="#6-总结-1" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h2><ul><li><strong>小顶堆</strong>是一种<strong>完全二叉树</strong>，每个父节点的值都小于或等于其子节点的值。  </li><li>在 C++ 中，可以使用 <code>std::priority_queue</code> 配合 <code>std::greater</code> 或自定义比较器来实现小顶堆。  </li><li>小顶堆的核心操作包括<strong>插入（上浮）</strong>、<strong>删除（下沉）</strong>。  </li><li>主要应用于<strong>优先队列</strong>、<strong>哈夫曼编码</strong>、<strong>Dijkstra 算法</strong>等场景。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 哈夫曼编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++贪心算法</title>
      <link href="/C-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html"/>
      <url>/C-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="📚-C-中贪心算法详解"><a href="#📚-C-中贪心算法详解" class="headerlink" title="📚 C++ 中贪心算法详解"></a>📚 C++ 中贪心算法详解</h1><h2 id="1-贪心算法的定义"><a href="#1-贪心算法的定义" class="headerlink" title="1. 贪心算法的定义"></a><strong>1. 贪心算法的定义</strong></h2><p><strong>贪心算法</strong>（Greedy Algorithm）是一种在每一步选择中都采取当前状态下<strong>局部最优</strong>的选择，以期最终达到<strong>全局最优解</strong>的算法。</p><span id="more"></span><h3 id="1-1-核心思想"><a href="#1-1-核心思想" class="headerlink" title="1.1 核心思想"></a><strong>1.1 核心思想</strong></h3><ul><li><strong>局部最优选择</strong>：在问题的每一步中，都选择当前看起来最优或最有利的选项。  </li><li><strong>全局最优目标</strong>：通过一系列局部最优的选择，最终达到全局最优或近似最优解。  </li><li><strong>不可回溯性</strong>：一旦做出选择，无法回头更改之前的选择。</li></ul><h3 id="1-2-贪心算法的适用条件"><a href="#1-2-贪心算法的适用条件" class="headerlink" title="1.2 贪心算法的适用条件"></a><strong>1.2 贪心算法的适用条件</strong></h3><p>贪心算法并不总能保证得到全局最优解，它只在满足以下两个条件时才适用：</p><ol><li><p><strong>贪心选择性</strong>  </p><ul><li>可以通过每一步的局部最优选择，最终得到全局最优解。</li></ul></li><li><p><strong>最优子结构</strong>  </p><ul><li>问题的最优解包含其子问题的最优解。</li></ul></li></ol><h3 id="1-3-贪心算法与其他算法的区别"><a href="#1-3-贪心算法与其他算法的区别" class="headerlink" title="1.3 贪心算法与其他算法的区别"></a><strong>1.3 贪心算法与其他算法的区别</strong></h3><ul><li><strong>动态规划</strong>：适合有重叠子问题的场景，结果需要基于多个子问题的解。  </li><li><strong>回溯算法</strong>：会考虑所有可能的选择，找到最佳解。  </li><li><strong>贪心算法</strong>：在每一步选择中做出最优决定，不再考虑之前的选择或之后的结果。</li></ul><h2 id="2-贪心算法的基本步骤"><a href="#2-贪心算法的基本步骤" class="headerlink" title="2. 贪心算法的基本步骤"></a><strong>2. 贪心算法的基本步骤</strong></h2><ol><li><strong>问题分解</strong>：将问题分解为多个子问题。  </li><li><strong>贪心策略</strong>：针对每个子问题，选择当前最优解。  </li><li><strong>合并结果</strong>：将所有子问题的最优解组合起来，形成问题的最终解。  </li><li><strong>验证结果</strong>：判断最终解是否满足问题的要求。</li></ol><h2 id="3-贪心算法的优缺点"><a href="#3-贪心算法的优缺点" class="headerlink" title="3. 贪心算法的优缺点"></a><strong>3. 贪心算法的优缺点</strong></h2><h3 id="✅-优点："><a href="#✅-优点：" class="headerlink" title="✅ 优点："></a>✅ <strong>优点：</strong></h3><ul><li>简单直观，易于理解和实现。  </li><li>在某些问题上，可以提供高效的最优解。  </li><li>时间复杂度较低，通常比动态规划更快。</li></ul><h3 id="❌-缺点："><a href="#❌-缺点：" class="headerlink" title="❌ 缺点："></a>❌ <strong>缺点：</strong></h3><ul><li>并不适用于所有问题，可能无法得到全局最优解。  </li><li>一旦选择某一步，无法回溯进行更改。  </li><li>依赖问题是否满足<strong>贪心选择性</strong>和<strong>最优子结构</strong>。</li></ul><h2 id="4-贪心算法的经典应用场景"><a href="#4-贪心算法的经典应用场景" class="headerlink" title="4. 贪心算法的经典应用场景"></a><strong>4. 贪心算法的经典应用场景</strong></h2><ol><li><strong>活动选择问题</strong>（Activity Selection Problem）  </li><li><strong>哈夫曼编码</strong>（Huffman Coding）  </li><li><strong>最小生成树</strong>（Minimum Spanning Tree）：Kruskal算法、Prim算法  </li><li><strong>单源最短路径问题</strong>（Shortest Path Problem）：Dijkstra算法  </li><li><strong>背包问题</strong>（Fractional Knapsack Problem）</li></ol><h2 id="5-贪心算法的经典例题"><a href="#5-贪心算法的经典例题" class="headerlink" title="5. 贪心算法的经典例题"></a><strong>5. 贪心算法的经典例题</strong></h2><h3 id="示例：分数背包问题（Fractional-Knapsack-Problem）"><a href="#示例：分数背包问题（Fractional-Knapsack-Problem）" class="headerlink" title="示例：分数背包问题（Fractional Knapsack Problem）"></a><strong>示例：分数背包问题（Fractional Knapsack Problem）</strong></h3><p><strong>问题描述：</strong></p><ul><li>有一背包，容量为 ( W )。  </li><li>有 ( n ) 个物品，每个物品有一个重量 ( w_i ) 和价值 ( v_i )。  </li><li>可以将物品切分成任意部分放入背包。  </li><li><strong>目标</strong>：在不超过背包容量的前提下，使得背包中的总价值最大化。</li></ul><p><strong>贪心策略：</strong></p><ul><li>优先选择<strong>单位价值最高</strong>的物品。</li></ul><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a><strong>C++ 实现</strong></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 物品结构体</span><span class="token keyword">struct</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 比较单位价值</span><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>Item a<span class="token punctuation">,</span> Item b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>value <span class="token operator">/</span> a<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>    <span class="token keyword">double</span> r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>value <span class="token operator">/</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>    <span class="token keyword">return</span> r1 <span class="token operator">&gt;</span> r2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 分数背包问题</span><span class="token keyword">double</span> <span class="token function">fractionalKnapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span> W<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span><span class="token operator">&amp;</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 按单位价值排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> items<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> totalValue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token comment">// 背包中物品的总价值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>W <span class="token operator">&gt;=</span> item<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果当前物品可以完全装入</span>            W <span class="token operator">-=</span> item<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>            totalValue <span class="token operator">+=</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 装入部分物品</span>            totalValue <span class="token operator">+=</span> item<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>W <span class="token operator">/</span> item<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 背包已满</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> totalValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> W <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token comment">// 背包容量</span>    vector<span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> maxValue <span class="token operator">=</span> <span class="token function">fractionalKnapsack</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"背包可以装入的最大价值为: "</span> <span class="token operator">&lt;&lt;</span> maxValue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>📝 代码解析：</strong></p><ol><li>将物品按<strong>单位价值</strong>降序排序。  </li><li>遍历物品：<ul><li>如果物品可以完全装入背包，则加入背包。  </li><li>如果不能完全装入，则加入部分物品。</li></ul></li><li>返回背包中的总价值。</li></ol><p><strong>✅ 输出示例：</strong></p><pre class="line-numbers language-none"><code class="language-none">背包可以装入的最大价值为: 240<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="6-贪心算法的总结"><a href="#6-贪心算法的总结" class="headerlink" title="6. 贪心算法的总结"></a><strong>6. 贪心算法的总结</strong></h2><h3 id="6-1-使用贪心算法的步骤"><a href="#6-1-使用贪心算法的步骤" class="headerlink" title="6.1 使用贪心算法的步骤"></a><strong>6.1 使用贪心算法的步骤</strong></h3><ol><li>理解问题，判断是否满足<strong>贪心选择性</strong>和<strong>最优子结构</strong>。  </li><li>明确每一步的<strong>贪心策略</strong>。  </li><li>实现贪心算法，确保选择的局部最优解是合理的。  </li><li>验证最终解是否是全局最优解。</li></ol><h3 id="6-2-贪心算法的思维方式"><a href="#6-2-贪心算法的思维方式" class="headerlink" title="6.2 贪心算法的思维方式"></a><strong>6.2 贪心算法的思维方式</strong></h3><ul><li>每次做出<strong>局部最优</strong>选择。  </li><li>确保当前选择不会影响整体解的最优性。  </li><li>结合实际问题，灵活设计贪心策略。</li></ul><hr><h2 id="7-常见的贪心算法题型"><a href="#7-常见的贪心算法题型" class="headerlink" title="7. 常见的贪心算法题型"></a><strong>7. 常见的贪心算法题型</strong></h2><ul><li><strong>选择问题</strong>：活动选择问题  </li><li><strong>路径问题</strong>：Dijkstra 最短路径  </li><li><strong>构建问题</strong>：哈夫曼编码  </li><li><strong>分配问题</strong>：分数背包问题</li></ul><hr><p>贪心算法虽然简单高效，但需要仔细分析问题，确保满足<strong>贪心选择性</strong>和<strong>最优子结构</strong>。在适用场景下，贪心算法无疑是一种强大的工具。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑运算知识点: 3 &lt;= i &lt;= 5</title>
      <link href="/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%9F%A5%E8%AF%86%E7%82%B9-3-i-5.html"/>
      <url>/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%9F%A5%E8%AF%86%E7%82%B9-3-i-5.html</url>
      
        <content type="html"><![CDATA[<h1 id="在-C-中，表达式-3"><a href="#在-C-中，表达式-3" class="headerlink" title="在 C++ 中，表达式 3 <= i <= 5 的解析"></a>在 C++ 中，表达式 <code>3 &lt;= i &lt;= 5</code> 的解析</h1><p>在 C++ 中，表达式 <code>3 &lt;= i &lt;= 5</code> 并不是你可能预期的 “i 在 3 到 5 之间” 的意思。实际上，这个表达式是由两个比较操作符构成的，具体含义如下：</p><h2 id="解析步骤："><a href="#解析步骤：" class="headerlink" title="解析步骤："></a>解析步骤：</h2><ol><li><p><code>3 &lt;= i</code>：首先，比较 3 是否小于或等于 i。</p><ul><li>如果 i 的值大于或等于 3，则 <code>3 &lt;= i</code> 的结果为 true（即 1），否则为 false（即 0）。</li></ul></li><li><p><code>(结果) &lt;= 5</code>：然后，将上一步的结果与 5 进行比较。</p><ul><li>如果 <code>3 &lt;= i</code> 的结果是 true（即 1），那么 1 &lt;= 5，这个表达式的结果为 true。</li><li>如果 <code>3 &lt;= i</code> 的结果是 false（即 0），那么 0 &lt;= 5，这个表达式的结果仍然是 true。</li></ul></li></ol><h2 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h2><ul><li><p>当 i = 4 时：</p><ul><li><code>3 &lt;= 4</code> 是 true，即 1。</li><li>然后，1 &lt;= 5 也是 true，所以整个表达式 <code>3 &lt;= 4 &lt;= 5</code> 的结果是 true。</li></ul></li><li><p>当 i = 2 时：</p><ul><li><code>3 &lt;= 2</code> 是 false，即 0。</li><li>然后，0 &lt;= 5 是 true，所以整个表达式 <code>3 &lt;= 2 &lt;= 5</code> 的结果是 true。</li></ul></li><li><p>当 i = 6 时：</p><ul><li><code>3 &lt;= 6</code> 是 true，即 1。</li><li>然后，1 &lt;= 5 是 true，所以整个表达式 <code>3 &lt;= 6 &lt;= 5</code> 的结果是 true。</li></ul></li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><code>3 &lt;= i &lt;= 5</code> 实际上会被解释为：</p><ul><li>先计算 <code>3 &lt;= i</code> 的结果（true 或 false），然后</li><li>再检查这个结果是否小于或等于 5。</li></ul><p>这意味着，<code>3 &lt;= i &lt;= 5</code> 可能不会按你期望的方式工作，它的实际行为可能不符合数学上的 <code>3 &lt;= i &lt;= 5</code> 这一不等式的意义。</p><p>如果你想检查 i 是否在 3 到 5 的范围内，应该使用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，表达式会先判断 i 是否大于或等于 3，再判断 i 是否小于或等于 5，确保结果符合你预期的范围判断。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 逻辑运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟加法器de代码解释</title>
      <link href="/%E6%A8%A1%E6%8B%9F%E5%8A%A0%E6%B3%95%E5%99%A8de%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A.html"/>
      <url>/%E6%A8%A1%E6%8B%9F%E5%8A%A0%E6%B3%95%E5%99%A8de%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>左移操作在加法器设计中的主要作用是处理和传递进位，这是实现二进制加法的核心。通过左移操作，我们可以模拟加法过程中的进位传递，从而实现两个数的精确相加。这种方法不仅适用于简单的加法器，也是现代计算机中算术逻辑单元（ALU）执行加法操作的基础。</p><span id="more"></span><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 模拟加法器</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// 计算进位</span>        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token comment">// 计算当前位的和</span>        b <span class="token operator">=</span> carry <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 进位左移</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5 + 7 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是一个简单的C++程序，用于模拟两个整数的加法操作，使用的是位运算。下面我将详细解释代码的每个部分：</p><h3 id="包含头文件"><a href="#包含头文件" class="headerlink" title="包含头文件"></a>包含头文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码包含了C++标准库中的<code>iostream</code>头文件，它允许程序使用输入输出流，比如<code>cin</code>和<code>cout</code>。</p><h3 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码告诉编译器使用<code>std</code>命名空间，这样我们就可以直接使用<code>cout</code>而不是<code>std::cout</code>，<code>endl</code>而不是<code>std::endl</code>等。</p><h3 id="定义加法函数"><a href="#定义加法函数" class="headerlink" title="定义加法函数"></a>定义加法函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// 计算进位</span>        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token comment">// 计算当前位的和</span>        b <span class="token operator">=</span> carry <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 进位左移</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个名为<code>add</code>的函数，它接受两个整数参数<code>a</code>和<code>b</code>，并返回它们的和。函数的实现使用了位运算来模拟加法的过程。</p><ul><li><p><code>while (b != 0)</code>：这是一个循环，只要<code>b</code>不为0，循环就会继续。因为<code>b</code>用于存储每次迭代后的进位，所以当没有进位时，循环结束。</p></li><li><p><code>int carry = a &amp; b;</code>：这一行计算<code>a</code>和<code>b</code>的按位与（AND）操作的结果，这个结果就是需要进位的位。在二进制中，只有当两个相应的位都是1时，结果才是1，这表示这两个位相加会产生一个进位。</p></li><li><p><code>a = a ^ b;</code>：这一行计算<code>a</code>和<code>b</code>的按位异或（XOR）操作的结果，这个结果就是不考虑进位时的和。在二进制中，当两个相应的位不同的时候，结果是1，这表示这两个位相加的结果。</p></li><li><p><code>b = carry &lt;&lt; 1;</code>：这一行将进位<code>carry</code>左移一位，为下一次迭代准备。在二进制中，左移操作相当于乘以2，这样下一次循环就可以处理下一个更高的位。</p></li></ul><p>当然，让我们更详细地探讨这一行代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">b <span class="token operator">=</span> carry <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码是加法模拟过程中的关键部分，它涉及到计算机科学中的位运算。在这里，<code>carry</code>是一个整数，代表当前位相加后产生的进位。<code>&lt;&lt;</code>是位左移运算符，它将<code>carry</code>的所有位向左移动指定的位数（在这个例子中是1位）。</p><h3 id="位左移运算"><a href="#位左移运算" class="headerlink" title="位左移运算 (<<)"></a>位左移运算 (<code>&lt;&lt;</code>)</h3><p>位左移运算符<code>&lt;&lt;</code>将一个数的所有位向左移动指定的位数。在二进制表示中，这意味着每个位都向左移动，空出来的位置用0填充（对于无符号数）或者用符号位填充（对于有符号数，这是算术左移）。左移操作的效果等同于将原数乘以2的指定次幂。</p><p>例如，如果我们有一个8位的二进制数<code>00000001</code>（十进制中的1），向左移动1位将会得到<code>00000010</code>（十进制中的2）。这等同于将1乘以2。</p><h3 id="进位（Carry）"><a href="#进位（Carry）" class="headerlink" title="进位（Carry）"></a>进位（Carry）</h3><p>在加法运算中，当两个位相加的结果超过1（即二进制中的<code>10</code>），就会有一个进位到下一个更高的位。例如，在二进制中，<code>01 + 01</code>的结果是<code>10</code>，其中<code>1</code>是当前位的结果，而<code>0</code>需要进位到下一个更高的位。</p><h3 id="代码中的b-carry-1"><a href="#代码中的b-carry-1" class="headerlink" title="代码中的b = carry << 1;"></a>代码中的<code>b = carry &lt;&lt; 1;</code></h3><p>在这段代码中，<code>carry</code>变量保存了当前位相加后产生的进位。这个进位需要被带到下一个更高的位进行计算。通过将<code>carry</code>左移1位，我们实际上是将这个进位乘以2，这样就可以在下一次迭代中正确地处理下一个更高的位。</p><p>例如，假设我们正在计算<code>5 + 7</code>（二进制中分别是<code>0101</code>和<code>0111</code>），在最低位（右边第一位）相加时没有进位，但在下一位（右边第二位）相加时产生了进位。这个进位被保存在<code>carry</code>中，然后通过<code>carry &lt;&lt; 1</code>左移1位，为下一次迭代准备。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>b = carry &lt;&lt; 1;</code>这行代码的目的是将当前位的进位左移一位，以便在下一次循环迭代中处理下一个更高的位。这种位运算的方法有效地模拟了加法过程中的进位操作，是计算机内部执行加法的一种方式。通过这种方式，我们可以逐步构建出两个数的总和，完全依赖于位运算，而不使用传统的加法操作符。</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5 + 7 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是程序的入口点，<code>main</code>函数。</p><ul><li><p><code>int a = 5, b = 7;</code>：这里定义了两个整数变量<code>a</code>和<code>b</code>，并分别初始化为5和7。</p></li><li><p><code>cout &lt;&lt; "5 + 7 = " &lt;&lt; add(a, b) &lt;&lt; endl;</code>：这行代码使用<code>cout</code>输出字符串”5 + 7 = “，然后调用<code>add</code>函数计算<code>a</code>和<code>b</code>的和，并输出结果。<code>endl</code>用于输出一个换行符，并刷新输出缓冲区。</p></li><li><p><code>return 0;</code>：这表示程序正常结束。</p></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这个程序演示了如何不使用传统的算术加法操作符<code>+</code>，而是通过位运算来实现两个整数的加法。这种方法在计算机内部实际上就是这样进行的，因为计算机只能理解和执行二进制操作。</p><p>在加法器设计中，特别是在使用位运算模拟加法的过程中，左移操作扮演着至关重要的角色。它用于处理进位（carry），这是二进制加法中不可或缺的部分。下面详细解释左移操作在加法器设计中的用途：</p><h3 id="1-进位传递"><a href="#1-进位传递" class="headerlink" title="1. 进位传递"></a>1. 进位传递</h3><p>在二进制加法中，每一位的相加可能产生一个进位，这个进位需要被传递到更高位（下一个更左边的位）。例如，当你在最低位（最右边的位）相加得到一个进位时，这个进位需要被加到下一位的计算中。左移操作正是用于将这个进位传递到正确的位置。</p><h3 id="2-模拟加法的迭代过程"><a href="#2-模拟加法的迭代过程" class="headerlink" title="2. 模拟加法的迭代过程"></a>2. 模拟加法的迭代过程</h3><p>在模拟加法的过程中，你通常从最低位开始，逐步向最高位移动。每次迭代处理一位，计算当前位的和以及进位。左移操作允许你将进位移动到下一位，这样在下一次迭代中，这个进位就可以被加到下一位的计算中。</p><h3 id="3-保持进位的数值"><a href="#3-保持进位的数值" class="headerlink" title="3. 保持进位的数值"></a>3. 保持进位的数值</h3><p>在每次迭代中，进位的数值需要被保持和更新。左移操作不仅将进位移动到正确的位置，还保持了进位的数值。例如，如果当前位的进位是1，左移一位后，这个进位就变成了2（二进制中的<code>10</code>），这正是下一位相加时需要的进位值。</p><h3 id="4-避免使用额外的存储"><a href="#4-避免使用额外的存储" class="headerlink" title="4. 避免使用额外的存储"></a>4. 避免使用额外的存储</h3><p>在位运算模拟的加法器中，通常不需要额外的存储来保存进位，因为进位可以直接通过左移操作传递到下一位。这使得加法器的设计更加简洁和高效。</p><h3 id="5-实现二进制加法的基本原则"><a href="#5-实现二进制加法的基本原则" class="headerlink" title="5. 实现二进制加法的基本原则"></a>5. 实现二进制加法的基本原则</h3><p>二进制加法的基本原则是，每一位的相加结果加上前一位的进位，得到当前位的和以及下一位的进位。左移操作正是实现这一原则的关键，它确保了进位能够正确地被加到下一位。</p><h3 id="6-提高计算效率"><a href="#6-提高计算效率" class="headerlink" title="6. 提高计算效率"></a>6. 提高计算效率</h3><p>使用位运算，特别是左移操作，可以提高加法计算的效率。位运算通常比传统的算术运算更快，因为它们是直接在硬件层面上执行的。在高性能计算和嵌入式系统设计中，这种效率的提升尤为重要。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>左移操作在加法器设计中的主要作用是处理和传递进位，这是实现二进制加法的核心。通过左移操作，我们可以模拟加法过程中的进位传递，从而实现两个数的精确相加。这种方法不仅适用于简单的加法器，也是现代计算机中算术逻辑单元（ALU）执行加法操作的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 加法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中模拟算法</title>
      <link href="/C-%E4%B8%AD%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95.html"/>
      <url>/C-%E4%B8%AD%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-中模拟算法详解与代码示例"><a href="#C-中模拟算法详解与代码示例" class="headerlink" title="C++中模拟算法详解与代码示例"></a>C++中模拟算法详解与代码示例</h1><h2 id="📚-1-模拟算法简介"><a href="#📚-1-模拟算法简介" class="headerlink" title="📚 1. 模拟算法简介"></a>📚 1. 模拟算法简介</h2><p>模拟算法是一种通过代码直接模拟问题描述中所给出的操作或过程，来达到解决问题目的的算法思想。<br>模拟算法没有固定的模板，通常依赖对问题的理解和逐步还原操作流程。</p><span id="more"></span><h3 id="1-1-模拟算法的核心思想"><a href="#1-1-模拟算法的核心思想" class="headerlink" title="1.1 模拟算法的核心思想"></a>1.1 模拟算法的核心思想</h3><ul><li>还原问题过程：逐步模拟题目描述的操作步骤。</li><li>数据结构选择：根据问题选择合适的数据结构（数组、链表、队列等）。</li><li>细节处理：注重边界条件、异常情况等。</li><li>迭代与递归：根据需求使用循环或递归来完成模拟。</li></ul><h3 id="🛠️-2-模拟算法常见类型"><a href="#🛠️-2-模拟算法常见类型" class="headerlink" title="🛠️ 2. 模拟算法常见类型"></a>🛠️ 2. 模拟算法常见类型</h3><ul><li>简单模拟：直接按照题目要求进行操作。</li><li>矩阵/网格模拟：二维网格上进行移动、填充等操作。</li><li>字符串模拟：模拟字符串编辑、匹配、移动等操作。</li><li>时间模拟：按照时间顺序逐步进行操作。</li><li>状态机模拟：根据不同状态进行状态转移。</li></ul><h2 id="🧠-3-知识点详解与代码示例"><a href="#🧠-3-知识点详解与代码示例" class="headerlink" title="🧠 3. 知识点详解与代码示例"></a>🧠 3. 知识点详解与代码示例</h2><h3 id="3-1-简单模拟"><a href="#3-1-简单模拟" class="headerlink" title="3.1 简单模拟"></a>3.1 简单模拟</h3><p><strong>题目：</strong> 模拟加法器，给定两个整数，逐位相加。<br><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 模拟加法器</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// 计算进位</span>        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token comment">// 计算当前位的和</span>        b <span class="token operator">=</span> carry <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 进位左移</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5 + 7 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点解析：</strong></p><ul><li>使用 位运算 进行加法模拟。</li><li><code>a ^ b</code>：模拟加法，不考虑进位。</li><li><code>a &amp; b</code>：计算进位。</li><li><code>carry &lt;&lt; 1</code>：将进位左移一位。</li></ul><h3 id="3-2-矩阵-网格模拟"><a href="#3-2-矩阵-网格模拟" class="headerlink" title="3.2 矩阵/网格模拟"></a>3.2 矩阵/网格模拟</h3><p><strong>题目：</strong> 模拟机器人在二维网格上移动。<br><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 模拟机器人移动</span><span class="token keyword">void</span> <span class="token function">moveRobot</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> startX<span class="token punctuation">,</span> <span class="token keyword">int</span> startY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> rows <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cols <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> startX<span class="token punctuation">,</span> y <span class="token operator">=</span> startY<span class="token punctuation">;</span>    string directions <span class="token operator">=</span> <span class="token string">"RRDDLLUU"</span><span class="token punctuation">;</span> <span class="token comment">// 移动方向：右下左上</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> dir <span class="token operator">:</span> directions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token char">'R'</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> cols<span class="token punctuation">)</span> y<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 右移</span>            <span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> y<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 左移</span>            <span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> rows<span class="token punctuation">)</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 下移</span>            <span class="token keyword">case</span> <span class="token char">'U'</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 上移</span>        <span class="token punctuation">}</span>        grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 标记路径</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 打印网格</span><span class="token keyword">void</span> <span class="token function">printGrid</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> row <span class="token operator">:</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cell <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> cell <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个5x5的网格，初始值为0</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">grid</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 机器人从 (2, 2) 开始移动</span>    <span class="token function">moveRobot</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印网格</span>    <span class="token function">printGrid</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点解析：</strong></p><ul><li>使用二维数组表示网格。</li><li>通过<code>switch</code>语句控制机器人移动方向。</li><li>在移动后更新网格状态。</li></ul><h3 id="3-3-字符串模拟"><a href="#3-3-字符串模拟" class="headerlink" title="3.3 字符串模拟"></a>3.3 字符串模拟</h3><p><strong>题目：</strong> 模拟字符串反转。<br><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 模拟字符串反转</span>string <span class="token function">reverseString</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"原始字符串: "</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"反转字符串: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点解析：</strong></p><ul><li>使用双指针法进行字符串反转。</li><li><code>swap()</code>交换两个字符。</li></ul><h3 id="3-4-时间模拟"><a href="#3-4-时间模拟" class="headerlink" title="3.4 时间模拟"></a>3.4 时间模拟</h3><p><strong>题目：</strong> 模拟倒计时。<br><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 模拟倒计时</span><span class="token keyword">void</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>seconds <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"倒计时: "</span> <span class="token operator">&lt;&lt;</span> seconds<span class="token operator">--</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"秒"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 延迟1秒</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"倒计时结束!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点解析：</strong></p><ul><li>使用<code>this_thread::sleep_for</code>延时模拟倒计时。</li><li>循环逐秒输出时间。</li></ul><h3 id="3-5-状态机模拟"><a href="#3-5-状态机模拟" class="headerlink" title="3.5 状态机模拟"></a>3.5 状态机模拟</h3><p><strong>题目：</strong> 简单状态机，检测字符序列是否合法。<br><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 模拟状态机</span><span class="token keyword">bool</span> <span class="token function">isValidSequence</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> state <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'a'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> state <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'b'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> state <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'c'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span> state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string seq <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">isValidSequence</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"有效序列"</span> <span class="token operator">:</span> <span class="token string">"无效序列"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点解析：</strong></p><ul><li>使用状态变量<code>state</code>表示当前状态。</li><li><code>switch</code>控制状态转移。</li></ul><h3 id="3-6-🚀-示例1：模拟扫雷游戏"><a href="#3-6-🚀-示例1：模拟扫雷游戏" class="headerlink" title="3.6 🚀 示例1：模拟扫雷游戏"></a>3.6 🚀 示例1：模拟扫雷游戏</h3><p><strong>题目描述：</strong> 给定一个二维字符网格表示扫雷游戏，<code>M</code>表示地雷，空格表示未标记的区域。要求更新每个空格为周围地雷的数量。<br><strong>思路解析：</strong></p><ul><li>遍历每个网格。</li><li>如果当前位置是空格，则统计周围8个方向的地雷数量。</li><li>将地雷数量更新到当前位置。<br><strong>示例代码：</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 方向数组，表示8个方向</span><span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">updateBoard</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> rows <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cols <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mines <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ni <span class="token operator">=</span> i <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nj <span class="token operator">=</span> j <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ni <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ni <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> nj <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nj <span class="token operator">&lt;</span> cols <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>ni<span class="token punctuation">]</span><span class="token punctuation">[</span>nj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mines<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mines <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mines <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 打印棋盘</span><span class="token keyword">void</span> <span class="token function">printBoard</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> row <span class="token operator">:</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> cell <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> cell <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span> board <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Original Board:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">printBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nUpdated Board:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">printBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><strong>核心知识点：</strong></li><li>二维数组遍历：使用双重循环遍历每个格子。</li><li>方向数组：用<code>dx</code>和<code>dy</code>数组表示8个方向的偏移。</li><li>边界检查：确保不会越界访问。</li><li>字符和数字转换：<code>mines + '0'</code>将数字转为字符。</li></ul><h3 id="模拟贪吃蛇游戏"><a href="#模拟贪吃蛇游戏" class="headerlink" title="模拟贪吃蛇游戏"></a>模拟贪吃蛇游戏</h3><p><strong>题目描述：</strong> 在一个二维网格中，蛇可以向上下左右移动，吃到食物后身体会变长，撞到墙或自己身体则游戏结束。<br><strong>核心思路：</strong></p><ul><li>使用<code>deque</code>保存蛇的身体坐标。</li><li>根据方向移动蛇头。</li><li>判断是否撞墙或撞自己。</li><li>判断是否吃到食物，决定是否增长身体。<br><strong>示例代码：</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 贪吃蛇游戏类</span><span class="token keyword">class</span> <span class="token class-name">SnakeGame</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>  <span class="token comment">// 游戏区域大小</span>    <span class="token keyword">int</span> foodIndex<span class="token punctuation">;</span>      <span class="token comment">// 当前食物索引</span>    deque<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> snake<span class="token punctuation">;</span>  <span class="token comment">// 蛇的身体</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> food<span class="token punctuation">;</span>  <span class="token comment">// 食物位置</span>    set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> snakeSet<span class="token punctuation">;</span> <span class="token comment">// 判断蛇的身体是否重叠</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">// 构造函数，初始化游戏</span>    <span class="token function">SnakeGame</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> food<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">width</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">food</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">foodIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        snake<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 蛇头初始位置</span>        snakeSet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 移动函数</span>    string <span class="token function">move</span><span class="token punctuation">(</span>string direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> head <span class="token operator">=</span> snake<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取蛇头位置</span>        <span class="token comment">// 根据方向移动蛇头</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">"U"</span><span class="token punctuation">)</span> head<span class="token punctuation">.</span>first<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">"D"</span><span class="token punctuation">)</span> head<span class="token punctuation">.</span>first<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">"L"</span><span class="token punctuation">)</span> head<span class="token punctuation">.</span>second<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> head<span class="token punctuation">.</span>second<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 检查是否撞墙</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>first <span class="token operator">&gt;=</span> height <span class="token operator">||</span> head<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>second <span class="token operator">&gt;=</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Game Over"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 检查是否撞到自己</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>snakeSet<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> head <span class="token operator">!=</span> snake<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Game Over"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 移动蛇头</span>        snake<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        snakeSet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查是否吃到食物</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>foodIndex <span class="token operator">&lt;</span> food<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> head <span class="token operator">==</span> food<span class="token punctuation">[</span>foodIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            foodIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 没有吃到食物，蛇尾需要移除</span>            snakeSet<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>snake<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            snake<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 打印游戏状态</span>    <span class="token keyword">void</span> <span class="token function">printBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span> <span class="token function">board</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化空棋盘</span>        <span class="token comment">// 绘制食物</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> foodIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> food<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            board<span class="token punctuation">[</span>food<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>food<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 绘制蛇</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> segment <span class="token operator">:</span> snake<span class="token punctuation">)</span> <span class="token punctuation">{</span>            board<span class="token punctuation">[</span>segment<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>segment<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'S'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 绘制蛇头</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>snake<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            board<span class="token punctuation">[</span>snake<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>snake<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'H'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 输出棋盘</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> row <span class="token operator">:</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> cell <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> cell <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 游戏主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 扩大游戏区域为 20x20，并放置食物</span>    SnakeGame <span class="token function">game</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 蛇的移动指令（可以根据需要自定义更多指令）</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> moves <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span>         <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"U"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> direction <span class="token operator">:</span> moves<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清屏 (Windows 下使用 system("cls"))</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Direction: "</span> <span class="token operator">&lt;&lt;</span> direction <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        string status <span class="token operator">=</span> game<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">printBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">"Game Over"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Game Over!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 暂停0.5秒，方便观看</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><strong>🎯 代码说明</strong></li><li><strong>类结构</strong><ul><li><code>SnakeGame</code>：主类，包含蛇的状态、移动逻辑、可视化方法。</li><li><code>move</code>：处理蛇的移动、食物的判断、游戏结束条件。</li><li><code>printBoard</code>：打印当前游戏网格，显示蛇、食物和空格。</li></ul></li><li><strong>游戏逻辑</strong><ul><li>蛇头按照指定方向移动。</li><li>撞到墙或撞到自己，游戏结束。</li><li>吃到食物，蛇身体增加。</li></ul></li><li><strong>界面可视化</strong><ul><li>使用二维数组模拟网格。<ul><li><code>'H'</code>：蛇头。</li><li><code>'S'</code>：蛇身体。</li><li><code>'F'</code>：食物。</li><li><code>'.'</code>：空格。</li></ul></li></ul></li><li><strong>延时显示</strong><ul><li>使用 <code>this_thread::sleep_for</code> 延迟1秒，便于观看。</li><li><code>system("clear")</code> 清屏，保证每一步的状态清晰可见。</li></ul></li></ul><h2 id="🚀-4-总结"><a href="#🚀-4-总结" class="headerlink" title="🚀 4. 总结"></a>🚀 4. 总结</h2><ul><li>明确问题逻辑，逐步模拟操作。</li><li>选择合适的数据结构，如数组、队列、字符串等。</li><li>注意边界条件 和异常情况处理。</li><li>合理使用循环和递归，避免死循环或栈溢出。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中排序和复杂度</title>
      <link href="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6.html"/>
      <url>/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-中排序算法详解"><a href="#C-中排序算法详解" class="headerlink" title="C++ 中排序算法详解"></a>C++ 中排序算法详解</h1><p>排序算法是计算机科学中的基础内容之一，用于按特定顺序排列元素。C++ 提供了多种排序算法，常见的排序方法包括<strong>快速排序</strong>、<strong>插入排序</strong>和<strong>希尔排序</strong>。本文将详细讲解这些排序算法的概念、实现及其时间复杂度分析。</p><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/time_complexity_trend.jpg" class="" title="示意图 width=400"><span id="more"></span><h2 id="1-快速排序-Quick-Sort"><a href="#1-快速排序-Quick-Sort" class="headerlink" title="1. 快速排序 (Quick Sort)"></a>1. 快速排序 (Quick Sort)</h2><h3 id="快速排序概述"><a href="#快速排序概述" class="headerlink" title="快速排序概述"></a>快速排序概述</h3><p>快速排序是一种分治法（Divide and Conquer）排序算法。它通过选择一个基准元素（pivot），将待排序元素分为两部分，一部分比基准小，另一部分比基准大，然后递归地对这两部分进行排序。</p><h3 id="快速排序的步骤："><a href="#快速排序的步骤：" class="headerlink" title="快速排序的步骤："></a>快速排序的步骤：</h3><ol><li>选择一个基准元素。</li><li>将数组分成两部分：一部分包含所有小于基准的元素，另一部分包含所有大于基准的元素。</li><li>对这两部分分别进行快速排序。</li><li>最终合并所有的部分，得到有序数组。</li></ol><h3 id="快速排序的时间复杂度："><a href="#快速排序的时间复杂度：" class="headerlink" title="快速排序的时间复杂度："></a>快速排序的时间复杂度：</h3><ul><li><strong>最佳时间复杂度</strong>：<code>O(n log n)</code>，当每次分割都接近均匀时。</li><li><strong>平均时间复杂度</strong>：<code>O(n log n)</code>，大部分情况下。</li><li><strong>最差时间复杂度</strong>：<code>O(n^2)</code>，当每次选择的基准元素都是最大或最小元素时。</li></ul><h3 id="快速排序代码示例："><a href="#快速排序代码示例：" class="headerlink" title="快速排序代码示例："></a>快速排序代码示例：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 快速排序的分区函数</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 选择最后一个元素作为基准</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// i是小于pivot元素的区域的分隔点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将小于pivot的元素交换到前面</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将pivot放到正确的位置</span>    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 返回pivot的索引</span><span class="token punctuation">}</span><span class="token comment">// 快速排序的递归函数</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 找到基准元素的位置</span>        <span class="token keyword">int</span> pi <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 递归排序基准左边和右边的部分</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的数组："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ul><li><code>partition()</code>：用于将数组划分为两部分，并返回基准元素的最终位置。</li><li><code>quickSort()</code>：递归地调用<code>partition()</code>，并对划分后的两部分分别进行排序。</li><li>最终，数组将被排成有序序列。</li></ul><hr><h2 id="2-插入排序-Insertion-Sort"><a href="#2-插入排序-Insertion-Sort" class="headerlink" title="2. 插入排序 (Insertion Sort)"></a>2. 插入排序 (Insertion Sort)</h2><h3 id="插入排序概述"><a href="#插入排序概述" class="headerlink" title="插入排序概述"></a>插入排序概述</h3><p>插入排序是一种简单的排序算法，它的工作原理是将每个元素插入到已经排序的部分中。适用于小规模数据的排序，时间复杂度较低。</p><h3 id="插入排序的步骤："><a href="#插入排序的步骤：" class="headerlink" title="插入排序的步骤："></a>插入排序的步骤：</h3><ol><li>从第二个元素开始，假设第一个元素已经是排好序的。</li><li>将当前元素与前面的元素进行比较，找到合适的位置插入。</li><li>每次插入一个元素，直到所有元素都排序完成。</li></ol><h3 id="插入排序的时间复杂度："><a href="#插入排序的时间复杂度：" class="headerlink" title="插入排序的时间复杂度："></a>插入排序的时间复杂度：</h3><ul><li><strong>最佳时间复杂度</strong>：<code>O(n)</code>，当数组已经排好序时。</li><li><strong>最差时间复杂度</strong>：<code>O(n^2)</code>，当数组完全反向时。</li><li><strong>平均时间复杂度</strong>：<code>O(n^2)</code>，常见情况。</li></ul><h3 id="插入排序代码示例："><a href="#插入排序代码示例：" class="headerlink" title="插入排序代码示例："></a>插入排序代码示例：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 插入排序函数</span><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前要插入的元素</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 将所有比key大的元素向右移动</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 插入key到正确位置</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的数组："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解释：-1"><a href="#解释：-1" class="headerlink" title="解释："></a>解释：</h3><ul><li>每次将数组中的一个元素插入到已经排序的部分。</li><li><code>while</code>循环用于移动比当前元素大的元素，找到合适的位置。</li></ul><hr><h2 id="3-希尔排序-Shell-Sort"><a href="#3-希尔排序-Shell-Sort" class="headerlink" title="3. 希尔排序 (Shell Sort)"></a>3. 希尔排序 (Shell Sort)</h2><h3 id="希尔排序概述"><a href="#希尔排序概述" class="headerlink" title="希尔排序概述"></a>希尔排序概述</h3><p>希尔排序是一种基于插入排序的改进算法，它通过将数组分成若干子序列来减少逆序的元素，使得插入排序在后续执行时更加高效。</p><h3 id="希尔排序的步骤："><a href="#希尔排序的步骤：" class="headerlink" title="希尔排序的步骤："></a>希尔排序的步骤：</h3><ol><li>选择一个增量（gap），将数组分成多个子序列，每个子序列使用插入排序进行排序。</li><li>减小增量，继续对较小的子序列进行排序。</li><li>直到增量为1时，对整个数组执行一次插入排序。</li></ol><h3 id="希尔排序的时间复杂度："><a href="#希尔排序的时间复杂度：" class="headerlink" title="希尔排序的时间复杂度："></a>希尔排序的时间复杂度：</h3><ul><li><strong>最差时间复杂度</strong>：<code>O(n^2)</code>，当增量序列选择不当时。</li><li><strong>最佳时间复杂度</strong>：<code>O(n log n)</code>，随着增量序列的优化，能获得更好的性能。</li></ul><h3 id="希尔排序代码示例："><a href="#希尔排序代码示例：" class="headerlink" title="希尔排序代码示例："></a>希尔排序代码示例：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 希尔排序函数</span><span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始增量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用当前gap对数组进行插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                        <span class="token comment">// 按照gap间隔进行插入排序</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的数组："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解释：-2"><a href="#解释：-2" class="headerlink" title="解释："></a>解释：</h3><ul><li><code>gap</code>用于控制子序列的间隔，逐步减小增量，最终为1时进行常规插入排序。</li><li>希尔排序通过逐步减少间隔来加速排序过程，避免了大量的逆序元素。</li></ul><hr><h2 id="时间复杂度概念与分析"><a href="#时间复杂度概念与分析" class="headerlink" title="时间复杂度概念与分析"></a>时间复杂度概念与分析</h2><h3 id="时间复杂度-Time-Complexity"><a href="#时间复杂度-Time-Complexity" class="headerlink" title="时间复杂度 (Time Complexity)"></a>时间复杂度 (Time Complexity)</h3><p>时间复杂度用于描述算法执行所需时间随输入规模（n）变化的关系。常见的时间复杂度包括：</p><ul><li>**O(1)**：常数时间，无论输入规模如何，执行时间都相同。</li><li>**O(log n)**：对数时间，增长较慢，常见于二分查找等算法。</li><li>**O(n)**：线性时间，执行时间与输入规模成正比。</li><li>**O(n log n)**：对数线性时间，常见于高效排序算法，如快速排序、归并排序等。</li><li>**O(n^2)**：平方时间，常见于简单的排序算法，如插入排序、冒泡排序等。</li><li>**O(2^n)**：指数时间，增长非常快，常见于暴力搜索算法。</li><li>**O(n!)**：阶乘时间，通常出现在全排列问题中。</li></ul><h3 id="时间复杂度示例："><a href="#时间复杂度示例：" class="headerlink" title="时间复杂度示例："></a>时间复杂度示例：</h3><ul><li>**O(1)**：访问数组的某个元素。</li><li>**O(n)**：遍历数组，进行一次线性扫描。</li><li>**O(n^2)**：嵌套的两层循环，如冒泡排序。</li><li>**O(n log n)**：分治法排序算法，如快速排序、归并排序。</li></ul><h3 id="时间复杂度示例代码（遍历数组与双重循环）："><a href="#时间复杂度示例代码（遍历数组与双重循环）：" class="headerlink" title="时间复杂度示例代码（遍历数组与双重循环）："></a>时间复杂度示例代码（遍历数组与双重循环）：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// O(n) 示例：遍历数组</span><span class="token keyword">void</span> <span class="token function">linearExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// O(n^2) 示例：双重循环</span><span class="token keyword">void</span> <span class="token function">quadraticExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">linearExample</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// O(n)</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">quadraticExample</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// O(n^2)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空间复杂度："><a href="#空间复杂度：" class="headerlink" title="空间复杂度："></a>空间复杂度：</h3><p>空间复杂度表示算法运行过程中所需要的额外空间。常见的空间复杂度有：</p><ul><li>**O(1)**：常数空间，算法运行时不需要额外的存储空间。</li><li>**O(n)**：线性空间，算法需要存储与输入规模成正比的数据。</li></ul><p>例如，快速排序的空间复杂度是 O(log n)，因为它的递归栈空间与输入规模的对数成正比。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>快速排序</strong>：采用分治法，通过递归将数组分成小部分进行排序。平均时间复杂度为 <code>O(n log n)</code>，最坏情况下为 <code>O(n^2)</code>。</li><li><strong>插入排序</strong>：通过将元素插入到已排序的部分，适用于小规模数据。时间复杂度为 <code>O(n^2)</code>。</li><li><strong>希尔排序</strong>：通过逐步缩小增量，使插入排序更高效。时间复杂度取决于增量序列的选择。</li></ul><p>时间复杂度分析帮助我们了解算法在不同输入规模下的表现，选择合适的排序算法可以显著提高程序的性能。</p><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/Onlogn_linear_log_time.jpg" class="" title="示意图 width=400"><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/On2_quadratic_time.jpg" class="" title="示意图 width=400"><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/O2n_exponential_time.jpg" class="" title="示意图 width=400"><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/O1_constant_time.jpg" class="" title="示意图 width=400"><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/Ologn_logarithmic_time.jpg" class="" title="示意图 width=400"><img src="/C-%E4%B8%AD%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%8D%E6%9D%82%E5%BA%A6/On_linear_time.jpg" class="" title="示意图 width=400">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的顺序搜索</title>
      <link href="/C-%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2.html"/>
      <url>/C-%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2.html</url>
      
        <content type="html"><![CDATA[<p>顺序查找，也称为线性查找，是一种最基本的查找技术，用于在数据结构（如数组或列表）中搜索特定的值。</p><span id="more"></span><h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><ol><li><p><strong>基本思想</strong>：顺序查找从数据结构的一端开始，逐个检查每个元素，直到找到所需的值或到达数据结构的末尾。</p></li><li><p><strong>适用场景</strong>：顺序查找适用于无序数据结构，或者数据量较小时的查找操作。</p></li><li><p><strong>时间复杂度</strong>：顺序查找的时间复杂度为O(n)，其中n是数据结构中元素的数量。在最坏的情况下，可能需要检查所有元素。</p></li><li><p><strong>实现方式</strong>：顺序查找可以通过循环结构（如for循环或while循环）来实现。</p></li><li><p><strong>返回值</strong>：如果找到目标值，返回其在数据结构中的位置（索引）；如果未找到，通常返回-1或其他特定的值表示查找失败。</p></li></ol><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><p>下面是一个使用顺序查找算法在C++数组中查找特定值的代码示例，以及详细的注释：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token comment">// 顺序查找函数，参数为整数向量、目标值</span><span class="token keyword">int</span> <span class="token function">sequentialSearch</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历数组中的每个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果当前元素等于目标值</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// 返回当前元素的索引</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 如果遍历结束仍未找到目标值，返回-1</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 待查找的数组</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 要查找的目标值</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">sequentialSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用顺序查找函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果找到了目标值</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Element found at index "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果没有找到目标值</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Element not found in the array"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释解释："><a href="#注释解释：" class="headerlink" title="注释解释："></a>注释解释：</h3><ul><li><code>#include &lt;iostream&gt;</code> 和 <code>#include &lt;vector&gt;</code>：引入标准输入输出流和向量容器的头文件。</li><li><code>sequentialSearch</code> 函数：定义了一个顺序查找的函数，接受一个整数向量和一个目标值作为参数。</li><li><code>for</code> 循环：遍历数组中的每个元素，从索引0开始，直到数组的末尾。</li><li><code>if</code> 语句：检查当前元素是否等于目标值。</li><li><code>return i</code>：如果找到目标值，返回其在数组中的索引。</li><li><code>return -1</code>：如果遍历结束仍未找到目标值，返回-1表示查找失败。</li><li><code>main</code> 函数：定义了一个待查找的数组和一个目标值，调用 <code>sequentialSearch</code> 函数，并根据返回结果输出相应的信息。</li></ul><p>希望这个详细的讲解和代码示例能帮助孩子们理解顺序查找算法的工作原理和实现方式。</p><h3 id="历年真题"><a href="#历年真题" class="headerlink" title="历年真题"></a>历年真题</h3><h3 id="1-CSP-J2019-第一题"><a href="#1-CSP-J2019-第一题" class="headerlink" title="1. CSP-J2019 第一题"></a>1. CSP-J2019 第一题</h3><p><strong>题目描述</strong>：<br>题目要求计算所圈的矩阵和其他已有矩阵的交集面积。交集面积的右边界是两个相交矩阵的最右边的边界，即<code>min(a, points[i][2])</code>，左边界是两个相交矩阵的最左边的边界，即<code>max(0, points[i][0])</code>。上下边也是一样的道理。通过判断<code>x</code>和<code>y</code>是否大于零，可以判断出矩阵是否交叉，若存在则<code>sum += x * y</code>。</p><p><strong>解题思路</strong>：</p><ul><li>使用顺序查找（线性查找）来遍历所有矩阵的点。</li><li>对于每个点，计算交集的边界，然后计算交集面积。</li></ul><p><strong>代码示例</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment">// 矩阵的数量</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> points<span class="token punctuation">;</span> <span class="token comment">// 存储矩阵的左右边界或上下边界</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 存储总的交集面积</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span> <span class="token comment">// 读取矩阵的左右边界和上下边界</span>        points<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储左边界</span>        points<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>c<span class="token punctuation">,</span> d<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储右边界</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> points<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对点进行排序</span>    <span class="token comment">// 遍历所有点，计算交集面积</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// 计算交集的宽度</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">-</span> points<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token comment">// 计算交集的高度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果交集存在</span>            sum <span class="token operator">+=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token comment">// 累加交集面积</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出总的交集面积</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是CSP-J2019普及组初赛中的一道题目，涉及到顺序查找算法的应用。通过线性遍历所有矩阵的边界点，计算出所有矩阵的交集面积。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的二分搜索</title>
      <link href="/C-%E4%B8%AD%E7%9A%84%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2.html"/>
      <url>/C-%E4%B8%AD%E7%9A%84%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2.html</url>
      
        <content type="html"><![CDATA[<p>二分查找是一种在有序数组中查找特定元素的高效算法。它的基本思想是将数组分成两半，然后根据目标值与中间元素的大小关系来决定是继续在左半部分还是右半部分进行查找，这个过程会不断重复，直到找到目标值或者搜索范围为空。</p><span id="more"></span><h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><ol><li><p><strong>有序数组</strong>：二分查找算法的前提是数组必须是有序的，即元素是按照升序或降序排列的。</p></li><li><p><strong>查找过程</strong>：算法会取数组的中间元素与目标值进行比较，如果相等，则查找成功；如果目标值小于中间元素，则在左半部分继续查找；如果目标值大于中间元素，则在右半部分继续查找。</p></li><li><p><strong>递归与迭代</strong>：二分查找可以用递归或迭代的方式来实现。</p></li><li><p><strong>时间复杂度</strong>：二分查找的时间复杂度是O(log n)，其中n是数组中元素的数量。这是因为每次比较都会将搜索范围缩小一半。</p></li><li><p><strong>边界条件</strong>：在实现二分查找时，需要特别注意边界条件，比如数组为空、目标值在数组的两端等情况。</p></li></ol><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><p>下面是一个使用迭代方式实现的二分查找算法的C++代码示例，以及详细的注释：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 二分查找的非递归实现</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 二分查找函数：在有序数组中查找 target，找到返回索引，找不到返回 -1</span><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment">// 左边界初始化为 0</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 右边界初始化为数组的最后一个索引</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 计算中间索引，使用 (low + high) / 2 可能会溢出，因此用 low + (high - low) / 2</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// 检查是否找到目标值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">// 返回目标值所在的索引</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目标值在左侧，更新右边界</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目标值在右侧，更新左边界</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 如果未找到，返回 -1</span><span class="token punctuation">}</span><span class="token comment">// 主函数，测试二分查找</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 有序数组</span>    <span class="token keyword">int</span> target<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要查找的数字: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> target<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到目标值 "</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> <span class="token string">"，索引为: "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到目标值 "</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 二分查找的递归实现</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 递归二分查找函数</span><span class="token keyword">int</span> <span class="token function">binarySearchRecursive</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 基准情况：搜索范围为空，返回 -1</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">// 找到目标值，返回索引</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">binarySearchRecursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标值在左侧</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">binarySearchRecursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标值在右侧</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 主函数，测试递归二分查找</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 有序数组</span>    <span class="token keyword">int</span> target<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要查找的数字: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> target<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">binarySearchRecursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到目标值 "</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> <span class="token string">"，索引为: "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到目标值 "</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释解释："><a href="#注释解释：" class="headerlink" title="注释解释："></a>注释解释：</h3><ul><li><code>#include &lt;iostream&gt;</code> 和 <code>#include &lt;vector&gt;</code>：引入标准输入输出流和向量容器的头文件。</li><li><code>binarySearch</code> 函数：定义了一个二分查找的函数，接受一个整数向量、目标值和数组大小作为参数。</li><li><code>left</code> 和 <code>right</code> 变量：分别代表搜索范围的左边界和右边界。</li><li><code>while</code> 循环：只要左边界不大于右边界，就继续查找。</li><li><code>mid</code> 变量：计算中间位置的索引，使用 <code>(left + right) / 2</code> 可能会造成整数溢出，因此使用 <code>left + (right - left) / 2</code>。</li><li><code>if-else if-else</code> 语句：根据中间元素与目标值的比较结果，调整搜索范围。</li><li><code>main</code> 函数：定义了一个有序数组、目标值和数组大小，调用 <code>binarySearch</code> 函数，并根据返回结果输出相应的信息。</li></ul><p>希望这个详细的讲解和代码示例能帮助孩子们理解二分查找算法的工作原理和实现方式。</p><p>二分查找的基本原理和实现步骤如下：</p><h3 id="基本原理："><a href="#基本原理：" class="headerlink" title="基本原理："></a>基本原理：</h3><ol><li><p><strong>有序性</strong>：二分查找算法只能在有序数组中进行，因为只有有序数组才能保证通过比较中间元素来缩小搜索范围。</p></li><li><p><strong>中间元素</strong>：算法通过比较目标值与数组中间元素的大小，来决定是继续在数组的左半部分还是右半部分进行查找。</p></li><li><p><strong>缩小范围</strong>：每次比较后，算法都会将搜索范围缩小一半，这是二分查找效率的关键。</p></li><li><p><strong>递归或迭代</strong>：二分查找可以通过递归或迭代的方式来实现。</p></li></ol><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><h4 id="迭代实现步骤："><a href="#迭代实现步骤：" class="headerlink" title="迭代实现步骤："></a>迭代实现步骤：</h4><ol><li><p><strong>初始化</strong>：设置两个指针，一个指向数组的开始（<code>left</code>），另一个指向数组的结束（<code>right</code>）。</p></li><li><p><strong>循环条件</strong>：当<code>left</code>小于或等于<code>right</code>时，继续循环。</p></li><li><p><strong>计算中间索引</strong>：计算中间索引<code>mid</code>，通常使用<code>mid = left + (right - left) / 2</code>来避免整数溢出。</p></li><li><p><strong>比较中间元素</strong>：将数组中间位置的元素与目标值进行比较。</p></li><li><p><strong>调整搜索范围</strong>：</p><ul><li>如果中间元素等于目标值，查找成功，返回中间索引。</li><li>如果目标值小于中间元素，将<code>right</code>更新为<code>mid - 1</code>，因为目标值必定在左半部分。</li><li>如果目标值大于中间元素，将<code>left</code>更新为<code>mid + 1</code>，因为目标值必定在右半部分。</li></ul></li><li><p><strong>循环结束</strong>：如果循环结束还没有找到目标值，返回一个特定的值（通常是-1），表示目标值不在数组中。</p></li></ol><h4 id="递归实现步骤："><a href="#递归实现步骤：" class="headerlink" title="递归实现步骤："></a>递归实现步骤：</h4><ol><li><p><strong>基本情况</strong>：如果数组的长度为0，或者<code>left</code>大于<code>right</code>，则返回-1，表示没有找到。</p></li><li><p><strong>计算中间索引</strong>：与迭代方法相同，计算中间索引<code>mid</code>。</p></li><li><p><strong>比较中间元素</strong>：与迭代方法相同，比较中间元素与目标值。</p></li><li><p><strong>递归调用</strong>：</p><ul><li>如果中间元素等于目标值，返回中间索引。</li><li>如果目标值小于中间元素，递归调用左半部分（<code>left</code>到<code>mid - 1</code>）。</li><li>如果目标值大于中间元素，递归调用右半部分（<code>mid + 1</code>到<code>right</code>）。</li></ul></li><li><p><strong>返回结果</strong>：递归调用会返回目标值的索引或者-1。</p></li></ol><p>二分查找的效率之所以高，是因为它每次操作都能将搜索空间减半，因此其时间复杂度为O(log n)，这使得它在处理大数据集时非常有效。</p><p>二分查找和线性查找在效率上有显著的差异，主要体现在它们的时间复杂度上：</p><h2 id="二分查找和线性查找相比"><a href="#二分查找和线性查找相比" class="headerlink" title="二分查找和线性查找相比"></a>二分查找和线性查找相比</h2><h3 id="线性查找（Linear-Search）："><a href="#线性查找（Linear-Search）：" class="headerlink" title="线性查找（Linear Search）："></a>线性查找（Linear Search）：</h3><ul><li><strong>时间复杂度</strong>：O(n)，其中n是数组中元素的数量。</li><li><strong>工作原理</strong>：从数组的第一个元素开始，逐个检查每个元素，直到找到目标值或检查完所有元素。</li><li><strong>效率</strong>：在最坏的情况下，如果目标值位于数组的末尾或根本不存在，线性查找需要检查所有元素，因此需要n次比较。</li><li><strong>适用场景</strong>：适用于小型数据集或无序数组，因为对于小规模数据，其简单性和实现的便捷性可能超过二分查找的优势。</li></ul><h3 id="二分查找（Binary-Search）："><a href="#二分查找（Binary-Search）：" class="headerlink" title="二分查找（Binary Search）："></a>二分查找（Binary Search）：</h3><ul><li><strong>时间复杂度</strong>：O(log n)，其中n是数组中元素的数量。</li><li><strong>工作原理</strong>：在有序数组中，通过比较中间元素与目标值，每次比较后将搜索范围缩小一半。</li><li><strong>效率</strong>：在最坏的情况下，二分查找需要进行log₂n次比较，这里的“log”是以2为底的对数。这意味着即使对于较大的数据集，所需的比较次数也远远少于线性查找。</li><li><strong>适用场景</strong>：适用于大型且已排序的数据集，因为对于大规模数据，二分查找的效率优势非常明显。</li></ul><h3 id="效率对比："><a href="#效率对比：" class="headerlink" title="效率对比："></a>效率对比：</h3><ul><li><strong>大规模数据集</strong>：对于大规模数据集，二分查找的效率远高于线性查找。例如，在一个包含1000个元素的数组中，二分查找最多需要10次比较（log₂1000 ≈ 10），而线性查找在最坏情况下需要1000次比较。</li><li><strong>小规模数据集</strong>：对于小规模数据集，线性查找可能更快，因为它避免了二分查找中计算中间索引的开销，尤其是当数组非常小的时候。</li></ul><p>总结来说，二分查找在处理大型有序数据集时效率更高，而线性查找在处理小型数据集或无序数据集时可能更简单、更直接。选择哪种查找方法取决于具体的应用场景和数据特点。</p><h3 id="二分查找在以下情况下更有优势"><a href="#二分查找在以下情况下更有优势" class="headerlink" title="二分查找在以下情况下更有优势"></a>二分查找在以下情况下更有优势</h3><ol><li><p><strong>有序数据集</strong>：二分查找算法要求数据集必须是有序的，无论是升序还是降序。如果数据集是无序的，那么二分查找无法应用，或者需要先对数据进行排序，这会增加额外的时间成本。</p></li><li><p><strong>大数据集</strong>：对于包含大量元素的数据集，二分查找的优势尤为明显。由于其时间复杂度为O(log n)，随着数据集规模的增加，二分查找相比于线性查找的效率优势更加显著。</p></li><li><p><strong>重复查找操作</strong>：如果需要在同一个有序数组中进行多次查找操作，二分查找更加高效。因为一旦数组被排序，后续的查找操作可以重复利用这个有序结构，而不需要每次都从头开始。</p></li><li><p><strong>内存限制</strong>：在内存受限的情况下，二分查找可以减少比较次数，从而减少内存访问，提高效率。</p></li><li><p><strong>实时系统</strong>：在需要快速响应的实时系统中，二分查找可以提供更快的查找速度，因为它避免了线性查找中可能的大量元素比较。</p></li><li><p><strong>优化存储访问</strong>：在数据库和文件系统中，存储访问往往是性能瓶颈。二分查找可以减少存储访问次数，因此在这些场景下更有优势。</p></li><li><p><strong>算法竞赛和面试</strong>：在算法竞赛和编程面试中，二分查找是一个常用的技术，因为它可以解决一类特定的问题，并且具有很好的理论时间复杂度。</p></li><li><p><strong>数学和逻辑问题</strong>：在解决一些需要快速定位和比较的问题时，如查找最大值、最小值或者某个特定值的范围时，二分查找可以提供清晰的逻辑框架。</p></li></ol><p>总的来说，二分查找在数据量大、查找操作频繁、对性能要求高的场景下更有优势。然而，它也有一定的局限性，比如需要数据预先排序，以及不适用于无序数据集。在实际应用中，需要根据具体情况选择最合适的查找算法。</p><h3 id="历年真题"><a href="#历年真题" class="headerlink" title="历年真题"></a>历年真题</h3><p>根据搜索结果，以下是NOIP和CSP竞赛中涉及到二分查找算法的题目及详细解答：</p><h3 id="1-CSP-J-2021-矩形计数"><a href="#1-CSP-J-2021-矩形计数" class="headerlink" title="1. CSP-J 2021 矩形计数"></a>1. CSP-J 2021 矩形计数</h3><p><strong>题目描述</strong>：<br>平面上有n个关键点，求有多少个四条边都和x轴或者y轴平行的矩形，满足四个顶点都是关键点。给出的关键点可能有重复，但完全重合的矩形只计一次。</p><p><strong>解题思路</strong>：</p><ul><li>首先对关键点按照x和y坐标进行排序。</li><li>去重，确保每个点只被计算一次。</li><li>枚举两个点作为矩形的两个对角，然后通过二分查找确定另外两个点是否存在。</li></ul><p><strong>代码实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">{</span><span class="token comment">//结构体</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">point</span> a<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">point</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//比较结构体内变量x y是否相等</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">==</span>b<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>y<span class="token operator">==</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">point</span> a<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">point</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//排序sort使用 选择都是判断a&lt;b 从小到大排序</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">!=</span>b<span class="token punctuation">.</span>x<span class="token operator">?</span>a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token operator">:</span>a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">point</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按照排序规则 A[j]&lt;a[j-1] 交换 说明可以从小到大排序</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">struct</span> <span class="token class-name">point</span> t<span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                A<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">point</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//去重</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">equals</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            A<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">point</span> points<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x1<span class="token operator">=</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> y1<span class="token operator">=</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">int</span> x2<span class="token operator">=</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> y2<span class="token operator">=</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">int</span> x3<span class="token operator">=</span>x1<span class="token punctuation">,</span> y3<span class="token operator">=</span>y2<span class="token punctuation">;</span>            <span class="token keyword">int</span> x4<span class="token operator">=</span>x2<span class="token punctuation">,</span> y4<span class="token operator">=</span>y1<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x3<span class="token operator">==</span>x4 <span class="token operator">||</span> y3<span class="token operator">==</span>y4<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> points<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x3<span class="token punctuation">,</span>y3<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span> points<span class="token punctuation">;</span>            <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> points<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x4<span class="token punctuation">,</span>y4<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span> points<span class="token punctuation">;</span>            cnt<span class="token operator">+=</span>a<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> b<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">equals</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-P1314-NOIP2011-提高组-聪明的质监员"><a href="#2-P1314-NOIP2011-提高组-聪明的质监员" class="headerlink" title="2. P1314 [NOIP2011 提高组] 聪明的质监员"></a>2. P1314 [NOIP2011 提高组] 聪明的质监员</h3><p><strong>题目描述</strong>：<br>给定一系列矿石，每个矿石有重量和价值，以及一个总价值s。需要确定一个阈值W，使得大于W的矿石的总价值之和不超过s。</p><p><strong>解题思路</strong>：</p><ul><li>使用二分查找确定阈值W。</li><li>计算大于W的矿石的数量和价值之和。</li><li>如果总价值之和超过s，则需要增加W；如果小于等于s，则尝试减少W。</li></ul><p><strong>代码实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200010</span><span class="token punctuation">;</span>ll w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll L<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>R<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">;</span>ll pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>vpre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vpre<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> vpre<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            vpre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>vpre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            vpre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>vpre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        y<span class="token operator">+=</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token punctuation">[</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">(</span>vpre<span class="token punctuation">[</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>vpre<span class="token punctuation">[</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">&gt;=</span>s<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的函数递归调用</title>
      <link href="/C-%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8.html"/>
      <url>/C-%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-递归的基本概念"><a href="#1-递归的基本概念" class="headerlink" title="1. 递归的基本概念"></a>1. 递归的基本概念</h3><p><strong>递归（Recursion）</strong> 是指一个函数直接或间接调用自身的编程技术。递归是解决问题的一种常用方法，尤其在涉及分治法、树形结构、回溯等算法时，递归往往能简化问题的解决过程。</p><span id="more"></span><p>递归函数通常包含两个主要部分：</p><ol><li><strong>递归终止条件</strong>：也称为基准情形（Base Case），用于防止无限递归调用。</li><li><strong>递归步骤</strong>：函数在满足递归条件时调用自身，并缩小问题的规模。</li></ol><h3 id="2-递归函数的构成"><a href="#2-递归函数的构成" class="headerlink" title="2. 递归函数的构成"></a>2. 递归函数的构成</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 递归函数结构</span>返回类型 函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 终止条件处理</span>        <span class="token keyword">return</span> 特定值<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 递归调用自身</span>        <span class="token keyword">return</span> 函数名<span class="token punctuation">(</span>新的参数<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-递归的优缺点"><a href="#3-递归的优缺点" class="headerlink" title="3. 递归的优缺点"></a>3. 递归的优缺点</h3><p><strong>优点</strong>：</p><ul><li>代码简洁，易于理解。</li><li>适合处理树结构、分治算法等问题。</li></ul><p><strong>缺点</strong>：</p><ul><li>递归调用会占用栈内存，可能导致<strong>栈溢出</strong>。</li><li>递归效率较低，通常需要优化（如使用<strong>记忆化搜索</strong>、<strong>尾递归优化</strong>）。</li></ul><h3 id="4-递归函数的例子"><a href="#4-递归函数的例子" class="headerlink" title="4. 递归函数的例子"></a>4. 递归函数的例子</h3><h4 id="示例-1：计算阶乘"><a href="#示例-1：计算阶乘" class="headerlink" title="示例 1：计算阶乘"></a>示例 1：计算阶乘</h4><p><strong>问题</strong>：计算 n 的阶乘，定义为 <code>n! = n * (n-1) * (n-2) * ... * 1</code>，其中 <code>0! = 1</code>。</p><p><strong>递归公式</strong>：</p><ul><li><code>factorial(n) = n * factorial(n - 1)</code>，当 <code>n &gt; 0</code></li><li><code>factorial(0) = 1</code></li></ul><p><strong>代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 递归终止条件</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a number: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Factorial of "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong>：</p><ul><li>当 <code>n = 0</code> 时，直接返回 <code>1</code>。</li><li>对于 <code>n &gt; 0</code>，递归调用 <code>factorial(n - 1)</code> 直至 <code>n = 0</code>。</li><li>例如，<code>factorial(4)</code> 会调用 <code>factorial(3)</code>，依次调用直到 <code>factorial(0)</code>。</li></ul><p><strong>执行过程</strong>：</p><ul><li><code>factorial(4)</code> → <code>4 * factorial(3)</code></li><li><code>factorial(3)</code> → <code>3 * factorial(2)</code></li><li><code>factorial(2)</code> → <code>2 * factorial(1)</code></li><li><code>factorial(1)</code> → <code>1 * factorial(0)</code></li><li><code>factorial(0)</code> → <code>1</code></li><li>最终结果为：<code>4 * 3 * 2 * 1 = 24</code></li></ul><h4 id="示例-2：斐波那契数列"><a href="#示例-2：斐波那契数列" class="headerlink" title="示例 2：斐波那契数列"></a>示例 2：斐波那契数列</h4><p><strong>问题</strong>：计算斐波那契数列的第 n 项，定义为：</p><ul><li><code>fib(0) = 0</code></li><li><code>fib(1) = 1</code></li><li><code>fib(n) = fib(n - 1) + fib(n - 2)</code>，当 <code>n &gt; 1</code></li></ul><p><strong>代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the position: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Fibonacci number at position "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong>：</p><ul><li>使用递归公式 <code>fib(n) = fib(n - 1) + fib(n - 2)</code> 进行计算。</li><li>例如，<code>fib(5)</code> 需要计算 <code>fib(4)</code> 和 <code>fib(3)</code>，以此类推。</li></ul><p><strong>执行过程</strong>：</p><ul><li><code>fib(5)</code> → <code>fib(4) + fib(3)</code></li><li><code>fib(4)</code> → <code>fib(3) + fib(2)</code></li><li><code>fib(3)</code> → <code>fib(2) + fib(1)</code></li><li><code>fib(2)</code> → <code>fib(1) + fib(0)</code></li><li>最终结果为：<code>5</code></li></ul><p><strong>优化</strong>：</p><ul><li>该递归实现效率低，可以使用<strong>记忆化搜索</strong>或<strong>动态规划</strong>进行优化。</li></ul><h3 id="5-CSP-竞赛中常见的递归题目"><a href="#5-CSP-竞赛中常见的递归题目" class="headerlink" title="5. CSP 竞赛中常见的递归题目"></a>5. CSP 竞赛中常见的递归题目</h3><h4 id="题目：求组合数-C-n-k"><a href="#题目：求组合数-C-n-k" class="headerlink" title="题目：求组合数 C(n, k)"></a>题目：求组合数 C(n, k)</h4><p><strong>描述</strong>：</p><ul><li>给定两个整数 <code>n</code> 和 <code>k</code>，求组合数 <code>C(n, k)</code>。</li><li>组合数公式：<code>C(n, k) = C(n - 1, k - 1) + C(n - 1, k)</code>，且 <code>C(n, 0) = C(n, n) = 1</code>。</li></ul><p><strong>解法</strong>：</p><ul><li>使用递归公式进行计算。</li></ul><p><strong>代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">C</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter n and k: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C("</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> <span class="token string">") = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong>：</p><ul><li>当 <code>k == 0</code> 或 <code>k == n</code> 时，返回 <code>1</code>。</li><li>否则通过公式 <code>C(n, k) = C(n-1, k-1) + C(n-1, k)</code> 计算。</li></ul><p><strong>执行过程</strong>：</p><ul><li><code>C(5, 2)</code> → <code>C(4, 1) + C(4, 2)</code></li><li><code>C(4, 1)</code> → <code>C(3, 0) + C(3, 1)</code>，返回 <code>4</code></li><li><code>C(4, 2)</code> → <code>C(3, 1) + C(3, 2)</code>，返回 <code>6</code></li><li>最终结果为：<code>10</code></li></ul><h3 id="6-尾递归优化"><a href="#6-尾递归优化" class="headerlink" title="6. 尾递归优化"></a>6. 尾递归优化</h3><p>尾递归是指递归调用出现在函数的最后一步时的一种特殊递归形式，可以通过编译器优化为迭代，避免栈溢出。</p><p><strong>示例</strong>：计算阶乘的尾递归实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">factorialTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">factorialTail</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a number: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Factorial of "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">factorialTail</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong>：</p><ul><li><code>factorialTail(n, result)</code> 中，<code>result</code> 保存当前计算的结果。</li><li>递归调用出现在函数的最后一步，因此为尾递归。</li></ul><h3 id="7-常见-CSP-递归题目"><a href="#7-常见-CSP-递归题目" class="headerlink" title="7. 常见 CSP 递归题目"></a>7. 常见 CSP 递归题目</h3><h4 id="题目：汉诺塔问题"><a href="#题目：汉诺塔问题" class="headerlink" title="题目：汉诺塔问题"></a>题目：汉诺塔问题</h4><p><strong>描述</strong>：</p><ul><li>有三根柱子 <code>A</code>、<code>B</code>、<code>C</code>，将 <code>n</code> 个盘子从 <code>A</code> 移到 <code>C</code>，每次只能移动一个盘子且大盘子不能放在小盘子上。</li></ul><p><strong>代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> from<span class="token punctuation">,</span> <span class="token keyword">char</span> to<span class="token punctuation">,</span> <span class="token keyword">char</span> aux<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move disk 1 from "</span> <span class="token operator">&lt;&lt;</span> from <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> to <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move disk "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" from "</span> <span class="token operator">&lt;&lt;</span> from <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> to <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> aux<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter number of disks: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong>：</p><ul><li>分两步：将 <code>n-1</code> 个盘子从 <code>A</code> 移到 <code>B</code>，再将第 <code>n</code> 个盘子从 <code>A</code> 移到 <code>C</code>，最后将 <code>n-1</code> 个盘子从 <code>B</code> 移到 <code>C</code></li></ul><p>。</p><ul><li>复杂度为 <code>O(2^n)</code>。</li></ul><p><strong>输出</strong>：</p><ul><li>输入 <code>3</code> 时：<pre class="line-numbers language-none"><code class="language-none">Move disk 1 from A to CMove disk 2 from A to BMove disk 1 from C to BMove disk 3 from A to CMove disk 1 from B to AMove disk 2 from B to CMove disk 1 from A to C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h3><ul><li>递归是一种强大的编程思想，适用于处理复杂的分治、树形结构和动态规划问题。</li><li>使用递归时需要注意<strong>终止条件</strong>，防止无限递归导致栈溢出。</li><li>尾递归可以优化递归的空间复杂度，但并不是所有递归问题都适合转换为尾递归。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中如何理解枚举</title>
      <link href="/C-%E4%B8%AD%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%9E%9A%E4%B8%BE.html"/>
      <url>/C-%E4%B8%AD%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%9E%9A%E4%B8%BE.html</url>
      
        <content type="html"><![CDATA[<p>在C++中，枚举是一种常用的算法思想，用于有序地列举所有可能的情况或组合。在NOIP（全国青少年信息学奥林匹克竞赛）编程竞赛中，枚举是一项非常重要的技巧。本文将从枚举的基本概念、意义和应用场景展开，介绍几种典型的枚举方式，并结合示例进行讲解。</p><span id="more"></span><hr><h3 id="1-枚举的概念"><a href="#1-枚举的概念" class="headerlink" title="1. 枚举的概念"></a>1. 枚举的概念</h3><p>枚举（Enumeration）在算法中指的是逐一列举出问题的所有可能情况，并对每种情况进行验证或计算，从而找到符合条件的解。这种方法适用于解空间有限、计算量可控的问题。</p><p>在编程中，枚举可以理解为遍历一个集合中的所有元素或所有可能的组合。枚举法的核心思想是“穷举”——尝试所有可能性，以找到最优解或所有满足条件的解。</p><hr><h3 id="2-枚举的意义"><a href="#2-枚举的意义" class="headerlink" title="2. 枚举的意义"></a>2. 枚举的意义</h3><p>枚举在NOIP竞赛和算法问题中有很大意义，主要体现在以下几个方面：</p><ol><li><strong>直观</strong>：枚举方法比较简单直接，尤其是对于小规模数据的问题。</li><li><strong>覆盖全面</strong>：通过穷举，枚举方法确保了不会遗漏任何可能的解。</li><li><strong>适合暴力解法</strong>：对于规模不大的问题，枚举往往可以快速解决，有时候能避免复杂的优化算法。</li><li><strong>多种优化方式</strong>：枚举可与剪枝、递归、动态规划等方法结合，优化计算效率。</li></ol><hr><h3 id="3-枚举的应用场景"><a href="#3-枚举的应用场景" class="headerlink" title="3. 枚举的应用场景"></a>3. 枚举的应用场景</h3><p>枚举适用于以下几类问题：</p><ol><li><strong>有限空间的穷举问题</strong>：当问题解空间有限，可以尝试所有情况。例如，判断一个数是否为完美数、计算某范围内的质数等。</li><li><strong>组合和排列问题</strong>：对某些问题的所有组合或排列进行枚举，找出符合条件的解。</li><li><strong>搜索问题</strong>：在深度优先搜索或广度优先搜索中，枚举所有可能路径，直到找到符合要求的路径或最优路径。</li><li><strong>模拟问题</strong>：在条件允许的情况下，可以通过模拟所有可能的步骤或状态。</li></ol><hr><h3 id="4-C-中常用的枚举方法"><a href="#4-C-中常用的枚举方法" class="headerlink" title="4. C++中常用的枚举方法"></a>4. C++中常用的枚举方法</h3><p>接下来介绍几种常见的枚举方式，并结合示例加以说明：</p><h4 id="4-1-区间枚举"><a href="#4-1-区间枚举" class="headerlink" title="4.1 区间枚举"></a>4.1 区间枚举</h4><p>区间枚举即对一个区间内的所有数值进行枚举。在C++中可以通过for循环来实现。</p><p><strong>例子1：枚举1到100内的所有偶数</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解答</strong>：这个程序遍历1到100的所有整数，并通过<code>i % 2 == 0</code>判断是否为偶数，若是则输出。通过区间枚举，可以轻松实现对区间内的数的筛选。</p><h4 id="4-2-递增枚举"><a href="#4-2-递增枚举" class="headerlink" title="4.2 递增枚举"></a>4.2 递增枚举</h4><p>递增枚举是一种优化的区间枚举方式，通过跳过不必要的数字来提高效率。对于特定条件，我们可以直接让变量按需递增。例如，在枚举偶数时，可以直接让变量每次加2，避免对奇数的无效判断。</p><p><strong>例子2：改进的1到100内的所有偶数枚举</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 直接从2开始，每次增加2</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解答</strong>：在这里，我们直接从2开始，并将循环变量每次加2，从而实现递增枚举。相比例子1，这种写法更高效，减少了不必要的判断。</p><h4 id="4-3-二重枚举（嵌套枚举）"><a href="#4-3-二重枚举（嵌套枚举）" class="headerlink" title="4.3 二重枚举（嵌套枚举）"></a>4.3 二重枚举（嵌套枚举）</h4><p>二重枚举适合处理组合问题，例如寻找一个集合中所有数对的组合。通过嵌套循环，可以遍历所有可能的数对。</p><p><strong>例子3：枚举数组中两数之和等于目标值的所有数对</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 从i+1开始，避免重复组合</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解答</strong>：在这个例子中，我们使用了二重循环来枚举所有数对 <code>(arr[i], arr[j])</code>，并检查它们的和是否等于目标值<code>target</code>。注意第二层循环的起点是<code>i+1</code>，这样可以避免重复计算的组合。</p><h4 id="4-4-多重枚举"><a href="#4-4-多重枚举" class="headerlink" title="4.4 多重枚举"></a>4.4 多重枚举</h4><p>多重枚举适用于更复杂的组合问题，例如列出3个或更多个数的组合。多重枚举的写法一般是多层嵌套循环。</p><p><strong>例子4：枚举数组中三数之和为目标值的所有数组</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解答</strong>：通过三层循环，我们枚举了数组中所有可能的三数组合，并检查其和是否等于<code>target</code>。这种方法对于元素较少的数组较为有效，但在规模较大时效率较低。</p><hr><h3 id="5-优化和剪枝"><a href="#5-优化和剪枝" class="headerlink" title="5. 优化和剪枝"></a>5. 优化和剪枝</h3><p>在实际问题中，枚举可以结合剪枝技术来减少计算量，提高效率。</p><p><strong>例子5：带剪枝的区间枚举</strong></p><p>假设我们想在1到100之间找出所有能被7整除的数，但只需要前10个结果：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 找到10个后立即结束</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解答</strong>：在这个例子中，我们使用了<code>if (count == 10) break;</code>进行剪枝，当找到前10个数时，程序就会提前退出，不再继续循环。这样可以减少不必要的计算。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在C++中，枚举是解决有限空间搜索问题的有效方法，尤其是在数据规模较小时，可以直接通过枚举法找到答案。常见的枚举方法包括区间枚举、递增枚举、二重枚举和多重枚举等。在实际编程时，常常结合剪枝优化，以提高枚举效率。</p><p>熟练掌握枚举法并加以合理优化，是参加NOIP竞赛及解决算法问题的重要技能。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中如何理解数理逻辑</title>
      <link href="/C-%E4%B8%AD%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91.html"/>
      <url>/C-%E4%B8%AD%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91.html</url>
      
        <content type="html"><![CDATA[<p>在NOIP（全国青少年信息学奥林匹克联赛）中，数理逻辑是一个重要的知识点，它涉及到命题逻辑的基本概念和操作。以下是一些关键的数理逻辑知识点，以及它们在C++编程中的应用示例。</p><span id="more"></span><h3 id="1-命题与联结词"><a href="#1-命题与联结词" class="headerlink" title="1. 命题与联结词"></a>1. 命题与联结词</h3><ul><li><strong>原子命题</strong>：最简单的命题，如<code>p</code>, <code>q</code>, <code>r</code>，它们可以是真（True）或假（False）。</li><li><strong>联结词</strong>：用于连接原子命题形成更复杂的命题公式。常见的联结词包括：<ul><li><strong>否定（NOT）</strong>：<code>¬p</code>表示非<code>p</code>。</li><li><strong>合取（AND）</strong>：<code>p ∧ q</code>表示<code>p</code>和<code>q</code>都为真时结果才为真。</li><li><strong>析取（OR）</strong>：<code>p ∨ q</code>表示<code>p</code>和<code>q</code>中至少一个为真时结果为真。</li><li><strong>蕴涵（IMPLIES）</strong>：<code>p → q</code>表示如果<code>p</code>为真，则<code>q</code>也必须为真。</li><li><strong>等价（IFF）</strong>：<code>p ↔ q</code>表示<code>p</code>和<code>q</code>同真或同假。</li></ul></li></ul><h3 id="2-命题公式"><a href="#2-命题公式" class="headerlink" title="2. 命题公式"></a>2. 命题公式</h3><p>命题公式是由原子命题和联结词构成的逻辑表达式。例如，<code>(p ∧ q) ∨ ¬r</code>是一个命题公式。</p><h3 id="3-联结词优先级"><a href="#3-联结词优先级" class="headerlink" title="3. 联结词优先级"></a>3. 联结词优先级</h3><p>在逻辑表达式中，联结词的优先级通常如下：</p><ul><li>否定（NOT）最高优先级。</li><li>合取（AND）和析取（OR）次之，且它们的优先级相同。</li><li>蕴涵（IMPLIES）和等价（IFF）优先级最低。</li></ul><h3 id="4-真值表"><a href="#4-真值表" class="headerlink" title="4. 真值表"></a>4. 真值表</h3><p>真值表是判断命题公式在所有可能的原子命题真值组合下的结果的工具。例如，<code>p ∧ q</code>的真值表如下：</p><table><thead><tr><th>p</th><th>q</th><th>p ∧ q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table><h3 id="5-可满足性、矛盾性和重言式"><a href="#5-可满足性、矛盾性和重言式" class="headerlink" title="5. 可满足性、矛盾性和重言式"></a>5. 可满足性、矛盾性和重言式</h3><ul><li><strong>可满足式</strong>：至少存在一种原子命题的真值组合使得命题公式为真的公式。</li><li><strong>矛盾式</strong>：无论原子命题的真值如何，命题公式总是假。</li><li><strong>重言式</strong>：无论原子命题的真值如何，命题公式总是真。</li></ul><h3 id="示例与解答"><a href="#示例与解答" class="headerlink" title="示例与解答"></a>示例与解答</h3><p>考虑一个简单的C++程序，用于计算命题公式<code>(p ∧ q) ∨ ¬r</code>的真值：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter values for p, q, r (true/false): "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> p <span class="token operator">&gt;&gt;</span> q <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>    <span class="token keyword">bool</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>r<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result of (p ∧ q) ∨ ¬r: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个程序中，我们首先输入原子命题<code>p</code>, <code>q</code>, <code>r</code>的真值，然后计算公式<code>(p ∧ q) ∨ ¬r</code>的真值并输出结果。这个例子展示了如何在C++中处理基本的逻辑运算。</p><p>在CSP竞赛中，有关数理逻辑的题目通常涉及到逻辑表达式的求值、逻辑运算符的使用、逻辑推理等。下面我将给出一个具体的真题例子，并提供详细的解题答案。</p><h3 id="真题例子：-CSP-J2020-表达式"><a href="#真题例子：-CSP-J2020-表达式" class="headerlink" title="真题例子：[CSP-J2020] 表达式"></a>真题例子：[CSP-J2020] 表达式</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>小C热衷于学习数理逻辑。有一天，他发现了一种特别的逻辑表达式。在这种逻辑表达式中，所有操作数都是变量，且它们的取值只能为0或1，运算从左往右进行。如果表达式中有括号，则先计算括号内的子表达式的值。特别的，这种表达式有且仅有以下几种运算：</p><ol><li>与运算：<code>a &amp; b</code>。当且仅当a和b的值都为1时，该表达式的值为1。其余情况该表达式的值为0。</li><li>或运算：<code>a | b</code>。当且仅当a和b的值都为0时，该表达式的值为0。其余情况该表达式的值为1。</li><li>取反运算：<code>!a</code>。当且仅当a的值为0时，该表达式的值为1。其余情况该表达式的值为0。</li></ol><p>小C想知道，给定一个逻辑表达式和其中每一个操作数的初始取值后，再取反某一个操作数的值时，原表达式的值为多少。</p><p>表达式将采用后缀表达式的方式输入。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><ul><li>第一行包含一个字符串s，表示上文描述的表达式。</li><li>第二行包含一个正整数n，表示表达式中变量的数量。</li><li>第三行包含n个整数，第i个整数表示变量xi的初值。</li><li>第四行包含一个正整数q，表示询问的个数。</li><li>接下来q行，每行一个正整数，表示需要取反的变量的下标。</li></ul><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一共有q行，每行一个0或1，表示该询问下表达式的值。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">x1 x2 &amp; x3 |31 0 13123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">110<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li><strong>解析输入</strong>：首先，需要解析输入的逻辑表达式，包括变量的初始值和需要取反的变量下标。</li><li><strong>构建后缀表达式</strong>：将输入的中缀表达式转换为后缀表达式，以简化计算过程。</li><li><strong>计算表达式</strong>：使用栈来计算后缀表达式。对于每个操作数，直接推入栈中；对于每个运算符，从栈中弹出必要的操作数，执行运算，并将结果推回栈中。</li><li><strong>处理取反操作</strong>：对于每个询问，根据需要取反的变量下标，修改变量的值，然后重新计算表达式。</li></ol><h4 id="详细解答"><a href="#详细解答" class="headerlink" title="详细解答"></a>详细解答</h4><p>以样例输入为例，我们首先将中缀表达式转换为后缀表达式，然后使用栈进行计算。</p><ol><li><strong>转换为后缀表达式</strong>：<code>x1 x2 &amp; x3 |</code></li><li><strong>初始变量值</strong>：<code>x1 = 1, x2 = 0, x3 = 1</code></li><li><strong>计算表达式</strong>：按照后缀表达式的顺序，我们首先计算<code>x1 x2 &amp;</code>，结果为0，然后计算<code>0 x3 |</code>，结果为1。</li><li><strong>处理询问</strong>：<ul><li>第一个询问要求取反<code>x1</code>，新的变量值为<code>x1 = 0, x2 = 0, x3 = 1</code>，重新计算表达式，结果为1。</li><li>第二个询问要求取反<code>x2</code>，新的变量值为<code>x1 = 1, x2 = 1, x3 = 1</code>，重新计算表达式，结果为1。</li><li>第三个询问要求取反<code>x3</code>，新的变量值为<code>x1 = 1, x2 = 0, x3 = 0</code>，重新计算表达式，结果为0。</li></ul></li></ol><p>因此，输出结果为：<code>1 1 0</code>。</p><p>这个题目考察了对逻辑表达式求值的理解和实现，以及对后缀表达式的处理能力。通过这个题目，可以加深对数理逻辑和栈的应用的理解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 数理逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的多线程和多进程</title>
      <link href="/python%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B.html"/>
      <url>/python%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-Python中的多线程与多进程"><a href="#1-Python中的多线程与多进程" class="headerlink" title="1. Python中的多线程与多进程"></a>1. Python中的多线程与多进程</h3><p>Python支持<strong>多线程</strong>和<strong>多进程</strong>，用以处理并发任务。了解这两者的优缺点、适用场景以及实现方式，有助于根据应用需求选择合适的并发处理方式。</p><span id="more"></span><h4 id="1-1-多线程（Threading）"><a href="#1-1-多线程（Threading）" class="headerlink" title="1.1 多线程（Threading）"></a>1.1 多线程（Threading）</h4><p><strong>线程</strong>是操作系统能够调度的最小执行单元。多个线程可以在一个进程内同时运行，彼此共享同一片内存空间。Python提供了<code>threading</code>模块来实现多线程。</p><p><strong>适用场景：</strong></p><ul><li>多线程适合I/O密集型任务（如文件读写、网络请求、数据库查询等），因为在I/O操作过程中，CPU通常会空闲，线程可以利用这个时间执行其他任务。</li></ul><p><strong>优点：</strong></p><ul><li>线程共享内存，可以方便地共享数据。</li><li>对I/O密集型任务性能提升明显。</li></ul><p><strong>缺点：</strong></p><ul><li>由于Python的<strong>全局解释器锁（Global Interpreter Lock, GIL）</strong>，多线程无法真正并行执行CPU密集型任务。Python中多个线程会被限制在单个CPU核心上，不能有效利用多核CPU。</li><li>线程之间的同步和数据一致性管理比较复杂，可能会引发竞态条件（Race Condition）等问题。</li></ul><h4 id="1-2-多进程（Multiprocessing）"><a href="#1-2-多进程（Multiprocessing）" class="headerlink" title="1.2 多进程（Multiprocessing）"></a>1.2 多进程（Multiprocessing）</h4><p><strong>进程</strong>是资源分配的最小单位。多个进程拥有各自的内存空间，进程之间的数据是隔离的，只有通过进程间通信（IPC）才能共享数据。Python提供了<code>multiprocessing</code>模块来实现多进程。</p><p><strong>适用场景：</strong></p><ul><li>多进程适合CPU密集型任务（如数学计算、大数据处理等），因为每个进程都有自己独立的Python解释器和内存空间，避免了GIL的限制，能够利用多核CPU。</li></ul><p><strong>优点：</strong></p><ul><li>多进程能够绕过GIL限制，真正实现并行，充分利用多核CPU。</li><li>进程之间的内存独立性避免了线程中的数据竞争问题。</li></ul><p><strong>缺点：</strong></p><ul><li>进程间的通信比较复杂，效率也低于线程。</li><li>每个进程都有独立的内存空间，内存开销较大。</li></ul><hr><h3 id="2-详细代码示例"><a href="#2-详细代码示例" class="headerlink" title="2. 详细代码示例"></a>2. 详细代码示例</h3><h4 id="2-1-多线程示例"><a href="#2-1-多线程示例" class="headerlink" title="2.1 多线程示例"></a>2.1 多线程示例</h4><p>以下是一个使用<code>threading</code>模块实现多线程的示例，模拟一个I/O密集型任务。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment"># 模拟I/O密集型任务</span><span class="token keyword">def</span> <span class="token function">io_task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Thread </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 开始任务"</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 模拟I/O操作，如文件读写或网络请求</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Thread </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 任务完成"</span></span><span class="token punctuation">)</span><span class="token comment"># 创建多个线程</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>io_task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待所有线程完成</span><span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有线程任务完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li><code>threading.Thread</code>用于创建新线程，每个线程执行<code>io_task</code>函数。</li><li><code>thread.start()</code>启动线程，<code>thread.join()</code>等待线程完成。</li><li><code>time.sleep(2)</code>模拟I/O操作，所有线程能够并发执行，而不会阻塞其他线程。</li></ul><h4 id="2-2-多进程示例"><a href="#2-2-多进程示例" class="headerlink" title="2.2 多进程示例"></a>2.2 多进程示例</h4><p>以下是一个使用<code>multiprocessing</code>模块实现多进程的示例，模拟一个CPU密集型任务。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token comment"># 模拟CPU密集型任务</span><span class="token keyword">def</span> <span class="token function">cpu_task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Process </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 开始任务"</span></span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 模拟大量计算</span>        result <span class="token operator">+=</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Process </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 任务完成"</span></span><span class="token punctuation">)</span><span class="token comment"># 创建多个进程</span>processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>cpu_task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>process<span class="token punctuation">)</span>    process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待所有进程完成</span><span class="token keyword">for</span> process <span class="token keyword">in</span> processes<span class="token punctuation">:</span>    process<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有进程任务完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li><code>multiprocessing.Process</code>用于创建新进程，每个进程执行<code>cpu_task</code>函数。</li><li><code>process.start()</code>启动进程，<code>process.join()</code>等待进程完成。</li><li>任务是CPU密集型的，因此每个进程能充分利用多核CPU并行计算。</li></ul><hr><h3 id="3-多线程与多进程的优缺点对比"><a href="#3-多线程与多进程的优缺点对比" class="headerlink" title="3. 多线程与多进程的优缺点对比"></a>3. 多线程与多进程的优缺点对比</h3><table><thead><tr><th>特性</th><th>多线程</th><th>多进程</th></tr></thead><tbody><tr><td>内存共享</td><td>共享同一内存空间</td><td>进程独立，不能直接共享内存</td></tr><tr><td>开销</td><td>线程轻量，内存开销小</td><td>进程重量，内存开销大</td></tr><tr><td>适用场景</td><td>I/O密集型任务，如文件I/O，网络请求</td><td>CPU密集型任务，如数据处理，大量计算</td></tr><tr><td>GIL影响</td><td>受限于GIL，多线程无法真正并行</td><td>不受GIL影响，多进程可以真正并行</td></tr><tr><td>数据同步</td><td>需要手动管理锁等同步机制</td><td>进程之间数据独立，减少同步问题</td></tr><tr><td>通信复杂度</td><td>线程间共享数据，通信简单</td><td>进程间通信需要IPC，复杂度较高</td></tr></tbody></table><hr><h3 id="4-进程与线程的高级特性"><a href="#4-进程与线程的高级特性" class="headerlink" title="4. 进程与线程的高级特性"></a>4. 进程与线程的高级特性</h3><h4 id="4-1-线程池与进程池"><a href="#4-1-线程池与进程池" class="headerlink" title="4.1 线程池与进程池"></a>4.1 线程池与进程池</h4><p>当任务数量较多时，手动创建和管理线程/进程可能会比较复杂。Python提供了<strong>线程池（ThreadPool）</strong>和<strong>进程池（ProcessPool）</strong>，通过<code>concurrent.futures</code>模块简化线程和进程的管理。</p><p><strong>线程池示例：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">io_task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Thread </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 开始任务"</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Thread </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 任务完成"</span></span><span class="token punctuation">)</span><span class="token comment"># 使用线程池</span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>    futures <span class="token operator">=</span> <span class="token punctuation">[</span>executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>io_task<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># futures可以用来检查任务的完成状态等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进程池示例：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">cpu_task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Process </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 开始任务"</span></span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Process </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: 任务完成"</span></span><span class="token punctuation">)</span><span class="token comment"># 使用进程池</span><span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>    futures <span class="token operator">=</span> <span class="token punctuation">[</span>executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>cpu_task<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li><code>ThreadPoolExecutor</code>和<code>ProcessPoolExecutor</code>自动管理线程或进程的创建和销毁，简化并发程序的编写。</li><li><code>executor.submit()</code>将任务提交到线程池或进程池中，异步执行任务。</li></ul><hr><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><h4 id="多线程适用场景："><a href="#多线程适用场景：" class="headerlink" title="多线程适用场景："></a>多线程适用场景：</h4><ul><li>I/O密集型任务（如文件读写、网络请求等）。</li><li>不需要大量CPU计算的任务。</li></ul><h4 id="多进程适用场景："><a href="#多进程适用场景：" class="headerlink" title="多进程适用场景："></a>多进程适用场景：</h4><ul><li>CPU密集型任务（如大数据处理、复杂的数学计算等）。</li><li>需要充分利用多核CPU时。</li></ul><h4 id="选择指南："><a href="#选择指南：" class="headerlink" title="选择指南："></a>选择指南：</h4><ul><li>如果程序需要处理大量I/O操作而CPU不繁忙，使用<strong>多线程</strong>。</li><li>如果任务是大量的计算且需要并行处理，建议使用<strong>多进程</strong>。</li></ul><p>通过具体应用场景的需求，选择多线程或多进程才能在性能和资源使用上取得最佳的平衡。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 多进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++中的排列的概念</title>
      <link href="/c-%E4%B8%AD%E7%9A%84%E6%8E%92%E5%88%97%E7%9A%84%E6%A6%82%E5%BF%B5.html"/>
      <url>/c-%E4%B8%AD%E7%9A%84%E6%8E%92%E5%88%97%E7%9A%84%E6%A6%82%E5%BF%B5.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是排列？"><a href="#1-什么是排列？" class="headerlink" title="1. 什么是排列？"></a>1. 什么是排列？</h2><p>在数学中，<strong>排列</strong>指的是从一组不同的元素中选出一部分，并按照一定的顺序进行排列。比如，如果你有三个字母 ( {A, B, C} )，那么它们的排列就是：</p><ul><li>ABC, ACB, BAC, BCA, CAB, CBA</li></ul><p>可以看到，每个排列都包括了所有的元素，并且它们的顺序不同。</p><span id="more"></span><p>如果我们不考虑顺序，则称为<strong>组合</strong>。但本次我们讨论的是<strong>排列</strong>。</p><h2 id="2-排列的数学定义"><a href="#2-排列的数学定义" class="headerlink" title="2. 排列的数学定义"></a>2. 排列的数学定义</h2><p>如果你有 n 个元素，并且想要从中选择 r个来进行排列，那么排列数公式为：</p><img src="/c-%E4%B8%AD%E7%9A%84%E6%8E%92%E5%88%97%E7%9A%84%E6%A6%82%E5%BF%B5/1.png" class="" title="示意图 width=400"><p>其中 n! 表示 n 的阶乘，即：</p><img src="/c-%E4%B8%AD%E7%9A%84%E6%8E%92%E5%88%97%E7%9A%84%E6%A6%82%E5%BF%B5/2.png" class="" title="示意图 width=400"><h2 id="3-C-实现排列的基本思路"><a href="#3-C-实现排列的基本思路" class="headerlink" title="3. C++ 实现排列的基本思路"></a>3. C++ 实现排列的基本思路</h2><p>在 C++ 中，要生成一个集合的所有排列，我们可以使用递归的思想。假设我们有一个数组存储了 ( n ) 个元素，想要生成它们的所有排列。方法如下：</p><ol><li>将第一个元素固定，递归排列剩余的元素。</li><li>依次交换其他元素到第一个位置，然后递归处理剩下的元素。</li><li>当处理到最后一个元素时，得到一个完整的排列。</li></ol><h3 id="示例：生成一个数组的所有排列"><a href="#示例：生成一个数组的所有排列" class="headerlink" title="示例：生成一个数组的所有排列"></a>示例：生成一个数组的所有排列</h3><h3 id="示例代码：生成所有排列"><a href="#示例代码：生成所有排列" class="headerlink" title="示例代码：生成所有排列"></a>示例代码：生成所有排列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 交换两个数</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 生成排列的递归函数</span><span class="token keyword">void</span> <span class="token function">generatePermutations</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果到达了最后一个位置，打印当前排列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 遍历当前子数组，依次固定一个元素，递归处理剩余部分</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 将第 i 个元素放到当前起始位置</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 递归生成后面的排列</span>            <span class="token function">generatePermutations</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 递归完成后，回溯：将数组恢复原状</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 初始数组</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"所有排列为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">generatePermutations</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用递归函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详细注释与代码讲解："><a href="#详细注释与代码讲解：" class="headerlink" title="详细注释与代码讲解："></a>详细注释与代码讲解：</h3><ol><li><strong>swap 函数</strong>：用于交换数组中两个元素的位置。这是排列生成过程中非常重要的操作，因为我们需要通过交换来调整数组中元素的顺序。</li><li><strong>generatePermutations 函数</strong>：这是递归生成排列的核心函数。它接收三个参数：<ul><li><code>arr[]</code>：存储要排列的元素的数组。</li><li><code>start</code>：表示当前处理的起始位置。</li><li><code>end</code>：表示数组的末尾位置。<br>在每次递归调用中，它会固定当前的第一个元素，然后递归生成剩余元素的排列。</li></ul></li><li><strong>回溯</strong>：在递归的过程中，元素的位置会不断被交换。当递归返回时，通过再次交换将数组恢复到原来的状态，这个过程称为“回溯”。</li></ol><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-none"><code class="language-none">所有排列为：1 2 3 1 3 2 2 1 3 2 3 1 3 2 1 3 1 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CSP-J-历年关于排列的题目"><a href="#4-CSP-J-历年关于排列的题目" class="headerlink" title="4. CSP-J 历年关于排列的题目"></a>4. CSP-J 历年关于排列的题目</h2><p>中国计算机学会举办的 CSP-J 比赛中，经常会涉及到排列相关的编程题目，以下是一些典型的题目：</p><h3 id="题目1：全排列生成"><a href="#题目1：全排列生成" class="headerlink" title="题目1：全排列生成"></a>题目1：全排列生成</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个长度为 ( n ) 的数组，数组中包含 ( 1 ) 到 ( n ) 的整数，要求输出它们的所有排列。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>使用递归和回溯的思路来生成所有排列，类似于上面的示例代码。</li></ul><h3 id="题目2：字典序排列"><a href="#题目2：字典序排列" class="headerlink" title="题目2：字典序排列"></a>题目2：字典序排列</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个数组，要求按照字典序输出所有可能的排列。字典序的排列顺序与字典中单词的排列方式相似，即按从小到大的顺序进行排列。</p><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>首先对数组进行排序，保证初始排列是最小字典序的排列。</li><li>然后在每次生成下一个排列时，需要按照字典序规则调整元素的位置。这可以通过手动实现“下一个排列”算法来完成。</li></ul><h3 id="题目3：排列的逆序数"><a href="#题目3：排列的逆序数" class="headerlink" title="题目3：排列的逆序数"></a>题目3：排列的逆序数</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个排列，计算其<strong>逆序数</strong>。逆序数是指排列中出现前面的数大于后面的数的情况的个数。例如：排列 [3, 1, 2] 中，逆序数是 2 （因为 3 &gt; 1, 3 &gt; 2）。</p><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>使用双重循环遍历排列，统计逆序数。对于每个元素，计算它后面有多少个比它小的数。</li></ul><h3 id="题目4：排列计数"><a href="#题目4：排列计数" class="headerlink" title="题目4：排列计数"></a>题目4：排列计数</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定 ( n ) 个数，问可以形成多少种不同的排列方式，其中部分数可能是重复的。</p><h4 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>这是一个带有重复元素的排列问题。可以通过递归的方式跳过重复的数来避免生成相同的排列。</li></ul><h2 id="5-其他拓展知识"><a href="#5-其他拓展知识" class="headerlink" title="5. 其他拓展知识"></a>5. 其他拓展知识</h2><h3 id="阶乘的递归计算"><a href="#阶乘的递归计算" class="headerlink" title="阶乘的递归计算"></a>阶乘的递归计算</h3><p>阶乘 ( n! ) 是排列问题中的一个基本数学运算，C++ 中可以使用递归方式计算阶乘。</p><h3 id="示例代码：阶乘的递归计算"><a href="#示例代码：阶乘的递归计算" class="headerlink" title="示例代码：阶乘的递归计算"></a>示例代码：阶乘的递归计算</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入一个数："</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"! = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-none"><code class="language-none">输入一个数：55! = 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><ul><li><strong>排列</strong>是一种基础的数学问题，要求从一组元素中按照一定顺序选择和排列。</li><li><strong>递归与回溯</strong>是编程中解决排列问题的重要方法。</li><li>不使用 C++ 的标准库（STL）实现排列可以帮助理解递归和算法的本质。</li><li>通过例题练习可以更好地掌握排列的编程实现。</li></ul><p>在后续的学习中，可以结合更多的题目和场景，进一步加深对排列问题的理解和掌握。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 排列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++中的组合的概念</title>
      <link href="/c-%E4%B8%AD%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E6%A6%82%E5%BF%B5.html"/>
      <url>/c-%E4%B8%AD%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E6%A6%82%E5%BF%B5.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是组合？"><a href="#1-什么是组合？" class="headerlink" title="1. 什么是组合？"></a>1. 什么是组合？</h2><p>在数学中，<strong>组合</strong>是从一组元素中选择出若干个元素，不考虑元素的排列顺序。例如，假设有三个字母 ( {A, B, C} )，如果我们想要从中选择两个字母，组合的结果有：</p><ul><li>AB, AC, BC</li></ul><p>注意：组合与排列不同，组合只关心选择哪些元素，不考虑这些元素的顺序。因此，组合中的 AB 和 BA 被认为是相同的。</p><span id="more"></span><h2 id="2-组合的数学定义"><a href="#2-组合的数学定义" class="headerlink" title="2. 组合的数学定义"></a>2. 组合的数学定义</h2><p>组合的数学公式表示为：</p><img src="/c-%E4%B8%AD%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E6%A6%82%E5%BF%B5/1.png" class="" title="示意图 width=400"><p>其中，C(n,r)表示从 n 个元素中选择 r 个元素的组合数。</p><ul><li>n 表示总共有多少个元素。</li><li>r 表示从中选择几个元素。</li><li>n! 表示 n 的阶乘，即 n!=n×(n−1)×⋯×1。</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ul><li>从 5 个元素中选择 2 个进行组合，公式为：</li></ul><img src="/c-%E4%B8%AD%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E6%A6%82%E5%BF%B5/2.png" class="" title="示意图 width=400"><p>即 5 个元素中选择 2 个，共有 10 种不同的组合方式。</p><h2 id="3-C-实现组合的基本思路"><a href="#3-C-实现组合的基本思路" class="headerlink" title="3. C++ 实现组合的基本思路"></a>3. C++ 实现组合的基本思路</h2><p>在 C++ 中，生成组合的基本思路是使用递归。我们可以使用以下两种方式来生成组合：</p><ol><li><strong>递归选择</strong>：对每个元素，考虑选取它还是不选取它，然后递归地生成剩余元素的组合。</li><li><strong>循环遍历</strong>：通过固定第一个元素，然后递归处理剩余元素。</li></ol><h3 id="示例：生成一个数组的所有组合"><a href="#示例：生成一个数组的所有组合" class="headerlink" title="示例：生成一个数组的所有组合"></a>示例：生成一个数组的所有组合</h3><h3 id="示例代码：生成所有组合"><a href="#示例代码：生成所有组合" class="headerlink" title="示例代码：生成所有组合"></a>示例代码：生成所有组合</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 打印当前组合</span><span class="token keyword">void</span> <span class="token function">printCombination</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> comb<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> comb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token comment">// 输出当前组合中的元素</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 递归生成组合的函数</span><span class="token keyword">void</span> <span class="token function">generateCombinations</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> comb<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 当组合中已经有了 r 个元素，打印该组合</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printCombination</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> comb<span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 从当前的 start 位置开始，选择剩余的元素进行组合</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        comb<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 选择当前元素</span>        <span class="token function">generateCombinations</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> comb<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归选择下一个元素</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 要组合的数组</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数组元素个数</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 每次选择 3 个元素进行组合</span>    <span class="token keyword">int</span> comb<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 存储当前组合的数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"所有组合为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">generateCombinations</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> comb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用生成组合的函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详细注释与代码讲解："><a href="#详细注释与代码讲解：" class="headerlink" title="详细注释与代码讲解："></a>详细注释与代码讲解：</h3><ol><li><strong>printCombination 函数</strong>：当生成了一个完整的组合后，用该函数打印组合结果。组合存储在 <code>comb[]</code> 数组中。</li><li><strong>generateCombinations 函数</strong>：这是递归生成组合的核心函数，它有以下参数：<ul><li><code>arr[]</code>：存储要进行组合的元素。</li><li><code>comb[]</code>：存储当前选择的组合元素。</li><li><code>start</code>：表示当前在 <code>arr[]</code> 数组中选择元素的位置。</li><li><code>index</code>：当前在 <code>comb[]</code> 中已经填充的元素位置。</li><li><code>n</code>：数组 <code>arr[]</code> 中的元素个数。</li><li><code>r</code>：需要选择的元素个数。<br>在每次递归中，它从 <code>start</code> 位置开始选择元素，并在递归过程中将选择的元素填入 <code>comb[]</code> 数组中。当 <code>comb[]</code> 中填满了 ( r ) 个元素时，打印该组合。</li></ul></li></ol><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-none"><code class="language-none">所有组合为：1 2 3 1 2 4 1 2 5 1 3 4 1 3 5 1 4 5 2 3 4 2 3 5 2 4 5 3 4 5 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-组合的常见算法与应用"><a href="#4-组合的常见算法与应用" class="headerlink" title="4. 组合的常见算法与应用"></a>4. 组合的常见算法与应用</h2><h3 id="4-1-二项式系数"><a href="#4-1-二项式系数" class="headerlink" title="4.1 二项式系数"></a>4.1 二项式系数</h3><p>组合数 C(n, r) 也称为二项式系数。可以使用递归或动态规划来计算组合数。计算公式为：</p><img src="/c-%E4%B8%AD%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E6%A6%82%E5%BF%B5/3.png" class="" title="示意图 width=400"><p>当  r = 0  或  r = n 时，组合数为 1。</p><h3 id="4-2-递归计算组合数"><a href="#4-2-递归计算组合数" class="headerlink" title="4.2 递归计算组合数"></a>4.2 递归计算组合数</h3><p>下面是一个用递归实现计算 C(n, r) 的代码示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 递归计算组合数 C(n, r)</span><span class="token keyword">int</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> r <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// C(n, 0) = C(n, n) = 1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">combination</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">combination</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入 n 和 r："</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C("</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> <span class="token string">") = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">combination</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-none"><code class="language-none">输入 n 和 r：5 3C(5, 3) = 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-3-组合的其他应用场景"><a href="#4-3-组合的其他应用场景" class="headerlink" title="4.3 组合的其他应用场景"></a>4.3 组合的其他应用场景</h3><p>组合问题在现实生活中有广泛的应用场景，例如：</p><ul><li><strong>彩票号码选择</strong>：从若干个号码中选择一定数量的号码进行组合。</li><li><strong>团队选拔</strong>：从多人中选择特定数量的成员组成一个团队。</li></ul><h2 id="5-CSP-J-历年关于组合的题目"><a href="#5-CSP-J-历年关于组合的题目" class="headerlink" title="5. CSP-J 历年关于组合的题目"></a>5. CSP-J 历年关于组合的题目</h2><p>中国计算机学会（CSP-J）比赛中，组合问题也经常出现。以下是一些典型的题目：</p><h3 id="题目1：组合生成"><a href="#题目1：组合生成" class="headerlink" title="题目1：组合生成"></a>题目1：组合生成</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个长度为 ( n ) 的数组，数组中包含 ( 1 ) 到 ( n ) 的整数，要求输出所有长度为 ( r ) 的组合。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>使用递归方法生成所有长度为 ( r ) 的组合，类似于上面的示例代码。</li></ul><h3 id="题目2：组合数计算"><a href="#题目2：组合数计算" class="headerlink" title="题目2：组合数计算"></a>题目2：组合数计算</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入两个整数 ( n ) 和 ( r )，计算组合数 ( C(n, r) )。</p><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>可以使用递归方法或者动态规划方法来计算组合数。</li></ul><h3 id="题目3：组合的计数"><a href="#题目3：组合的计数" class="headerlink" title="题目3：组合的计数"></a>题目3：组合的计数</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个数组，数组中的元素可能有重复，要求计算可以从中选出若干个不同元素的组合数。</p><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>需要先对数组进行去重，然后计算不重复元素的组合。</li></ul><h3 id="题目4：特殊条件组合"><a href="#题目4：特殊条件组合" class="headerlink" title="题目4：特殊条件组合"></a>题目4：特殊条件组合</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一组元素，从中选出若干个元素组成组合，要求组合中的元素之和满足某种特定条件（如和为某个给定值）。</p><h4 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li>可以在生成组合的同时，判断组合元素的和是否满足条件。</li></ul><h2 id="6-其他拓展知识"><a href="#6-其他拓展知识" class="headerlink" title="6. 其他拓展知识"></a>6. 其他拓展知识</h2><h3 id="阶乘的递归计算"><a href="#阶乘的递归计算" class="headerlink" title="阶乘的递归计算"></a>阶乘的递归计算</h3><p>阶乘 ( n! ) 是计算组合数中的基础运算。我们可以使用递归方式计算阶乘。</p><h3 id="示例代码：递归计算阶乘"><a href="#示例代码：递归计算阶乘" class="headerlink" title="示例代码：递归计算阶乘"></a>示例代码：递归计算阶乘</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 递归计算 n 的阶乘</span><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入一个数："</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"! = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果：-2"><a href="#输出结果：-2" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-none"><code class="language-none">输入一个数：55! = 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h2><ul><li><strong>组合</strong>是数学中从一</li></ul><p>组元素中选择若干个元素的方式，不考虑顺序。</p><ul><li>在 C++ 中生成组合可以使用递归与回溯的算法，通过递归遍历所有可能的组合。</li><li>组合问题是编程竞赛中的常见问题，结合递归与数学公式可以解决很多实际问题。</li><li>通过结合一些经典的 CSP-J 题目，可以巩固和应用组合的知识。</li></ul><p>后续的学习中，可以结合更多题目进行练习，进一步掌握组合的生成和组合数的计算方法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度计算</title>
      <link href="/High-Precision-Computation.html"/>
      <url>/High-Precision-Computation.html</url>
      
        <content type="html"><![CDATA[<p>高精度计算（High-Precision Computation）是指在计算机中处理超过内置数据类型（如 <code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>）所能表示的数值范围和精度的数值计算。在许多应用场景中，如科学计算、加密算法、大数运算、金融分析等，高精度计算是必不可少的。本文将详细介绍 C++ 中实现高精度计算的相关知识点，包括基本概念、实现方法、常用库及示例代码。</p><span id="more"></span><h2 id="一、高精度计算的必要性"><a href="#一、高精度计算的必要性" class="headerlink" title="一、高精度计算的必要性"></a>一、高精度计算的必要性</h2><ol><li><p><strong>数值范围和精度限制</strong>：</p><ul><li>内置数据类型有固定的存储范围和精度。例如，<code>double</code> 类型通常具有 15-17 位的十进制有效数字，对于某些需要更高精度的计算来说，这远远不够。</li><li>在处理非常大的整数或小数时，内置类型会出现溢出或精度丢失的问题。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><strong>科学计算</strong>：需要高精度的小数计算以确保结果的准确性。</li><li><strong>加密算法</strong>：涉及大数的运算，如素数检测、大数乘法等。</li><li><strong>金融分析</strong>：需要精确到小数点后多位，避免因四舍五入导致的误差积累。</li><li><strong>计算几何</strong>：需要高精度的坐标计算以确保图形的精确性。</li></ul></li></ol><h2 id="二、C-中高精度计算的实现方法"><a href="#二、C-中高精度计算的实现方法" class="headerlink" title="二、C++ 中高精度计算的实现方法"></a>二、C++ 中高精度计算的实现方法</h2><p>实现高精度计算的方法主要有两种：</p><ol><li><p><strong>手动实现大数运算</strong>：</p><ul><li>使用字符串或数组来表示大数，每一位单独存储，并实现基本运算（加、减、乘、除）的算法。</li></ul></li><li><p><strong>使用现有的高精度库</strong>：</p><ul><li>利用成熟的高精度计算库，如 GMP、MPFR、Boost.Multiprecision 等，简化开发过程并提升性能。</li></ul></li></ol><h3 id="1-手动实现大数运算"><a href="#1-手动实现大数运算" class="headerlink" title="1. 手动实现大数运算"></a>1. 手动实现大数运算</h3><p>手动实现大数运算通常涉及以下步骤：</p><h4 id="a-大数的表示"><a href="#a-大数的表示" class="headerlink" title="a. 大数的表示"></a>a. 大数的表示</h4><p>通常使用字符串或数组来表示大数，每个字符或数组元素表示一位数字。为了便于运算，通常将数的最低位存储在数组的低索引位置。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token comment">// 大数表示为字符串，最低位在末尾</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>string BigInt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-大数加法"><a href="#b-大数加法" class="headerlink" title="b. 大数加法"></a>b. 大数加法</h4><p>实现两个大数相加的算法，考虑进位。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">BigInt <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInt result<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_len <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> digit_a <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> digit_b <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> digit_a <span class="token operator">+</span> digit_b <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> carry <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-大数乘法"><a href="#c-大数乘法" class="headerlink" title="c. 大数乘法"></a>c. 大数乘法</h4><p>使用“逐位乘法”或更高效的算法（如快速傅里叶变换）实现大数乘法。以下为逐位乘法的实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">BigInt <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">product</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> product<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        std<span class="token double-colon punctuation">::</span>string result<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d-大数减法与除法"><a href="#d-大数减法与除法" class="headerlink" title="d. 大数减法与除法"></a>d. 大数减法与除法</h4><p>大数减法和除法的实现相对复杂，需处理借位和更复杂的算法。由于篇幅限制，这里不再详细展开，但基本思路类似于加法和乘法，需要逐位处理，并确保数的正确顺序和符号。</p><h4 id="e-示例代码"><a href="#e-示例代码" class="headerlink" title="e. 示例代码"></a>e. 示例代码</h4><p>以下是一个完整的大数加法和乘法的示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token comment">// 大数表示为字符串，最低位在末尾</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>string BigInt<span class="token punctuation">;</span><span class="token comment">// 大数加法</span>BigInt <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInt result<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_len <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> digit_a <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> digit_b <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> digit_a <span class="token operator">+</span> digit_b <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> carry <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 大数乘法</span>BigInt <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">product</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> product<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        std<span class="token double-colon punctuation">::</span>string result<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInt num1 <span class="token operator">=</span> <span class="token string">"123456789123456789"</span><span class="token punctuation">;</span>    BigInt num2 <span class="token operator">=</span> <span class="token string">"987654321987654321"</span><span class="token punctuation">;</span>        BigInt sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    BigInt product <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum: "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>         <span class="token comment">// 输出 Sum: 1111111111111111110</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Product: "</span> <span class="token operator">&lt;&lt;</span> product <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 输出 Product: 121932631356500531347203169112635269</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用高精度库"><a href="#2-使用高精度库" class="headerlink" title="2. 使用高精度库"></a>2. 使用高精度库</h3><p>手动实现大数运算虽然可行，但对于复杂的运算和高效性需求，建议使用现有的高精度计算库。这些库经过高度优化，提供了丰富的接口和功能。</p><h4 id="a-GMP（GNU-Multiple-Precision-Arithmetic-Library）"><a href="#a-GMP（GNU-Multiple-Precision-Arithmetic-Library）" class="headerlink" title="a. GMP（GNU Multiple Precision Arithmetic Library）"></a>a. GMP（GNU Multiple Precision Arithmetic Library）</h4><p>GMP 是一个广泛使用的高性能多精度算术库，支持整数、有理数和浮点数的运算。</p><p><strong>安装 GMP</strong>：<br>在 Linux 系统上，可以通过包管理器安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgmp-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gmp.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mpz_t a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> product<span class="token punctuation">;</span>        <span class="token comment">// 初始化</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置值</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"123456789123456789123456789"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"987654321987654321987654321"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加法</span>    <span class="token function">mpz_add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">mpz_get_str</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token comment">// 乘法</span>    <span class="token function">mpz_mul</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Product: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">mpz_get_str</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token comment">// 清理</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-o</span> gmp_example gmp_example.cpp <span class="token parameter variable">-lgmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="b-Boost-Multiprecision"><a href="#b-Boost-Multiprecision" class="headerlink" title="b. Boost.Multiprecision"></a>b. Boost.Multiprecision</h4><p>Boost 是一个功能强大的 C++ 库集合，Boost.Multiprecision 提供了多种高精度数值类型。</p><p><strong>安装 Boost</strong>：<br>在大多数 Linux 发行版上，可以通过包管理器安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libboost-all-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>multiprecision<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cpp_int <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"123456789123456789123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpp_int <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"987654321987654321987654321"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpp_int sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    cpp_int product <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum: "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>         <span class="token comment">// 输出 Sum: 1111111111111111111111111110</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Product: "</span> <span class="token operator">&lt;&lt;</span> product <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 Product: 121932631356500531591068431581771069347203169112635269</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-o</span> boost_example boost_example.cpp <span class="token parameter variable">-lboost_system</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c-MPFR（Multiple-Precision-Floating-Point-Reliable-Library）"><a href="#c-MPFR（Multiple-Precision-Floating-Point-Reliable-Library）" class="headerlink" title="c. MPFR（Multiple Precision Floating-Point Reliable Library）"></a>c. MPFR（Multiple Precision Floating-Point Reliable Library）</h4><p>MPFR 专注于高精度浮点数计算，基于 GMP 实现，提供了更高的精度控制和数学函数支持。</p><p><strong>安装 MPFR</strong>：<br>在 Linux 系统上，可以通过包管理器安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libmpfr-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例代码</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpfr.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mpfr_t a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> product<span class="token punctuation">;</span>        <span class="token comment">// 初始化变量，设置精度为 256 位</span>    <span class="token function">mpfr_init2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_init2</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_init2</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_init2</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置值</span>    <span class="token function">mpfr_set_str</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"123456789123456789.123456789"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> MPFR_RNDN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_set_str</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"987654321987654321.987654321"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> MPFR_RNDN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加法</span>    <span class="token function">mpfr_add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> MPFR_RNDN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 乘法</span>    <span class="token function">mpfr_mul</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> MPFR_RNDN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出结果</span>    <span class="token function">mpfr_printf</span><span class="token punctuation">(</span><span class="token string">"Sum: %.30Rf\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_printf</span><span class="token punctuation">(</span><span class="token string">"Product: %.30Rf\n"</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清理</span>    <span class="token function">mpfr_clear</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_clear</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_clear</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_clear</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpfr_free_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-o</span> mpfr_example mpfr_example.cpp <span class="token parameter variable">-lmpfr</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-性能考虑"><a href="#3-性能考虑" class="headerlink" title="3. 性能考虑"></a>3. 性能考虑</h3><p>手动实现的高精度运算通常效率较低，尤其是对于大规模运算和高精度要求。使用优化良好的库（如 GMP）能够显著提升性能。此外，选择合适的数据结构和算法（如快速傅里叶变换用于大数乘法）也能有效提升计算速度。</p><h2 id="三、高精度计算的常见操作"><a href="#三、高精度计算的常见操作" class="headerlink" title="三、高精度计算的常见操作"></a>三、高精度计算的常见操作</h2><p>在高精度计算中，常见的操作包括：</p><ol><li><strong>加法和减法</strong>：基本的数值运算，需处理进位和借位。</li><li><strong>乘法</strong>：可以使用逐位乘法、Karatsuba 算法、快速傅里叶变换等提高效率。</li><li><strong>除法</strong>：包括整数除法和浮点数除法，通常使用长除法算法或更高效的方法。</li><li><strong>幂运算</strong>：可以通过重复平方或快速幂算法实现。</li><li><strong>模运算</strong>：在加密算法中广泛使用，需要高效的模乘和模幂算法。</li><li><strong>根号、对数、三角函数等数学函数</strong>：需要通过泰勒级数、二分法等数值方法实现高精度计算。</li></ol><h2 id="四、常见问题及解决方案"><a href="#四、常见问题及解决方案" class="headerlink" title="四、常见问题及解决方案"></a>四、常见问题及解决方案</h2><ol><li><p><strong>内存和性能问题</strong>：</p><ul><li>高精度运算会消耗更多的内存和计算资源。选择合适的数据结构（如使用位压缩表示数字）和高效的算法可以缓解这一问题。</li><li>使用多线程或并行计算技术可以提升大规模运算的性能。</li></ul></li><li><p><strong>精度管理</strong>：</p><ul><li>在浮点高精度计算中，需合理设置精度以平衡计算速度和结果准确性。</li><li>使用库提供的精度控制接口，如 MPFR 的 <code>mpfr_set_default_prec</code>。</li></ul></li><li><p><strong>溢出和下溢</strong>：</p><ul><li>手动实现大数运算时需特别注意数值溢出和下溢的问题，确保算法的正确性。</li></ul></li><li><p><strong>符号处理</strong>：</p><ul><li>处理负数时需管理符号位，确保加减乘除等运算的正确性。</li></ul></li></ol><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>C++ 中的高精度计算是处理超出内置数据类型范围和精度的强大工具。根据具体需求，开发者可以选择手动实现大数运算以获得更高的灵活性，或使用成熟的高精度库（如 GMP、Boost.Multiprecision、MPFR）以简化开发流程并提升性能。在实际应用中，合理选择数据结构和算法，并充分利用现有库的优化，可以有效实现高精度计算需求。</p><p>以下是几道模拟题目，涵盖了高精度加法、乘法、阶乘和幂运算等常见类型，并附有详细的解答。</p><hr><h2 id="模拟题目1：大数相加"><a href="#模拟题目1：大数相加" class="headerlink" title="模拟题目1：大数相加"></a>模拟题目1：大数相加</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个非负整数 <code>A</code> 和 <code>B</code>，它们的位数可能达到 100,000 位。请计算 <code>A + B</code> 的结果。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个非负整数 <code>A</code> 和 <code>B</code>。<code>A</code> 和 <code>B</code> 均不含前导零，且长度不超过 100,000 位。</li></ul><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A + B</code> 的结果。</li></ul><h3 id="示例输入"><a href="#示例输入" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">123456789123456789987654321987654321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">1111111111111111110<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于输入的整数位数可能高达 100,000 位，内置数据类型无法直接存储和处理。因此，我们需要使用字符串或数组来表示大数，并逐位进行加法运算，考虑进位。</p><p>具体步骤如下：</p><ol><li><strong>反转字符串</strong>：为了方便从最低位开始相加，将两个数的字符串反转。</li><li><strong>逐位相加</strong>：从最低位开始逐位相加，同时处理进位。</li><li><strong>处理剩余进位</strong>：如果最高位有进位，需额外添加。</li><li><strong>反转结果</strong>：将结果字符串反转回正常顺序。</li></ol><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 大数相加函数</span>string <span class="token function">addBigNumbers</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string A <span class="token operator">=</span> a<span class="token punctuation">;</span>    string B <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token comment">// 反转字符串，便于从最低位开始相加</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string result<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digitA <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> digitB <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> digitA <span class="token operator">+</span> digitB <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">+=</span> carry <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 反转回正常顺序</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">addBigNumbers</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>反转字符串</strong>：将输入的字符串 <code>A</code> 和 <code>B</code> 反转，使得最低位位于索引 0 位置，方便逐位相加。</li><li><strong>逐位相加</strong>：<ul><li>遍历两个字符串的每一位，取出对应的数字位进行相加。</li><li>考虑进位，将每一位的和加到结果字符串中。</li></ul></li><li><strong>处理剩余进位</strong>：如果最后有进位，需将其添加到结果字符串末尾。</li><li><strong>反转结果</strong>：将结果字符串反转回正常顺序，得到最终的加法结果。</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于需要遍历两个字符串的每一位，时间复杂度为 O(N)，其中 N 是两个字符串中较长的长度。</p><hr><h2 id="模拟题目2：大数相乘"><a href="#模拟题目2：大数相乘" class="headerlink" title="模拟题目2：大数相乘"></a>模拟题目2：大数相乘</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个非负整数 <code>A</code> 和 <code>B</code>，它们的位数可能达到 100,000 位。请计算 <code>A * B</code> 的结果。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个非负整数 <code>A</code> 和 <code>B</code>。<code>A</code> 和 <code>B</code> 均不含前导零，且长度不超过 100,000 位。</li></ul><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A * B</code> 的结果。</li></ul><h3 id="示例输入-1"><a href="#示例输入-1" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">123456789987654321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出-1"><a href="#示例输出-1" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">121932631112635269<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>大数相乘相比大数相加更为复杂，但基本思路仍然是模拟手工乘法。具体步骤如下：</p><ol><li><strong>初始化结果数组</strong>：结果的最大长度为 <code>A.size() + B.size()</code>。</li><li><strong>逐位相乘并累加</strong>：从最低位开始逐位相乘，并将乘积累加到对应的位置，同时处理进位。</li><li><strong>处理前导零</strong>：去除结果中的前导零，确保结果的正确性。</li><li><strong>构建结果字符串</strong>：将结果数组转换为字符串形式。</li></ol><h3 id="C-实现-1"><a href="#C-实现-1" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 大数乘法函数</span>string <span class="token function">multiplyBigNumbers</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    string A <span class="token operator">=</span> a<span class="token punctuation">;</span>    string B <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 结果数组初始化为 n + m 位</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">product</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转字符串，便于从最低位开始相乘</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digitA <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> digitB <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> digitA <span class="token operator">*</span> digitB<span class="token punctuation">;</span>            <span class="token comment">// 处理进位</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 构建结果字符串</span>    string result<span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 去除前导零</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">multiplyBigNumbers</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>初始化结果数组</strong>：创建一个长度为 <code>A.size() + B.size()</code> 的 <code>vector&lt;int&gt;</code> 来存储每一位的乘积和进位。</li><li><strong>逐位相乘</strong>：<ul><li>双重循环遍历 <code>A</code> 和 <code>B</code> 的每一位，计算乘积并累加到 <code>product[i + j]</code> 位置。</li><li>处理进位，将超过 10 的部分转移到更高位。</li></ul></li><li><strong>处理前导零</strong>：从高位开始检查并去除前导零，确保结果的正确性。</li><li><strong>构建结果字符串</strong>：将 <code>product</code> 数组中的数字转换为字符串形式，从高位到低位拼接。</li></ol><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于需要遍历两个字符串的每一位，时间复杂度为 O(N * M)，其中 N 和 M 分别是两个字符串的长度。对于 100,000 位的数，这种方法在时间和空间上可能不可行，因此在实际竞赛中，可能需要使用更高效的算法，如 Karatsuba 算法或快速傅里叶变换（FFT）乘法。</p><hr><h2 id="模拟题目3：大数阶乘"><a href="#模拟题目3：大数阶乘" class="headerlink" title="模拟题目3：大数阶乘"></a>模拟题目3：大数阶乘</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>计算 <code>N!</code>，其中 <code>1 ≤ N ≤ 10,000</code>。由于 <code>N!</code> 的值非常大，需要输出 <code>N!</code> 的全部数字。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含一个整数 <code>N</code>。</li></ul><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>N!</code> 的结果。</li></ul><h3 id="示例输入-2"><a href="#示例输入-2" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="示例输出-2"><a href="#示例输出-2" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">3628800<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>计算大数阶乘需要多次大数乘法。我们可以使用一个数组或字符串来存储中间结果，每次乘以一个新的整数，并处理进位。</p><p>具体步骤如下：</p><ol><li><strong>初始化</strong>：将 <code>factorial</code> 初始化为 <code>1</code>。</li><li><strong>逐步乘法</strong>：从 <code>2</code> 到 <code>N</code>，逐步将 <code>factorial</code> 乘以当前数。</li><li><strong>处理进位</strong>：每次乘法后，处理进位并更新 <code>factorial</code>。</li><li><strong>输出结果</strong>：将 <code>factorial</code> 数组转换为字符串并输出。</li></ol><h3 id="C-实现-2"><a href="#C-实现-2" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 打印大数</span><span class="token keyword">void</span> <span class="token function">printBigFactorial</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 跳过前导零</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 大数乘以一个整数</span><span class="token keyword">void</span> <span class="token function">multiplyFactorial</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> x <span class="token operator">+</span> carry<span class="token punctuation">;</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        carry <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carry <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>    <span class="token comment">// 初始化 factorial 为 1</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">multiplyFactorial</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printBigFactorial</span><span class="token punctuation">(</span>factorial<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-2"><a href="#代码解释-2" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>初始化</strong>：使用一个 <code>vector&lt;int&gt;</code> 存储 <code>factorial</code>，初始值为 <code>1</code>。</li><li><strong>逐步乘法</strong>：<ul><li>对于每一个 <code>i</code> 从 <code>2</code> 到 <code>N</code>，调用 <code>multiplyFactorial</code> 函数，将 <code>factorial</code> 乘以 <code>i</code>。</li><li>在 <code>multiplyFactorial</code> 函数中，遍历 <code>factorial</code> 的每一位，计算乘积并处理进位。</li><li>如果最后还有进位，继续将其分解并添加到 <code>factorial</code> 中。</li></ul></li><li><strong>输出结果</strong>：调用 <code>printBigFactorial</code> 函数，从高位到低位打印 <code>factorial</code>。</li></ol><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于需要进行 <code>N</code> 次大数乘法，每次乘法的时间复杂度为 O(L)，其中 L 是当前 <code>factorial</code> 的位数。总体时间复杂度为 O(N * L)，对于 <code>N</code> 达到 10,000，且 <code>L</code> 也随 <code>N</code> 增长，仍然是可行的。</p><hr><h2 id="模拟题目4：高精度小数加法"><a href="#模拟题目4：高精度小数加法" class="headerlink" title="模拟题目4：高精度小数加法"></a>模拟题目4：高精度小数加法</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个高精度小数 <code>A</code> 和 <code>B</code>，计算 <code>A + B</code> 的结果。小数部分最多有 1,000 位。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个高精度小数 <code>A</code> 和 <code>B</code>。<code>A</code> 和 <code>B</code> 均不含前导零，且小数部分最多 1,000 位。如果没有小数部分，小数点可以省略。</li></ul><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A + B</code> 的结果。</li></ul><h3 id="示例输入-3"><a href="#示例输入-3" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">123.456789.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出-3"><a href="#示例输出-3" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">912.579<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>高精度小数加法需要分别处理整数部分和小数部分。具体步骤如下：</p><ol><li><strong>分割整数和小数部分</strong>：将输入的字符串分割为整数部分和小数部分。</li><li><strong>对齐小数位数</strong>：在小数部分较短的数后补零，使两数的小数位数相同。</li><li><strong>对齐整数位数</strong>：在整数部分较短的数前补零，使两数的整数位数相同。</li><li><strong>分别进行加法</strong>：<ul><li>先加小数部分，处理进位。</li><li>再加整数部分，继续处理进位。</li></ul></li><li><strong>去除前导零和多余的末尾零</strong>：确保结果的格式正确。</li><li><strong>合并结果</strong>：将整数部分和小数部分合并，形成最终结果。</li></ol><h3 id="C-实现-3"><a href="#C-实现-3" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 分割整数和小数部分</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token function">splitDecimal</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t pos <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>num<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string integer <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    string fractional <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>integer<span class="token punctuation">,</span> fractional<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 大数加法函数</span>string <span class="token function">addBigDecimals</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 分割整数和小数部分</span>    pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> partA <span class="token operator">=</span> <span class="token function">splitDecimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> partB <span class="token operator">=</span> <span class="token function">splitDecimal</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    string intA <span class="token operator">=</span> partA<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    string fracA <span class="token operator">=</span> partA<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    string intB <span class="token operator">=</span> partB<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    string fracB <span class="token operator">=</span> partB<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token comment">// 对齐小数位数</span>    <span class="token keyword">int</span> frac_lenA <span class="token operator">=</span> fracA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> frac_lenB <span class="token operator">=</span> fracB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_frac <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>frac_lenA<span class="token punctuation">,</span> frac_lenB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fracA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> max_frac<span class="token punctuation">)</span><span class="token punctuation">{</span>        fracA <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fracB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> max_frac<span class="token punctuation">)</span><span class="token punctuation">{</span>        fracB <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 对齐整数位数</span>    <span class="token keyword">int</span> lenA <span class="token operator">=</span> intA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lenB <span class="token operator">=</span> intB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_int <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>lenA<span class="token punctuation">,</span> lenB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>intA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> max_int<span class="token punctuation">)</span><span class="token punctuation">{</span>        intA <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> intA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>intB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> max_int<span class="token punctuation">)</span><span class="token punctuation">{</span>        intB <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> intB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 加法：先加小数部分</span>    string fracResult <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max_frac <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>fracA<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>fracB<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        fracResult <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> fracResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 再加整数部分</span>    string intResult <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max_int <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>intA<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>intB<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        intResult <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> intResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>        intResult <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token operator">+</span> intResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 去除前导零</span>    size_t start <span class="token operator">=</span> intResult<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">==</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>        intResult <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        intResult <span class="token operator">=</span> intResult<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 去除小数部分末尾的零</span>    size_t end <span class="token operator">=</span> fracResult<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">==</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>        fracResult <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        fracResult <span class="token operator">=</span> fracResult<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 构建最终结果</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fracResult <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> intResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> intResult <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> fracResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">addBigDecimals</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-3"><a href="#代码解释-3" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>分割整数和小数部分</strong>：通过查找小数点 <code>'.'</code>，将输入字符串分割为整数部分和小数部分。如果没有小数点，则小数部分为空。</li><li><strong>对齐小数位数</strong>：将较短的小数部分补零，使两数的小数位数相同。</li><li><strong>对齐整数位数</strong>：在较短的整数部分前补零，使两数的整数位数相同。</li><li><strong>逐位相加</strong>：<ul><li>先从小数部分的最低位开始逐位相加，处理进位。</li><li>再从整数部分的最低位开始逐位相加，继续处理进位。</li></ul></li><li><strong>去除前导零和多余的末尾零</strong>：<ul><li>去除整数部分的前导零，确保结果的格式正确。</li><li>去除小数部分的末尾零，如果小数部分全为零，则只保留整数部分。</li></ul></li><li><strong>合并结果</strong>：将整数部分和小数部分合并，形成最终的加法结果。</li></ol><h3 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于需要遍历小数部分和整数部分的每一位，时间复杂度为 O(N)，其中 N 是输入数中较长的部分的长度。</p><hr><h2 id="模拟题目5：高精度幂运算"><a href="#模拟题目5：高精度幂运算" class="headerlink" title="模拟题目5：高精度幂运算"></a>模拟题目5：高精度幂运算</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个非负整数 <code>A</code> 和一个非负整数 <code>B</code>，计算 <code>A^B</code>（即 <code>A</code> 的 <code>B</code> 次方）。由于结果可能非常大，请输出 <code>A^B</code> 的全部数字。<code>0^0</code> 定义为 <code>1</code>。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含一行，包含两个非负整数 <code>A</code> 和 <code>B</code>，其中 <code>0 ≤ A, B ≤ 10,000</code>。<code>A</code> 可能有多达 100,000 位。</li></ul><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A^B</code> 的结果。</li></ul><h3 id="示例输入-4"><a href="#示例输入-4" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">2 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="示例输出-4"><a href="#示例输出-4" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">1024<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>计算高精度幂运算需要多次大数乘法。常用的方法是<strong>快速幂</strong>（Exponentiation by Squaring），结合大数乘法，可以有效地计算 <code>A^B</code>。</p><p>具体步骤如下：</p><ol><li><strong>初始化</strong>：将结果 <code>result</code> 初始化为 <code>1</code>。</li><li><strong>快速幂迭代</strong>：<ul><li>当 <code>B</code> 大于 <code>0</code> 时：<ul><li>如果 <code>B</code> 是奇数，<code>result = result * A</code>。</li><li><code>A = A * A</code>。</li><li><code>B = B / 2</code>。</li></ul></li></ul></li><li><strong>输出结果</strong>：将 <code>result</code> 转换为字符串并输出。</li></ol><h3 id="C-实现-4"><a href="#C-实现-4" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 大数乘法函数</span>string <span class="token function">multiplyStrings</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> num1<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">product</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转字符串</span>    string A <span class="token operator">=</span> num1<span class="token punctuation">;</span>    string B <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digitA <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> digitB <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> digitA <span class="token operator">*</span> digitB<span class="token punctuation">;</span>            <span class="token comment">// 处理进位</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            product<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 构建结果字符串</span>    string result<span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 去除前导零</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">[</span>size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 快速幂函数</span>string <span class="token function">powerBigNumbers</span><span class="token punctuation">(</span>string A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>    string result <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>B <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>B <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">multiplyStrings</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        A <span class="token operator">=</span> <span class="token function">multiplyStrings</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        B <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">;</span>    <span class="token keyword">int</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    <span class="token comment">// 处理 0^0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> B <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 处理 A^0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>B <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 处理 0^B (B &gt; 0)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">powerBigNumbers</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-4"><a href="#代码解释-4" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>大数乘法</strong>：<ul><li>使用与前述大数乘法相同的方法，将两个大数字符串相乘，返回结果字符串。</li></ul></li><li><strong>快速幂</strong>：<ul><li>使用快速幂算法，通过将指数 <code>B</code> 分解为二进制形式，减少乘法次数。</li><li>如果当前 <code>B</code> 为奇数，<code>result = result * A</code>。</li><li>将 <code>A</code> 自乘，<code>A = A * A</code>。</li><li>将 <code>B</code> 右移一位，<code>B = B / 2</code>。</li></ul></li><li><strong>特殊情况处理</strong>：<ul><li><code>0^0</code> 定义为 <code>1</code>。</li><li><code>A^0</code>（<code>A</code> 不为 <code>0</code>）结果为 <code>1</code>。</li><li><code>0^B</code>（<code>B &gt; 0</code>）结果为 <code>0</code>。</li></ul></li><li><strong>输出结果</strong>：将最终的 <code>result</code> 输出。</li></ol><h3 id="时间复杂度-4"><a href="#时间复杂度-4" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>快速幂的时间复杂度为 O(log B) 次乘法，每次乘法的时间复杂度为 O(N * M)。因此，总体时间复杂度为 O(N * M * log B)，其中 N 和 M 是参与乘法的两个大数的位数。</p><hr><h2 id="模拟题目6：高精度求模运算"><a href="#模拟题目6：高精度求模运算" class="headerlink" title="模拟题目6：高精度求模运算"></a>模拟题目6：高精度求模运算</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个非负整数 <code>A</code> 和 <code>B</code>，其中 <code>A</code> 可能有多达 100,000 位，<code>B</code> 不超过 1,000,000。请计算 <code>A % B</code> 的结果。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个非负整数 <code>A</code> 和 <code>B</code>。<code>A</code> 不含前导零，长度不超过 100,000 位。<code>0 ≤ B ≤ 1,000,000</code>。</li></ul><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A % B</code> 的结果。</li></ul><h3 id="示例输入-5"><a href="#示例输入-5" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">1234567891234567891234567891000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出-5"><a href="#示例输出-5" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">789<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于 <code>A</code> 可能非常大，无法用内置数据类型直接存储。我们需要逐位读取 <code>A</code>，并通过取模运算来计算 <code>A % B</code>。</p><p>具体步骤如下：</p><ol><li><strong>初始化</strong>：将 <code>result</code> 初始化为 <code>0</code>。</li><li><strong>逐位读取</strong>：<ul><li>遍历 <code>A</code> 的每一位，将其转换为数字。</li><li>更新 <code>result = (result * 10 + current_digit) % B</code>。</li></ul></li><li><strong>输出结果</strong>：最终的 <code>result</code> 即为 <code>A % B</code> 的结果。</li></ol><h3 id="C-实现-5"><a href="#C-实现-5" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>B <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 通常情况下，模 0 是未定义的，这里可以根据需求输出错误信息</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Undefined"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">)</span> <span class="token operator">%</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-5"><a href="#代码解释-5" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>初始化</strong>：将 <code>result</code> 初始化为 <code>0</code>。</li><li><strong>逐位读取</strong>：<ul><li>遍历 <code>A</code> 的每一位，将其转换为数字。</li><li>更新 <code>result = (result * 10 + current_digit) % B</code>。</li></ul></li><li><strong>输出结果</strong>：最终的 <code>result</code> 即为 <code>A % B</code> 的结果。</li></ol><h3 id="时间复杂度-5"><a href="#时间复杂度-5" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于需要遍历 <code>A</code> 的每一位，时间复杂度为 O(N)，其中 N 是 <code>A</code> 的位数。对于 100,000 位的数，这种方法在时间和空间上都是高效的。</p><hr><h2 id="模拟题目7：高精度字符串比较"><a href="#模拟题目7：高精度字符串比较" class="headerlink" title="模拟题目7：高精度字符串比较"></a>模拟题目7：高精度字符串比较</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个非负整数 <code>A</code> 和 <code>B</code>，它们可能有多达 100,000 位。请比较 <code>A</code> 和 <code>B</code> 的大小，并输出：</p><ul><li><code>"A &gt; B"</code>，如果 <code>A</code> 大于 <code>B</code>。</li><li><code>"A &lt; B"</code>，如果 <code>A</code> 小于 <code>B</code>。</li><li><code>"A = B"</code>，如果 <code>A</code> 等于 <code>B</code>。</li></ul><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个非负整数 <code>A</code> 和 <code>B</code>。<code>A</code> 和 <code>B</code> 均不含前导零，且长度不超过 100,000 位。</li></ul><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A</code> 和 <code>B</code> 的关系。</li></ul><h3 id="示例输入-6"><a href="#示例输入-6" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">123456789123456789123456789123456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出-6"><a href="#示例输出-6" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">A = B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于 <code>A</code> 和 <code>B</code> 可能非常大，无法用内置数据类型直接存储。我们可以通过以下步骤比较两个大数：</p><ol><li><strong>比较长度</strong>：<ul><li>如果 <code>A</code> 的长度大于 <code>B</code>，则 <code>A &gt; B</code>。</li><li>如果 <code>A</code> 的长度小于 <code>B</code>，则 <code>A &lt; B</code>。</li></ul></li><li><strong>逐位比较</strong>：<ul><li>如果长度相同，逐位从高位开始比较。</li><li>一旦发现不同的数字，确定大小关系。</li></ul></li><li><strong>相等</strong>：<ul><li>如果所有位都相同，则 <code>A = B</code>。</li></ul></li></ol><h3 id="C-实现-6"><a href="#C-实现-6" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A &gt; B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A &lt; B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">==</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A = B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">// 逐位比较</span>            <span class="token keyword">bool</span> greater <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">bool</span> less <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    greater <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    less <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>greater<span class="token punctuation">)</span><span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A &gt; B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A &lt; B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-6"><a href="#代码解释-6" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>比较长度</strong>：<ul><li>直接比较字符串的长度，确定哪个数更大。</li></ul></li><li><strong>逐位比较</strong>：<ul><li>如果长度相同，逐位从左到右（高位到低位）比较每一位。</li><li>一旦发现不同的数字，立即确定大小关系。</li></ul></li><li><strong>相等</strong>：<ul><li>如果所有位都相同，输出 <code>A = B</code>。</li></ul></li></ol><h3 id="时间复杂度-6"><a href="#时间复杂度-6" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最坏情况下，需要逐位比较两个数，时间复杂度为 O(N)，其中 N 是 <code>A</code> 和 <code>B</code> 的位数。</p><hr><h2 id="模拟题目8：高精度除法（求商）"><a href="#模拟题目8：高精度除法（求商）" class="headerlink" title="模拟题目8：高精度除法（求商）"></a>模拟题目8：高精度除法（求商）</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个非负整数 <code>A</code> 和 <code>B</code>，其中 <code>A</code> 可能有多达 100,000 位，<code>B</code> 不超过 1,000,000。请计算 <code>A / B</code> 的整数商。</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个非负整数 <code>A</code> 和 <code>B</code>。<code>A</code> 不含前导零，且长度不超过 100,000 位。<code>0 &lt; B ≤ 1,000,000</code>。</li></ul><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>A / B</code> 的整数商。</li></ul><h3 id="示例输入-7"><a href="#示例输入-7" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">1234567891234567891000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出-7"><a href="#示例输出-7" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">123456789123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>高精度除法涉及将大数 <code>A</code> 逐步除以较小的数 <code>B</code>。具体步骤如下：</p><ol><li><strong>初始化</strong>：将 <code>result</code> 初始化为空字符串，<code>temp</code> 初始化为 <code>0</code>。</li><li><strong>逐位读取</strong>：<ul><li>从高位到低位，逐位读取 <code>A</code> 的每一位，更新 <code>temp = temp * 10 + current_digit</code>。</li><li>计算 <code>temp / B</code> 的商，将其追加到 <code>result</code>。</li><li>更新 <code>temp = temp % B</code>。</li></ul></li><li><strong>去除前导零</strong>：确保结果不含前导零，除非结果为 <code>0</code>。</li><li><strong>输出结果</strong>：将 <code>result</code> 输出。</li></ol><h3 id="C-实现-7"><a href="#C-实现-7" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>B <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 通常情况下，除以0是未定义的，这里可以根据需求输出错误信息</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Undefined"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> quotient <span class="token operator">=</span> temp <span class="token operator">/</span> B<span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp <span class="token operator">%</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 去除前导零</span>    size_t start <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">==</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-7"><a href="#代码解释-7" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>初始化</strong>：<code>result</code> 用于存储商，<code>temp</code> 用于存储当前的被除数部分。</li><li><strong>逐位读取</strong>：<ul><li>从高位到低位读取 <code>A</code> 的每一位，将其转换为数字，并更新 <code>temp = temp * 10 + current_digit</code>。</li><li>计算 <code>temp / B</code>，将商追加到 <code>result</code>。</li><li>更新 <code>temp = temp % B</code>，用于下一次迭代。</li></ul></li><li><strong>去除前导零</strong>：找到第一个非零字符的位置，截取字符串。如果全为零，则结果为 <code>"0"</code>。</li><li><strong>输出结果</strong>：输出最终的商。</li></ol><h3 id="时间复杂度-7"><a href="#时间复杂度-7" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于需要遍历 <code>A</code> 的每一位，时间复杂度为 O(N)，其中 N 是 <code>A</code> 的位数。对于 100,000 位的数，这种方法在时间和空间上都是高效的。</p><hr><h2 id="模拟题目9：高精度求-GCD"><a href="#模拟题目9：高精度求-GCD" class="headerlink" title="模拟题目9：高精度求 GCD"></a>模拟题目9：高精度求 GCD</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个非负整数 <code>A</code> 和 <code>B</code>，其中 <code>A</code> 可能有多达 100,000 位，<code>B</code> 可能有多达 100,000 位。请计算 <code>GCD(A, B)</code>（最大公约数）。</p><h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含两行，每行一个非负整数 <code>A</code> 和 <code>B</code>。<code>A</code> 和 <code>B</code> 均不含前导零，且长度不超过 100,000 位。</li></ul><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示 <code>GCD(A, B)</code> 的结果。</li></ul><h3 id="示例输入-8"><a href="#示例输入-8" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">4818<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="示例输出-8"><a href="#示例输出-8" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>计算大数的 GCD 可以使用欧几里得算法，但需要处理大数的取模操作。具体步骤如下：</p><ol><li><strong>处理 <code>A</code> 和 <code>B</code> 的大小</strong>：<ul><li>比较 <code>A</code> 和 <code>B</code> 的大小，确保 <code>A &gt;= B</code>。如果不，交换它们。</li></ul></li><li><strong>迭代计算 GCD</strong>：<ul><li>使用欧几里得算法，重复计算 <code>A % B</code>，直到 <code>B</code> 为 <code>0</code>。</li><li>需要实现大数取模的功能。</li></ul></li><li><strong>返回结果</strong>：<ul><li>当 <code>B</code> 为 <code>0</code> 时，<code>A</code> 即为 GCD。</li></ul></li></ol><h3 id="C-实现-8"><a href="#C-实现-8" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 大数比较函数</span><span class="token keyword">int</span> <span class="token function">compareBigNumbers</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 大数取模函数</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">modBigNumber</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B<span class="token punctuation">;</span>    <span class="token comment">// 边界情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>B <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 比较大小，确保 A &gt;= B</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareBigNumbers</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>B <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 将 B 转换为 long long</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> b_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>            b_val <span class="token operator">=</span> b_val <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 防止 b_val 超过 long long 的范围</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b_val <span class="token operator">&gt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 计算 A % B</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> a_mod <span class="token operator">=</span> <span class="token function">modBigNumber</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置 A = B, B = a_mod</span>        A <span class="token operator">=</span> B<span class="token punctuation">;</span>        B <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>a_mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-8"><a href="#代码解释-8" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>大数比较函数</strong>：<ul><li>比较两个大数的大小，返回 <code>1</code>（<code>a &gt; b</code>）、<code>-1</code>（<code>a &lt; b</code>）、<code>0</code>（<code>a = b</code>）。</li></ul></li><li><strong>大数取模函数</strong>：<ul><li>逐位读取 <code>A</code>，更新 <code>result = (result * 10 + current_digit) % B</code>。</li></ul></li><li><strong>欧几里得算法</strong>：<ul><li>重复执行 <code>A = B</code>，<code>B = A % B</code>，直到 <code>B</code> 为 <code>0</code>。</li></ul></li><li><strong>边界情况处理</strong>：<ul><li>如果 <code>B</code> 为 <code>0</code>，GCD 为 <code>A</code>。</li><li>如果 <code>A</code> 为 <code>0</code>，GCD 为 <code>B</code>。</li></ul></li></ol><h3 id="时间复杂度-8"><a href="#时间复杂度-8" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>主要时间复杂度来源于大数比较和取模操作。总体时间复杂度为 O(N * log M)，其中 N 是大数的位数，M 是较小数的大小。</p><hr><h2 id="模拟题目10：高精度斐波那契数列"><a href="#模拟题目10：高精度斐波那契数列" class="headerlink" title="模拟题目10：高精度斐波那契数列"></a>模拟题目10：高精度斐波那契数列</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数 <code>N</code>（<code>1 ≤ N ≤ 10,000</code>），请输出第 <code>N</code> 个斐波那契数。由于斐波那契数可能非常大，需要输出其全部数字。</p><h3 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>输入包含一个整数 <code>N</code>。</li></ul><h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>输出一行，表示第 <code>N</code> 个斐波那契数。</li></ul><h3 id="示例输入-9"><a href="#示例输入-9" class="headerlink" title="示例输入"></a>示例输入</h3><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="示例输出-9"><a href="#示例输出-9" class="headerlink" title="示例输出"></a>示例输出</h3><pre class="line-numbers language-none"><code class="language-none">55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>计算高精度斐波那契数列需要多次大数加法。可以使用数组或字符串来存储每个斐波那契数，并逐步计算。</p><p>具体步骤如下：</p><ol><li><strong>初始化</strong>：<code>F(1) = 0</code>，<code>F(2) = 1</code>。</li><li><strong>迭代计算</strong>：<ul><li>从 <code>3</code> 到 <code>N</code>，计算 <code>F(i) = F(i-1) + F(i-2)</code>。</li><li>使用大数加法实现。</li></ul></li><li><strong>输出结果</strong>：输出 <code>F(N)</code>。</li></ol><h3 id="C-实现-9"><a href="#C-实现-9" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 大数加法函数</span>string <span class="token function">addBigNumbers</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string A <span class="token operator">=</span> a<span class="token punctuation">;</span>    string B <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token comment">// 反转字符串，便于从最低位开始相加</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string result<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digitA <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> digitB <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> digitA <span class="token operator">+</span> digitB <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">+=</span> carry <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 反转回正常顺序</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string prev <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    string curr <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    string next<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        next <span class="token operator">=</span> <span class="token function">addBigNumbers</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>        curr <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> curr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释-9"><a href="#代码解释-9" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>初始化</strong>：<ul><li><code>F(1) = 0</code>，<code>F(2) = 1</code>。</li></ul></li><li><strong>迭代计算</strong>：<ul><li>使用 <code>addBigNumbers</code> 函数，逐步计算斐波那契数列。</li><li>更新前两个数，直到计算到 <code>F(N)</code>。</li></ul></li><li><strong>输出结果</strong>：输出第 <code>N</code> 个斐波那契数。</li></ol><h3 id="时间复杂度-9"><a href="#时间复杂度-9" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>主要时间复杂度来源于大数加法，每次加法的时间复杂度为 O(L)，其中 L 是当前斐波那契数的位数。总体时间复杂度为 O(N * L)。</p><hr><h2 id="使用高精度库简化高精度计算"><a href="#使用高精度库简化高精度计算" class="headerlink" title="使用高精度库简化高精度计算"></a>使用高精度库简化高精度计算</h2><p>虽然手动实现大数运算能够加深理解，但在实际竞赛中，使用高效的高精度库可以节省时间并提高代码的可靠性。以下介绍两种常用的高精度库及其在 C++ 中的应用。</p><h3 id="1-GMP（GNU-Multiple-Precision-Arithmetic-Library）"><a href="#1-GMP（GNU-Multiple-Precision-Arithmetic-Library）" class="headerlink" title="1. GMP（GNU Multiple Precision Arithmetic Library）"></a>1. GMP（GNU Multiple Precision Arithmetic Library）</h3><p><strong>GMP</strong> 是一个广泛使用的高性能多精度算术库，支持整数、有理数和浮点数的运算。</p><h4 id="安装-GMP"><a href="#安装-GMP" class="headerlink" title="安装 GMP"></a>安装 GMP</h4><p>在 Linux 系统上，可以通过包管理器安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgmp-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-示例代码"><a href="#C-示例代码" class="headerlink" title="C++ 示例代码"></a>C++ 示例代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gmp.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mpz_t a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> product<span class="token punctuation">;</span>    <span class="token comment">// 初始化变量</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置值</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"123456789123456789123456789"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"987654321987654321987654321"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加法</span>    <span class="token function">mpz_add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">mpz_get_str</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 乘法</span>    <span class="token function">mpz_mul</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Product: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">mpz_get_str</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 清理变量</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-o</span> gmp_example gmp_example.cpp <span class="token parameter variable">-lgmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码解释-10"><a href="#代码解释-10" class="headerlink" title="代码解释"></a>代码解释</h4><ul><li>使用 <code>mpz_t</code> 类型来表示大整数。</li><li>通过 <code>mpz_set_str</code> 设置大数的值。</li><li>使用 <code>mpz_add</code> 和 <code>mpz_mul</code> 进行加法和乘法运算。</li><li>通过 <code>mpz_get_str</code> 获取运算结果的字符串表示。</li><li>最后，使用 <code>mpz_clear</code> 清理变量。</li></ul><h3 id="2-Boost-Multiprecision"><a href="#2-Boost-Multiprecision" class="headerlink" title="2. Boost.Multiprecision"></a>2. Boost.Multiprecision</h3><p><strong>Boost.Multiprecision</strong> 是 Boost 库中的一个模块，提供了多种高精度数值类型，使用方便且与 C++ 标准库兼容。</p><h4 id="安装-Boost"><a href="#安装-Boost" class="headerlink" title="安装 Boost"></a>安装 Boost</h4><p>在大多数 Linux 发行版上，可以通过包管理器安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libboost-all-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-示例代码-1"><a href="#C-示例代码-1" class="headerlink" title="C++ 示例代码"></a>C++ 示例代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>multiprecision<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 使用 Boost 的 cpp_int 类型表示大整数</span>    cpp_int <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"123456789123456789123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpp_int <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"987654321987654321987654321"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpp_int sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    cpp_int product <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum: "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Product: "</span> <span class="token operator">&lt;&lt;</span> product <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-o</span> boost_example boost_example.cpp <span class="token parameter variable">-lboost_system</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码解释-11"><a href="#代码解释-11" class="headerlink" title="代码解释"></a>代码解释</h4><ul><li>使用 <code>cpp_int</code> 类型表示大整数，类似于内置的数值类型。</li><li>可以直接使用 <code>+</code> 和 <code>*</code> 等运算符进行大数运算，语法简洁。</li><li>Boost 库自动处理大数的存储和运算，无需手动管理进位等细节。</li></ul><h3 id="性能与优化"><a href="#性能与优化" class="headerlink" title="性能与优化"></a>性能与优化</h3><p>使用高效的高精度库（如 GMP 和 Boost.Multiprecision）能够显著提升高精度运算的性能。这些库经过高度优化，能够处理极大规模的数值运算，适合竞赛中的高强度计算需求。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>高精度计算在编程竞赛中扮演着重要角色，尤其是在处理超出内置数据类型范围的数值运算时。通过手动实现大数加减乘除，可以深入理解高精度运算的原理和算法；而使用高效的高精度库（如 GMP 和 Boost.Multiprecision）则能够在竞赛中快速、准确地完成复杂的数值计算任务。</p><p>建议在备赛过程中，既要掌握手动实现高精度运算的方法，也要熟悉常用高精度库的使用，以应对不同类型的竞赛题目。</p><p>希望以上内容能够帮助你更好地理解和掌握高精度计算。如有进一步的问题，欢迎继续讨论！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序（Bubble Sort）详解</title>
      <link href="/Bubble-Sort.html"/>
      <url>/Bubble-Sort.html</url>
      
        <content type="html"><![CDATA[<h3 id="冒泡排序（Bubble-Sort）详解"><a href="#冒泡排序（Bubble-Sort）详解" class="headerlink" title="冒泡排序（Bubble Sort）详解"></a>冒泡排序（Bubble Sort）详解</h3><p>冒泡排序是一种简单的排序算法，其工作原理是通过重复遍历要排序的数列，比较相邻的元素并在顺序错误的情况下交换它们。遍历数列的工作是重复进行的，直到没有需要交换的元素为止，这时数列已经排序完成。</p><span id="more"></span><h4 id="冒泡排序的工作原理"><a href="#冒泡排序的工作原理" class="headerlink" title="冒泡排序的工作原理"></a>冒泡排序的工作原理</h4><ol><li><strong>比较相邻的元素</strong>：从数列的第一个元素开始，比较每一对相邻元素。如果它们的顺序错误（前一个元素大于后一个元素），就交换它们。</li><li><strong>重复遍历</strong>：对每一对相邻元素重复上述过程，每完成一轮遍历，最大的元素会“冒泡”到数列的末尾。</li><li><strong>减少比较范围</strong>：因为每完成一轮遍历，最大的元素已经在正确的位置，所以下一轮遍历可以忽略已经排序好的部分。</li><li><strong>提前终止</strong>：如果在某一轮遍历中没有发生任何交换，说明数列已经有序，可以提前终止排序过程。</li></ol><h4 id="冒泡排序的算法步骤"><a href="#冒泡排序的算法步骤" class="headerlink" title="冒泡排序的算法步骤"></a>冒泡排序的算法步骤</h4><ol><li><strong>初始化</strong>：设定一个标志位<code>swapped</code>，用于检测在一轮遍历中是否发生了交换。</li><li><strong>外层循环</strong>：从第一元素开始，进行<code>n-1</code>轮遍历，其中<code>n</code>是数列的长度。</li><li><strong>内层循环</strong>：在每一轮遍历中，比较相邻的元素对，并在必要时交换它们。</li><li><strong>检查交换</strong>：如果在某一轮遍历中没有发生任何交换，说明数列已经有序，提前结束排序。</li><li><strong>结束排序</strong>：当所有元素都按照正确的顺序排列后，排序完成。</li></ol><h4 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h4><p>以下是冒泡排序在C++中的实现示例，包含详细注释：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token comment">// 冒泡排序函数</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>    <span class="token comment">// 外层循环控制总共需要进行的轮数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 内层循环进行相邻元素的比较和交换</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果前一个元素大于后一个元素，交换它们</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 标记发生了交换</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果一轮遍历中没有发生交换，提前结束排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 辅助函数，用于打印数组</span><span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 主函数示例</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序前的数组: "</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的数组: "</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出结果：</strong></p><pre class="line-numbers language-none"><code class="language-none">排序前的数组: 64 34 25 12 22 11 90 排序后的数组: 11 12 22 25 34 64 90 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="时间和空间复杂度分析"><a href="#时间和空间复杂度分析" class="headerlink" title="时间和空间复杂度分析"></a>时间和空间复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：</p><ul><li>最佳情况：当数组已经有序时，只需进行一次遍历，没有交换操作，时间复杂度为<code>O(n)</code>。</li><li>平均情况：<code>O(n²)</code>，需要进行多次遍历和交换。</li><li>最坏情况：当数组是逆序排列时，需要进行最多的比较和交换，时间复杂度为<code>O(n²)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(1)</code>，冒泡排序是原地排序算法，不需要额外的存储空间。</p></li><li><p><strong>稳定性</strong>：冒泡排序是稳定的排序算法，即相等的元素在排序后相对位置不变。</p></li></ul><h4 id="冒泡排序的优化"><a href="#冒泡排序的优化" class="headerlink" title="冒泡排序的优化"></a>冒泡排序的优化</h4><ol><li><strong>提前终止优化</strong>：如上代码所示，通过设置<code>swapped</code>标志位，可以在一轮遍历中没有发生任何交换时，提前终止排序，减少不必要的比较和交换。</li><li><strong>记录最后交换的位置</strong>：在某些实现中，可以记录最后一次交换的位置，以此来减少下一轮需要比较的元素数量，因为交换之后的元素已经有序。</li></ol><p>优化后的代码示例如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token comment">// 优化后的冒泡排序函数</span><span class="token keyword">void</span> <span class="token function">optimizedBubbleSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> newn<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        newn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                newn <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        n <span class="token operator">=</span> newn<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>newn <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 辅助函数和主函数同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种优化方式可以在某些情况下进一步减少比较次数，提高排序效率。</p><h4 id="示例讲解"><a href="#示例讲解" class="headerlink" title="示例讲解"></a>示例讲解</h4><p>假设有一个数组<code>[5, 1, 4, 2, 8]</code>，我们使用冒泡排序进行排序：</p><p><strong>第一轮遍历：</strong></p><ul><li>比较5和1，5 &gt; 1，交换，数组变为<code>[1, 5, 4, 2, 8]</code></li><li>比较5和4，5 &gt; 4，交换，数组变为<code>[1, 4, 5, 2, 8]</code></li><li>比较5和2，5 &gt; 2，交换，数组变为<code>[1, 4, 2, 5, 8]</code></li><li>比较5和8，5 &lt; 8，不交换</li><li>第一轮结束，最大的元素8已在最后</li></ul><p><strong>第二轮遍历：</strong></p><ul><li>比较1和4，1 &lt; 4，不交换</li><li>比较4和2，4 &gt; 2，交换，数组变为<code>[1, 2, 4, 5, 8]</code></li><li>比较4和5，4 &lt; 5，不交换</li><li>比较5和8，5 &lt; 8，不交换</li><li>第二轮结束，次大的元素5已在倒数第二位置</li></ul><p><strong>第三轮遍历：</strong></p><ul><li>比较1和2，1 &lt; 2，不交换</li><li>比较2和4，2 &lt; 4，不交换</li><li>比较4和5，4 &lt; 5，不交换</li><li>由于这一轮没有发生任何交换，排序提前结束</li></ul><p>最终排序后的数组为<code>[1, 2, 4, 5, 8]</code>。</p><h4 id="冒泡排序的应用和局限性"><a href="#冒泡排序的应用和局限性" class="headerlink" title="冒泡排序的应用和局限性"></a>冒泡排序的应用和局限性</h4><p><strong>应用场景</strong>：</p><ul><li>冒泡排序由于实现简单，适合用于教学和理解基本排序概念。</li><li>当数据量较小时，冒泡排序的性能尚可。</li></ul><p><strong>局限性</strong>：</p><ul><li>对于大规模数据，冒泡排序效率较低，不适合实际应用。</li><li>时间复杂度为<code>O(n²)</code>，在数据量增大时，性能急剧下降。</li></ul><h4 id="与其他排序算法的比较"><a href="#与其他排序算法的比较" class="headerlink" title="与其他排序算法的比较"></a>与其他排序算法的比较</h4><ul><li><p><strong>选择排序（Selection Sort）</strong>：</p><ul><li>时间复杂度同为<code>O(n²)</code>，但选择排序在数据交换次数上比冒泡排序少。</li><li>冒泡排序稳定，选择排序通常是不稳定的。</li></ul></li><li><p><strong>插入排序（Insertion Sort）</strong>：</p><ul><li>时间复杂度同为<code>O(n²)</code>，但插入排序在部分有序数据上表现较好。</li><li>插入排序也是稳定的。</li></ul></li><li><p><strong>快速排序（Quick Sort）</strong>、<strong>归并排序（Merge Sort）</strong>、<strong>堆排序（Heap Sort）</strong> 等高级排序算法，时间复杂度为<code>O(n log n)</code>，在处理大规模数据时效率远高于冒泡排序。</p></li></ul><h3 id="深入理解C-中的冒泡排序及其在CSP-J比赛中的应用"><a href="#深入理解C-中的冒泡排序及其在CSP-J比赛中的应用" class="headerlink" title="深入理解C++中的冒泡排序及其在CSP-J比赛中的应用"></a>深入理解C++中的冒泡排序及其在CSP-J比赛中的应用</h3><p>冒泡排序（Bubble Sort）作为最基础的排序算法之一，在计算机科学的学习过程中扮演着重要角色。虽然在实际应用中由于其效率较低而不常用，但在编程竞赛（如CSP-J）中，冒泡排序仍然有其独特的价值，特别是在处理特定类型的问题时。本文将对冒泡排序进行更为详细和深入的讲解，并结合CSP-J历年真题中的实例，帮助您全面掌握这一知识点。</p><hr><h3 id="一、冒泡排序的深入解析"><a href="#一、冒泡排序的深入解析" class="headerlink" title="一、冒泡排序的深入解析"></a>一、冒泡排序的深入解析</h3><h4 id="1-冒泡排序的核心思想"><a href="#1-冒泡排序的核心思想" class="headerlink" title="1. 冒泡排序的核心思想"></a>1. 冒泡排序的核心思想</h4><p>冒泡排序通过重复地遍历待排序序列，比较相邻元素并在必要时交换它们，使得较大的元素逐步“冒泡”到序列的末端。这个过程重复进行，直到整个序列有序。</p><h4 id="2-算法步骤的详细说明"><a href="#2-算法步骤的详细说明" class="headerlink" title="2. 算法步骤的详细说明"></a>2. 算法步骤的详细说明</h4><ol><li><strong>初始化标志位</strong>：用于检测在某一轮遍历中是否发生了交换操作，以判断是否提前终止排序。</li><li><strong>外层循环（轮数控制）</strong>：通常需要进行<code>n-1</code>轮遍历，其中<code>n</code>是序列的长度。每一轮遍历确保至少一个元素被放到正确的位置。</li><li><strong>内层循环（元素比较与交换）</strong>：在每一轮遍历中，比较相邻的元素对，如果前一个元素大于后一个元素，则交换它们。</li><li><strong>优化策略</strong>：<ul><li><strong>提前终止</strong>：如果在某一轮遍历中没有发生任何交换，说明序列已经有序，可以提前结束排序。</li><li><strong>记录最后交换位置</strong>：通过记录最后一次交换的位置，减少下一轮需要比较的元素数量。</li></ul></li></ol><h4 id="3-C-中的冒泡排序实现"><a href="#3-C-中的冒泡排序实现" class="headerlink" title="3. C++中的冒泡排序实现"></a>3. C++中的冒泡排序实现</h4><p>以下是一个更为详尽的C++实现，包括额外的优化和错误处理：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span> <span class="token comment">// 用于格式化输出</span></span><span class="token comment">// 冒泡排序函数，包含优化</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>    <span class="token comment">// 外层循环，控制遍历轮数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 内层循环，比较并交换相邻元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果没有发生交换，序列已排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 辅助函数：打印数组</span><span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 主函数示例</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序前的数组: "</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的数组: "</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出结果：</strong></p><pre class="line-numbers language-none"><code class="language-none">排序前的数组: 64 34 25 12 22 11 90 排序后的数组: 11 12 22 25 34 64 90 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-冒泡排序的时间与空间复杂度"><a href="#4-冒泡排序的时间与空间复杂度" class="headerlink" title="4. 冒泡排序的时间与空间复杂度"></a>4. 冒泡排序的时间与空间复杂度</h4><ul><li><p><strong>时间复杂度</strong>：</p><ul><li>最佳情况：<code>O(n)</code>（当序列已排序，仅需一次遍历，无交换）</li><li>平均情况：<code>O(n²)</code></li><li>最坏情况：<code>O(n²)</code></li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(1)</code>（原地排序，不需要额外的存储空间）</p></li><li><p><strong>稳定性</strong>：冒泡排序是稳定的排序算法，即相等的元素在排序后相对位置不变。</p></li></ul><hr><h3 id="二、冒泡排序在CSP-J比赛中的应用"><a href="#二、冒泡排序在CSP-J比赛中的应用" class="headerlink" title="二、冒泡排序在CSP-J比赛中的应用"></a>二、冒泡排序在CSP-J比赛中的应用</h3><p>在CSP-J比赛中，虽然冒泡排序本身由于时间复杂度较高不常用于处理大规模数据，但其概念和变种在特定类型的问题中仍然非常实用。以下将结合CSP-J历年真题，分析冒泡排序的应用场景及解题思路。</p><h4 id="1-常见应用场景"><a href="#1-常见应用场景" class="headerlink" title="1. 常见应用场景"></a>1. 常见应用场景</h4><ul><li><strong>小规模数据排序</strong>：当数据量较小时，冒泡排序的低常数因子和简单实现使其成为快速解决问题的选择。</li><li><strong>检测序列有序性</strong>：通过冒泡排序的优化可以快速检测序列是否已经有序，适用于需要判断序列特性的题目。</li><li><strong>排序相关的模拟问题</strong>：一些题目可能要求模拟排序过程，记录交换次数或特定排序步骤，此时冒泡排序的逐步交换过程非常适合。</li></ul><h4 id="2-CSP-J历年真题中的相关问题示例"><a href="#2-CSP-J历年真题中的相关问题示例" class="headerlink" title="2. CSP-J历年真题中的相关问题示例"></a>2. CSP-J历年真题中的相关问题示例</h4><p><strong>示例题目1：交换排序次数</strong></p><p><em>题目描述</em>：<br>给定一个长度为<code>n</code>的整数序列，计算通过冒泡排序将其排序为升序所需的交换次数。</p><p><em>输入</em>：<br>第一行包含一个整数<code>n</code>（1 ≤ n ≤ 1000）。<br>第二行包含<code>n</code>个整数，表示序列中的元素。</p><p><em>输出</em>：<br>一个整数，表示冒泡排序所需的交换次数。</p><p><em>示例输入</em>：</p><pre class="line-numbers language-none"><code class="language-none">55 1 4 2 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>示例输出</em>：</p><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>解题思路</em>：<br>通过模拟冒泡排序的过程，记录每次交换的次数。</p><p><em>实现代码</em>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span> arr<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> swapCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapCount<span class="token operator">++</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> swapCount<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>解析</em>：</p><ul><li>模拟冒泡排序，遍历每一轮，比较并交换相邻元素。</li><li>每次发生交换时，<code>swapCount</code>递增。</li><li>最终输出交换次数。</li></ul><p><strong>示例题目2：优化冒泡排序后的最后交换位置</strong></p><p><em>题目描述</em>：<br>给定一个长度为<code>n</code>的整数序列，使用记录最后交换位置的优化版冒泡排序进行排序。输出每一轮遍历结束后最后交换的位置。</p><p><em>输入</em>：<br>第一行包含一个整数<code>n</code>（1 ≤ n ≤ 1000）。<br>第二行包含<code>n</code>个整数，表示序列中的元素。</p><p><em>输出</em>：<br>每一轮遍历结束后，输出最后交换的位置（从1开始计数），以空格分隔。</p><p><em>示例输入</em>：</p><pre class="line-numbers language-none"><code class="language-none">55 1 4 2 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>示例输出</em>：</p><pre class="line-numbers language-none"><code class="language-none">4 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>解题思路</em>：<br>使用优化后的冒泡排序，记录每一轮交换的最后位置，并输出。</p><p><em>实现代码</em>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span> arr<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> lastSwapPos<span class="token punctuation">;</span>    <span class="token keyword">int</span> nEnd <span class="token operator">=</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lastPositions<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nEnd <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lastSwapPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nEnd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lastSwapPos <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastSwapPos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        lastPositions<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lastSwapPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        nEnd <span class="token operator">=</span> lastSwapPos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lastPositions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> lastPositions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>解析</em>：</p><ul><li>记录每轮最后一次交换的位置<code>lastSwapPos</code>。</li><li>更新下一轮遍历的结束位置<code>nEnd</code>为<code>lastSwapPos</code>，减少不必要的比较。</li><li>将每轮的<code>lastSwapPos</code>记录并最终输出。</li></ul><p><strong>示例题目3：逆序对的计算</strong></p><p><em>题目描述</em>：<br>给定一个长度为<code>n</code>的整数序列，计算序列中的逆序对数（即对于所有<code>i &lt; j</code>，满足<code>arr[i] &gt; arr[j]</code>的对数）。使用冒泡排序的交换次数来计算逆序对数。</p><p><em>输入</em>：<br>第一行包含一个整数<code>n</code>（1 ≤ n ≤ 1000）。<br>第二行包含<code>n</code>个整数，表示序列中的元素。</p><p><em>输出</em>：<br>一个整数，表示逆序对的总数。</p><p><em>示例输入</em>：</p><pre class="line-numbers language-none"><code class="language-none">52 3 8 6 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>示例输出</em>：</p><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>解题思路</em>：<br>冒泡排序在排序过程中交换次数等同于逆序对数。通过模拟冒泡排序，统计交换次数即可。</p><p><em>实现代码</em>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span> arr<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> inverseCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                inverseCount<span class="token operator">++</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> inverseCount<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>解析</em>：</p><ul><li>模拟冒泡排序，统计每次交换时逆序对的数量。</li><li>最终输出逆序对总数。</li></ul><hr><h3 id="三、冒泡排序的变种与优化"><a href="#三、冒泡排序的变种与优化" class="headerlink" title="三、冒泡排序的变种与优化"></a>三、冒泡排序的变种与优化</h3><p>在CSP-J比赛中，除了标准的冒泡排序，常见的变种和优化也是考察的重点。以下介绍几种常见的优化策略及其实现。</p><h4 id="1-鸡尾酒排序（Cocktail-Shaker-Sort）"><a href="#1-鸡尾酒排序（Cocktail-Shaker-Sort）" class="headerlink" title="1. 鸡尾酒排序（Cocktail Shaker Sort）"></a>1. 鸡尾酒排序（Cocktail Shaker Sort）</h4><p>鸡尾酒排序是冒泡排序的一种双向变体，能够在每一轮遍历中同时从左向右和从右向左进行元素比较和交换，减少了需要遍历的轮数。</p><p><em>实现代码</em>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">void</span> <span class="token function">cocktailShakerSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>swapped<span class="token punctuation">)</span><span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 从左到右进行比较</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// 从右到左进行比较</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> start<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        start<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">cocktailShakerSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> num <span class="token operator">:</span> data<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出结果</strong>：</p><pre class="line-numbers language-none"><code class="language-none">0 1 2 3 4 5 8 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>解析</em>：</p><ul><li>在每一轮中，先从左向右进行比较和交换，然后从右向左进行比较和交换。</li><li>这种方式可以同时将较大的元素“冒泡”到右端和较小的元素“沉淀”到左端，减少了需要的遍历轮数。</li></ul><h4 id="2-冒泡排序与双指针技术结合"><a href="#2-冒泡排序与双指针技术结合" class="headerlink" title="2. 冒泡排序与双指针技术结合"></a>2. 冒泡排序与双指针技术结合</h4><p>在某些竞赛题目中，可以将冒泡排序与双指针技术结合，用于解决复杂的排序相关问题。例如，寻找满足特定条件的元素对等。</p><p><strong>示例题目4：找到数组中第K次交换的元素对</strong></p><p><em>题目描述</em>：<br>给定一个长度为<code>n</code>的整数序列和一个整数<code>K</code>，在使用冒泡排序对序列进行排序的过程中，找到第<code>K</code>次发生交换的元素对。如果交换次数不足<code>K</code>次，输出<code>-1 -1</code>。</p><p><em>输入</em>：<br>第一行包含两个整数<code>n</code>和<code>K</code>（1 ≤ n ≤ 1000，1 ≤ K ≤ 10^6）。<br>第二行包含<code>n</code>个整数，表示序列中的元素。</p><p><em>输出</em>：<br>两个整数，表示第<code>K</code>次交换的元素对（从小到大排列）。如果交换次数不足，输出<code>-1 -1</code>。</p><p><em>示例输入</em>：</p><pre class="line-numbers language-none"><code class="language-none">5 35 1 4 2 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>示例输出</em>：</p><pre class="line-numbers language-none"><code class="language-none">4 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>解题思路</em>：</p><ul><li>模拟冒泡排序，记录每次交换的元素对。</li><li>当交换次数达到<code>K</code>时，输出对应的元素对。</li><li>若遍历结束后仍未达到<code>K</code>，输出<code>-1 -1</code>。</li></ul><p><em>实现代码</em>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> K<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> K<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span> arr<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> swapCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>    <span class="token keyword">bool</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>found<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>found<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>swapCount <span class="token operator">==</span> K<span class="token punctuation">)</span><span class="token punctuation">{</span>                    first <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    second <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> second<span class="token punctuation">;</span>    <span class="token keyword">else</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1 -1"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>解析</em>：</p><ul><li>使用<code>swapCount</code>记录交换次数。</li><li>在每次交换后，检查是否达到了第<code>K</code>次交换。</li><li>如果达到了，记录并输出交换的元素对；否则，继续排序。</li><li>最终根据是否找到输出相应结果。</li></ul><hr><h3 id="四、冒泡排序的实际应用与局限性"><a href="#四、冒泡排序的实际应用与局限性" class="headerlink" title="四、冒泡排序的实际应用与局限性"></a>四、冒泡排序的实际应用与局限性</h3><h4 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h4><ul><li><strong>教育与学习</strong>：冒泡排序由于其直观性，常用于教学和学习排序算法的基本概念。</li><li><strong>小规模数据</strong>：在数据量较小的情况下，冒泡排序的低常数因子使其成为一个简单有效的选择。</li><li><strong>特殊问题模拟</strong>：某些竞赛问题要求模拟排序过程，统计交换次数或特定排序步骤时，冒泡排序非常适用。</li></ul><h4 id="2-局限性"><a href="#2-局限性" class="headerlink" title="2. 局限性"></a>2. 局限性</h4><ul><li><strong>效率低下</strong>：冒泡排序的时间复杂度为<code>O(n²)</code>，在处理大规模数据时效率较低。</li><li><strong>不适合实际大规模应用</strong>：在实际应用中，通常使用更高效的排序算法，如快速排序、归并排序等。</li><li><strong>依赖数据特性</strong>：尽管有优化，但在最坏情况下，冒泡排序仍然需要<code>O(n²)</code>的时间，无法利用数据的某些特性进行优化。</li></ul><hr><h3 id="五、与其他排序算法的比较"><a href="#五、与其他排序算法的比较" class="headerlink" title="五、与其他排序算法的比较"></a>五、与其他排序算法的比较</h3><p>在CSP-J比赛中，选择合适的排序算法至关重要。以下是冒泡排序与其他常见排序算法的对比：</p><table><thead><tr><th>排序算法</th><th>时间复杂度</th><th>空间复杂度</th><th>稳定性</th><th>适用场景</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n²)</td><td>O(1)</td><td>稳定</td><td>小规模数据、教学、特定模拟问题</td></tr><tr><td>选择排序</td><td>O(n²)</td><td>O(1)</td><td>不稳定</td><td>需要减少交换次数的场景</td></tr><tr><td>插入排序</td><td>O(n²)</td><td>O(1)</td><td>稳定</td><td>部分有序数据、在线排序</td></tr><tr><td>快速排序</td><td>O(n log n)</td><td>O(log n)</td><td>不稳定</td><td>大规模数据、需要高效排序的场景</td></tr><tr><td>归并排序</td><td>O(n log n)</td><td>O(n)</td><td>稳定</td><td>需要稳定排序、处理链表等非连续存储的数据</td></tr><tr><td>堆排序</td><td>O(n log n)</td><td>O(1)</td><td>不稳定</td><td>不需要稳定排序、需要原地排序的大规模数据</td></tr><tr><td>希尔排序</td><td>介于O(n) ~ O(n²)</td><td>O(1)</td><td>不稳定</td><td>希尔排序通过分组间隔减少交换次数，适用于中等规模数据</td></tr></tbody></table><p><strong>选择排序与冒泡排序对比</strong>：</p><ul><li><strong>交换次数</strong>：选择排序在最坏情况下需要<code>O(n)</code>次交换，而冒泡排序在最坏情况下需要<code>O(n²)</code>次交换。</li><li><strong>稳定性</strong>：冒泡排序是稳定的，而选择排序通常是不稳定的（但可以通过改进实现稳定性）。</li></ul><p><strong>插入排序的优势</strong>：</p><ul><li>在部分有序的数据上，插入排序的效率较高，时间复杂度可接近<code>O(n)</code>。</li><li>插入排序也是稳定的，适用于需要保持相对顺序的场景。</li></ul><p><strong>高级排序算法的优势</strong>：</p><ul><li>快速排序、归并排序等高级排序算法在处理大规模数据时表现优异，时间复杂度为<code>O(n log n)</code>。</li><li>这些算法在编程竞赛中应用广泛，尤其是在处理需要高效排序的复杂问题时。</li></ul><hr><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>冒泡排序作为基础排序算法，虽然在效率上无法与高级排序算法相比，但其简单直观的实现和易于理解的工作原理使其成为学习排序算法的理想选择。在CSP-J等编程竞赛中，冒泡排序不仅是理解排序算法的入门工具，还在一些特定类型的问题中展现出其独特的应用价值。</p><p>通过深入理解冒泡排序的原理、优化方法以及在实际竞赛中的应用，您将能够在竞赛中更灵活地选择和应用排序算法，提升解决问题的能力。尽管冒泡排序在实际应用中局限较多，但其作为计算机科学基础知识的一部分，仍具有不可替代的重要性。</p><hr><h3 id="附录：更多示例题目与练习"><a href="#附录：更多示例题目与练习" class="headerlink" title="附录：更多示例题目与练习"></a>附录：更多示例题目与练习</h3><p><strong>示例题目5：冒泡排序的逆序数区间</strong></p><p><em>题目描述</em>：<br>给定一个长度为<code>n</code>的整数序列，统计在冒泡排序过程中，每一轮遍历结束后，当前序列的逆序数。</p><p><em>输入</em>：<br>第一行包含一个整数<code>n</code>（1 ≤ n ≤ 1000）。<br>第二行包含<code>n</code>个整数，表示序列中的元素。</p><p><em>输出</em>：<br>每一轮遍历结束后，输出当前序列的逆序数，以空格分隔。</p><p><em>示例输入</em>：</p><pre class="line-numbers language-none"><code class="language-none">55 1 4 2 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>示例输出</em>：</p><pre class="line-numbers language-none"><code class="language-none">3 1 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>解题思路</em>：</p><ul><li>在每一轮冒泡排序结束后，计算当前序列的逆序数。</li><li>使用双重循环计算逆序数。</li></ul><p><em>实现代码</em>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token comment">// 函数：计算逆序数</span><span class="token keyword">int</span> <span class="token function">countInversions</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> inversions <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> inversions<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> inversions<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span> arr<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> inversionsPerRound<span class="token punctuation">;</span>    <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> currentInversions <span class="token operator">=</span> <span class="token function">countInversions</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        inversionsPerRound<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>currentInversions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>inversionsPerRound<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> inversionsPerRound<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>解析</em>：</p><ul><li>每完成一轮冒泡排序，调用<code>countInversions</code>函数计算当前序列的逆序数，并记录。</li><li>最终输出每一轮的逆序数。</li></ul><p><strong>练习题目</strong>：</p><ol><li><strong>冒泡排序的比较次数</strong>：给定一个长度为<code>n</code>的整数序列，计算在冒泡排序过程中，比较的总次数。</li><li><strong>冒泡排序的最大交换距离</strong>：在冒泡排序过程中，找到所有交换操作中，元素移动的最大距离。</li><li><strong>逆序区间排序</strong>：给定一个长度为<code>n</code>的整数序列，找出最小的一个连续子序列，使得仅排序该子序列后，整个序列变为有序。使用冒泡排序的思想进行求解。</li></ol><p>通过这些练习，您可以进一步巩固对冒泡排序及其变种的理解，提升在编程竞赛中的实战能力。</p>]]></content>
      
      
      <categories>
          
          <category> Bubble Sort </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sort </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中位运算讲解</title>
      <link href="/c-bitset.html"/>
      <url>/c-bitset.html</url>
      
        <content type="html"><![CDATA[<img src="/c-bitset/1.png" class="" title="示意图 width=400"><p>位运算是一种直接对二进制位进行操作的运算。位运算符在C++中非常高效，可以用于底层编程、图形处理、网络编程等场景。以下是C++中常见的位运算符及其使用方法。</p><h3 id="常见的位运算符"><a href="#常见的位运算符" class="headerlink" title="常见的位运算符"></a>常见的位运算符</h3><ol><li><p><strong>按位与运算符 (<code>&amp;</code>)</strong></p><ul><li>每个位进行与操作，只有两个操作数对应位都为1时，结果位才为1。</li></ul></li><li><p><strong>按位或运算符 (<code>|</code>)</strong></p><ul><li>每个位进行或操作，两个操作数中只要有一个对应位为1，结果位就为1。</li></ul></li><li><p><strong>按位异或运算符 (<code>^</code>)</strong></p><ul><li>每个位进行异或操作，当两个操作数对应位不同时，结果位为1。</li></ul></li><li><p><strong>按位取反运算符 (<code>~</code>)</strong></p><ul><li>对每个位取反，0变1，1变0。</li></ul></li><li><p><strong>左移运算符 (<code>&lt;&lt;</code>)</strong></p><ul><li>将操作数的所有位左移指定的位数，右边用0填补。</li></ul></li><li><p><strong>右移运算符 (<code>&gt;&gt;</code>)</strong></p><ul><li>将操作数的所有位右移指定的位数，左边用0填补（对于无符号数），或用符号位填补（对于有符号数）。</li></ul></li></ol><h3 id="简单易懂的程序例子"><a href="#简单易懂的程序例子" class="headerlink" title="简单易懂的程序例子"></a>简单易懂的程序例子</h3><p>下面是一些简单的C++程序例子，演示每种位运算符的使用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span> <span class="token comment">// 添加这个头文件以使用 bitset</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0101</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0011</span>    <span class="token comment">// 按位与运算</span>    <span class="token keyword">int</span> andResult <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &amp; b = "</span> <span class="token operator">&lt;&lt;</span> andResult <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>andResult<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 按位或运算</span>    <span class="token keyword">int</span> orResult <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a | b = "</span> <span class="token operator">&lt;&lt;</span> orResult <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>orResult<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 按位异或运算</span>    <span class="token keyword">int</span> xorResult <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a ^ b = "</span> <span class="token operator">&lt;&lt;</span> xorResult <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>xorResult<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 按位取反运算</span>    <span class="token keyword">int</span> notResult <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~a = "</span> <span class="token operator">&lt;&lt;</span> notResult <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>notResult<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 左移运算</span>    <span class="token keyword">int</span> leftShiftResult <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &lt;&lt; 1 = "</span> <span class="token operator">&lt;&lt;</span> leftShiftResult <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>leftShiftResult<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 右移运算</span>    <span class="token keyword">int</span> rightShiftResult <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &gt;&gt; 1 = "</span> <span class="token operator">&lt;&lt;</span> rightShiftResult <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>rightShiftResult<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果说明"><a href="#结果说明" class="headerlink" title="结果说明"></a>结果说明</h3><ol><li><p><strong>按位与运算 (<code>&amp;</code>)</strong></p><ul><li><code>a &amp; b</code> 结果是1（0000 0001）<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0000</span> <span class="token number">0101</span><span class="token operator">&amp;</span> <span class="token number">0000</span> <span class="token number">0011</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">0001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>按位或运算 (<code>|</code>)</strong></p><ul><li><code>a | b</code> 结果是7（0000 0111）<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0000</span> <span class="token number">0101</span><span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0011</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">0111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>按位异或运算 (<code>^</code>)</strong></p><ul><li><code>a ^ b</code> 结果是6（0000 0110）<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0000</span> <span class="token number">0101</span><span class="token operator">^</span> <span class="token number">0000</span> <span class="token number">0011</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">0110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>按位取反运算 (<code>~</code>)</strong></p><ul><li><code>~a</code> 结果是-6（1111 1010），这里注意负数的表示是补码形式<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">~</span><span class="token number">0000</span> <span class="token number">0101</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">1111</span> <span class="token number">1010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>左移运算 (<code>&lt;&lt;</code>)</strong></p><ul><li><code>a &lt;&lt; 1</code> 结果是10（0000 1010）<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0000</span> <span class="token number">0101</span><span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">1010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>右移运算 (<code>&gt;&gt;</code>)</strong></p><ul><li><code>a &gt;&gt; 1</code> 结果是2（0000 0010）<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0000</span> <span class="token number">0100</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">0010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><strong>符号扩展</strong>：对于有符号整数，右移运算时，高位用符号位填充，这叫做算术右移；而对于无符号整数，高位用0填充，这叫做逻辑右移。</li><li><strong>溢出</strong>：左移运算可能会导致溢出，如果移出的位中包含1，那么结果可能会变得不可预测。</li></ol><h3 id="按位与运算符"><a href="#按位与运算符" class="headerlink" title="按位与运算符 (&amp;)"></a>按位与运算符 (<code>&amp;</code>)</h3><p><strong>原理</strong>：对每个位进行与操作，只有两个操作数对应位都为1时，结果位才为1。</p><p><strong>使用场景</strong>：常用于掩码操作，清除某些位或者保留某些位。</p><p><strong>例子</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0110</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0011</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &amp; b = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">a &amp; b = 2 (二进制: 00000010)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="按位或运算符"><a href="#按位或运算符" class="headerlink" title="按位或运算符 (|)"></a>按位或运算符 (<code>|</code>)</h3><p><strong>原理</strong>：对每个位进行或操作，只要两个操作数中有一个对应位为1，结果位就为1。</p><p><strong>使用场景</strong>：常用于设置某些位为1。</p><p><strong>例子</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0110</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0011</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a | b = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">a | b = 7 (二进制: 00000111)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="按位异或运算符"><a href="#按位异或运算符" class="headerlink" title="按位异或运算符 (^)"></a>按位异或运算符 (<code>^</code>)</h3><p><strong>原理</strong>：对每个位进行异或操作，当两个操作数对应位不同时，结果位为1。</p><p><strong>使用场景</strong>：常用于加密和解密操作、交换两个变量的值而不使用临时变量。</p><p><strong>例子</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0110</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0011</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a ^ b = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">a ^ b = 5 (二进制: 00000101)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="按位取反运算符"><a href="#按位取反运算符" class="headerlink" title="按位取反运算符 (~)"></a>按位取反运算符 (<code>~</code>)</h3><p><strong>原理</strong>：对每个位取反，0变1，1变0。</p><p><strong>使用场景</strong>：常用于生成某个值的补码，位图反转。</p><p><strong>例子</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0110</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~a = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">~a = -7 (二进制: 11111001)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="左移运算符"><a href="#左移运算符" class="headerlink" title="左移运算符 (<<)"></a>左移运算符 (<code>&lt;&lt;</code>)</h3><p><strong>原理</strong>：将操作数的所有位左移指定的位数，右边用0填补。相当于乘以2的n次方。</p><p><strong>使用场景</strong>：常用于快速乘以2的幂次。</p><p><strong>例子</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0110</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &lt;&lt; 2 = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">a &lt;&lt; 2 = 24 (二进制: 00011000)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="右移运算符"><a href="#右移运算符" class="headerlink" title="右移运算符 (>>)"></a>右移运算符 (<code>&gt;&gt;</code>)</h3><p><strong>原理</strong>：将操作数的所有位右移指定的位数，左边用0填补（无符号数）或符号位填补（有符号数）。相当于除以2的n次方。</p><p><strong>使用场景</strong>：常用于快速除以2的幂次。</p><p><strong>例子</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0000 0110</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &gt;&gt; 1 = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">a &gt;&gt; 1 = 3 (二进制: 00000011)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="进阶使用案例"><a href="#进阶使用案例" class="headerlink" title="进阶使用案例"></a>进阶使用案例</h3><h4 id="掩码操作"><a href="#掩码操作" class="headerlink" title="掩码操作"></a>掩码操作</h4><p>假设我们要从一个整数中提取某些位，比如提取第2到第4位（从0开始计数）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制：0001 1101</span>    <span class="token comment">// 掩码：0001 1100</span>    <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0b00011100</span><span class="token punctuation">;</span>    <span class="token comment">// 提取第2到第4位</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"提取第2到第4位 = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" (二进制: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">提取第2到第4位 = 7 (二进制: 00000111)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h4><p>使用异或运算符可以交换两个变量的值而不使用临时变量。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换前: a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换后: a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">交换前: a = 5, b = 3交换后: a = 3, b = 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>掩码操作在编程中有很多应用场景，特别是在需要对数据的特定位进行操作时，掩码是非常有用的工具。以下是掩码操作的一些主要应用场景：</p><h3 id="1-位字段（Bit-Fields）操作"><a href="#1-位字段（Bit-Fields）操作" class="headerlink" title="1. 位字段（Bit Fields）操作"></a>1. 位字段（Bit Fields）操作</h3><p>在某些低级编程场景中，数据结构中的字段可能被压缩到单个位或几个比特中。掩码可以用来提取、设置或清除这些位字段。</p><p><strong>示例</strong>：假设我们有一个8位的状态字节，其中第2位表示某个设备的电源状态，第3位表示设备的连接状态。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">uint8_t</span> status <span class="token operator">=</span> <span class="token number">0b00001100</span><span class="token punctuation">;</span> <span class="token comment">// 电源开，设备已连接</span>    <span class="token comment">// 提取电源状态</span>    <span class="token keyword">uint8_t</span> powerMask <span class="token operator">=</span> <span class="token number">0b00000100</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isPowerOn <span class="token operator">=</span> status <span class="token operator">&amp;</span> powerMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"电源状态: "</span> <span class="token operator">&lt;&lt;</span> isPowerOn <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 提取连接状态</span>    <span class="token keyword">uint8_t</span> connectionMask <span class="token operator">=</span> <span class="token number">0b00001000</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isConnected <span class="token operator">=</span> status <span class="token operator">&amp;</span> connectionMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"连接状态: "</span> <span class="token operator">&lt;&lt;</span> isConnected <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-权限控制"><a href="#2-权限控制" class="headerlink" title="2. 权限控制"></a>2. 权限控制</h3><p>在权限控制系统中，不同权限可以被表示为一个位图（bitmap），每个位代表一个特定的权限。掩码操作可以用来设置或检查这些权限。</p><p><strong>示例</strong>：假设我们有一个用户权限字节，其中不同的位表示不同的权限。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">uint8_t</span> permissions <span class="token operator">=</span> <span class="token number">0b00000101</span><span class="token punctuation">;</span> <span class="token comment">// 读和执行权限</span>    <span class="token comment">// 检查写权限</span>    <span class="token keyword">uint8_t</span> writeMask <span class="token operator">=</span> <span class="token number">0b00000010</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> canWrite <span class="token operator">=</span> permissions <span class="token operator">&amp;</span> writeMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"写权限: "</span> <span class="token operator">&lt;&lt;</span> canWrite <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 添加写权限</span>    permissions <span class="token operator">|=</span> writeMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"添加写权限后: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-状态标志"><a href="#3-状态标志" class="headerlink" title="3. 状态标志"></a>3. 状态标志</h3><p>在程序中，多个状态标志可以被压缩到一个整数中。掩码操作可以用来检查、设置或清除这些状态标志。</p><p><strong>示例</strong>：假设我们有一个状态字节，每个位表示一个不同的状态。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">uint8_t</span> status <span class="token operator">=</span> <span class="token number">0b00000001</span><span class="token punctuation">;</span> <span class="token comment">// 初始状态</span>    <span class="token comment">// 检查某个状态</span>    <span class="token keyword">uint8_t</span> specificStatusMask <span class="token operator">=</span> <span class="token number">0b00000001</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isSpecificStatus <span class="token operator">=</span> status <span class="token operator">&amp;</span> specificStatusMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"特定状态: "</span> <span class="token operator">&lt;&lt;</span> isSpecificStatus <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 设置新状态</span>    <span class="token keyword">uint8_t</span> newStatusMask <span class="token operator">=</span> <span class="token number">0b00000100</span><span class="token punctuation">;</span>    status <span class="token operator">|=</span> newStatusMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"设置新状态后: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数据压缩和解压"><a href="#4-数据压缩和解压" class="headerlink" title="4. 数据压缩和解压"></a>4. 数据压缩和解压</h3><p>掩码操作可以用于数据压缩和解压缩，通过将多个小的数据项压缩到一个较大的数据类型中，从而节省空间。</p><p><strong>示例</strong>：将两个4位的数压缩到一个8位的字节中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">uint8_t</span> highNibble <span class="token operator">=</span> <span class="token number">0b00001111</span><span class="token punctuation">;</span> <span class="token comment">// 高4位</span>    <span class="token keyword">uint8_t</span> lowNibble <span class="token operator">=</span> <span class="token number">0b00000101</span><span class="token punctuation">;</span>  <span class="token comment">// 低4位</span>    <span class="token comment">// 将两个4位数合并到一个8位数中</span>    <span class="token keyword">uint8_t</span> combined <span class="token operator">=</span> <span class="token punctuation">(</span>highNibble <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>lowNibble <span class="token operator">&amp;</span> <span class="token number">0b00001111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"合并后的8位数: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>combined<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-网络数据包处理"><a href="#5-网络数据包处理" class="headerlink" title="5. 网络数据包处理"></a>5. 网络数据包处理</h3><p>在网络编程中，数据包的头部通常使用位字段来表示各种标志和长度。掩码操作可以用来解析这些头部信息。</p><p><strong>示例</strong>：解析IP包头中的某些字段。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">uint8_t</span> ipHeader <span class="token operator">=</span> <span class="token number">0b01010100</span><span class="token punctuation">;</span> <span class="token comment">// 示例IP头部字节</span>    <span class="token comment">// 提取版本字段（高4位）</span>    <span class="token keyword">uint8_t</span> versionMask <span class="token operator">=</span> <span class="token number">0b11110000</span><span class="token punctuation">;</span>    <span class="token keyword">uint8_t</span> version <span class="token operator">=</span> <span class="token punctuation">(</span>ipHeader <span class="token operator">&amp;</span> versionMask<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IP版本: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">+</span>version <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 提取IHL字段（低4位）</span>    <span class="token keyword">uint8_t</span> ihlMask <span class="token operator">=</span> <span class="token number">0b00001111</span><span class="token punctuation">;</span>    <span class="token keyword">uint8_t</span> ihl <span class="token operator">=</span> ipHeader <span class="token operator">&amp;</span> ihlMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IHL: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">+</span>ihl <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-硬件寄存器操作"><a href="#6-硬件寄存器操作" class="headerlink" title="6. 硬件寄存器操作"></a>6. 硬件寄存器操作</h3><p>在嵌入式编程中，硬件寄存器通常以位字段的形式定义。掩码操作可以用来读取和设置这些寄存器的特定位。</p><p><strong>示例</strong>：设置和清除一个控制寄存器的某个位。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">uint8_t</span> controlRegister <span class="token operator">=</span> <span class="token number">0b00000000</span><span class="token punctuation">;</span> <span class="token comment">// 初始寄存器值</span>    <span class="token comment">// 设置使能位（第2位）</span>    <span class="token keyword">uint8_t</span> enableMask <span class="token operator">=</span> <span class="token number">0b00000100</span><span class="token punctuation">;</span>    controlRegister <span class="token operator">|=</span> enableMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"设置使能位后: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>controlRegister<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 清除使能位</span>    controlRegister <span class="token operator">&amp;=</span> <span class="token operator">~</span>enableMask<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"清除使能位后: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>controlRegister<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>掩码操作是一种强大且灵活的工具，可以在多种场景中应用，包括但不限于位字段操作、权限控制、状态标志管理、数据压缩和解压、网络数据包处理以及硬件寄存器操作。通过理解和灵活应用掩码操作，可以有效地处理和操作数据的特定位，优化程序的性能和资源使用。</p>]]></content>
      
      
      <categories>
          
          <category> C++ Bit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务之间共享数据</title>
      <link href="/Sharing-Data-Between-Microservices.html"/>
      <url>/Sharing-Data-Between-Microservices.html</url>
      
        <content type="html"><![CDATA[<img src="/Sharing-Data-Between-Microservices/1.webp" class="" title="示意图 width=400"><p>当我开始使用微服务时，我对“两个服务不能共享数据源”这一常见规则的理解过于字面化了。</p><p>我在互联网上到处都看到这个规定：“你不应该在两个服务之间共享数据库”，这确实有道理。一个服务必须拥有自己的数据，并保留按照自己的意愿更改其模式的自由，而不需要更改其面向外部的API。</p><span id="more"></span><p>但这里有一个重要的微妙之处，直到后来我才理解。为了正确应用这一规则，我们必须区分共享数据源和共享数据。</p><h3 id="为什么共享数据源是不好的"><a href="#为什么共享数据源是不好的" class="headerlink" title="为什么共享数据源是不好的"></a>为什么共享数据源是不好的</h3><p>以一个例子来说明：产品服务应该拥有产品表及其中的所有记录。它们通过API，产品GraphQL查询，以及通过createProduct变异来创建这些记录，将这些数据暴露给其他团队。</p><p>产品服务拥有产品真相的所有权，其他团队绝不应该直接访问这个数据源。如果他们需要数据，他们应该通过他们遵守的合同（API）向产品服务请求。在任何情况下，你都不应该允许直接访问数据库，否则你将失去更改模式的自由。我是通过艰难的方式学到这一点的。</p><h3 id="共享数据是可以的"><a href="#共享数据是可以的" class="headerlink" title="共享数据是可以的"></a>共享数据是可以的</h3><p>事实是，服务需要属于其他服务的数据。</p><p>例如，行程服务将需要访问乘客（来自乘客服务）和司机（来自司机服务）的数据，以提供行程概览。</p><img src="/Sharing-Data-Between-Microservices/2.webp" class="" title="示意图 width=400"><h3 id="一个简单的三个服务架构"><a href="#一个简单的三个服务架构" class="headerlink" title="一个简单的三个服务架构"></a>一个简单的三个服务架构</h3><p>行程服务同步地向每个相应的服务请求其数据，以满足原始请求（getTrips）。我们可以确信数据是新鲜的，请求的客户端将得到数据的强一致性视图（你们中的一些人可能知道我接下来要说什么；））。</p><p>这种同步请求/响应模型在微服务之间传输数据，对于刚开始使用微服务的团队来说，是一个非常自然的心智模型，至少在我的经验中是这样。你需要一些数据，你知道在哪里可以得到它，你向拥有该数据的服务请求，它会按需提供数据给你。</p><p>除此之外，提供新鲜、强一致性的数据对我来说是不言而喻的。强一致性的数据意味着最新的数据，绝对是“最新鲜”的数据，直接来自真相的源头。对我来说，过去提供任何不一致的数据都是不可接受的。你怎么能提供不是最新的数据呢？其他的都会是谎言！</p><p>我们把这些模式当作信条来应用，因为我们没有看到其他的方式，而且最重要的是，这感觉很自然。</p><h3 id="同步和强一致性不扩展"><a href="#同步和强一致性不扩展" class="headerlink" title="同步和强一致性不扩展"></a>同步和强一致性不扩展</h3><p>严重依赖同步请求和强一致性的架构不容易扩展。有时，总是直接去源头获取数据需求是不可行的，或者严格来说并不必要。</p><p>上面提到的行程服务例子一开始看起来不错，但系统很少保持那么简单。新服务诞生了，它们需要从现有服务获取数据。坚持同步请求模式，最终会让你陷入服务之间的混乱请求网。<br>这里有一个场景：</p><img src="/Sharing-Data-Between-Microservices/1.webp" class="" title="示意图 width=400"><h3 id="使用同步请求的示例流程"><a href="#使用同步请求的示例流程" class="headerlink" title="使用同步请求的示例流程"></a>使用同步请求的示例流程</h3><ol><li>一个用户完成了一个挑战，运行了一个completeChallenge变异到挑战服务</li><li>在存储完成后，挑战服务让排行榜服务知道，这样它就可以更新排行榜</li><li>排行榜服务向用户服务请求用户的显示名称和头像，以构建新的排行榜状态</li><li>排行榜服务发现新排行榜状态中有一个新的领导者，并让通知服务知道，这样它就可以通知参与者有一个新的领导者！</li><li>通知服务向用户服务请求该特定排行榜中用户的最新的电子邮件地址，以便发送电子邮件</li></ol><p>用户服务显然是这里的争议点：每个人都以这样或那样的方式依赖它。想象一下，如果这个服务下线了：它也会使大多数其他服务下线。不仅如此，你还得确保始终让这个服务器保持强大，拥有更多的副本和高性能的数据库，以满足需求。</p><p>除此之外，请求链中的每个跳转都为整个请求增加了延迟。每个跳转都有可能增加指数级的延迟，因为依赖链中的每个服务都可能向自己的依赖项发出多个请求。在你意识到之前，你已经达到了难以忍受的延迟水平。</p><p>最后，请求链中的每个额外依赖都增加了整个请求链失败的可能性。在一个涉及五个服务的请求链中，每个服务的SLA为99.9%（大约9小时的年停机时间），复合SLA变为99.5%。这几乎是每年将近2天的停机时间！</p><p>我们可以通过问一个问题来避免所有这些缺点：服务真的需要最新的数据吗？</p><p>通知服务（第5步）可以说是需要的。如果用户更改了他们的地址，而通知服务不知道，它就有将电子邮件发送到错误地址并无法将通知发送给预期用户的风险。</p><p>另一方面，排行榜服务可能不需要最新的显示名称和头像来构建排行榜——如果用户看到一些旧的头像或显示名称，那也不是什么大问题。</p><p>正如你所看到的，服务对数据一致性的需求是不同的。我们可以使用这些权衡作为杠杆，应用不同的数据共享方法，构建一个更健壮的分布式系统。</p><h3 id="最终一致性的引入"><a href="#最终一致性的引入" class="headerlink" title="最终一致性的引入"></a>最终一致性的引入</h3><p>在我的职业生涯中，我意识到服务可以在它们自己的数据库表中维护其他服务数据的副本。这带来了通过事件或轮询保留数据的责任。</p><p>这包括数据可能在一段时间内是陈旧的，但最终会被更新，这意味着数据最终是一致的。我们不能保证数据不陈旧，但我们可以保证我们最终会赶上。</p><p>我“开窍”的那一刻是当我从依赖公共天气API获取天气数据的后端服务的角度来考虑这个问题。与其每次需要天气数据时都检索普里什蒂纳或柏林的天气数据，不如通过将其在本地表中具体化并缓存（可能是一天多次）来缓存它，并将缓存的数据提供给这些用户。我选择了最终一致性的权衡，因为对我的用户来说，看到最新数据并不关键，如果数据有几小时的延迟也是可以接受的。</p><p>回到挑战的例子：我们可以通过在服务中维护用户的本地副本来切断对用户服务的许多同步依赖：</p><ol><li>排行榜服务可以维护用户的本地副本，避免不得不向用户服务发出请求。如果数据有点旧，没有人会介意，如果有人看到一个稍微旧的头像，那也不是一个阻碍。</li><li>挑战服务也可以做同样的事情；比如说，如果它公开了一个getChallengeDetails查询，并需要显示名称和头像来显示当前挑战的参与者——它也可以从自己的具体化用户表中提供这种最终一致性的数据。</li><li>通知服务，虽然更敏感一些，也可以利用数据共享来消除对用户服务的依赖。它可以在本地具体化用户，并通过监听用户更新事件来维护最佳努力更新状态，以确保它拥有最新的电子邮件。<br>尽管我们没有太多讨论服务如何共享这些数据（这是另一个时间的话题），但最终的示例架构将使用事件源和缓存的组合。</li></ol><img src="/Sharing-Data-Between-Microservices/4.webp" class="" title="示意图 width=400"><p>示例架构，展示了服务之间共享数据的两种主要方法：事件源和缓存<br>如果你想看更多的例子，请查看Fiverr的工程师Shiran Metsuyanim的《如何在大规模上在微服务之间共享数据》。这是一个很好的帖子，展示了如何在添加新服务时保持健壮性。它首先列出了限制，然后讨论了同步、异步和混合解决方案之间的权衡。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我想向像我几年前一样陷入“不共享数据”字面意义的开发者传达这个观点，但必须意识到这只适用于不共享真相的源头。在另一个服务的领域内维护服务数据的副本是完全可以接受的，并拥抱了最终一致性的精神。</p>]]></content>
      
      
      <categories>
          
          <category> Microservices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data </tag>
            
            <tag> Sharing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统设计基础——速率限制器</title>
      <link href="/System-Design-Basics-%E2%80%94-Rate-Limiter.html"/>
      <url>/System-Design-Basics-%E2%80%94-Rate-Limiter.html</url>
      
        <content type="html"><![CDATA[<img src="/System-Design-Basics-%E2%80%94-Rate-Limiter/1.webp" class="" title="示意图 width=400"><h3 id="你好，伙计们，如果你正在为系统设计面试做准备，你可能已经遇到了“速率限制器”，这是软件架构中的基本组件之一，与API网关、负载均衡器、分布式缓存等一起。"><a href="#你好，伙计们，如果你正在为系统设计面试做准备，你可能已经遇到了“速率限制器”，这是软件架构中的基本组件之一，与API网关、负载均衡器、分布式缓存等一起。" class="headerlink" title="你好，伙计们，如果你正在为系统设计面试做准备，你可能已经遇到了“速率限制器”，这是软件架构中的基本组件之一，与API网关、负载均衡器、分布式缓存等一起。"></a>你好，伙计们，如果你正在为系统设计面试做准备，你可能已经遇到了“速率限制器”，这是软件架构中的基本组件之一，与API网关、负载均衡器、分布式缓存等一起。</h3><p>在今天的高流量、分布式系统架构中，应用程序和服务与许多用户和系统交互，维护稳定性和防止滥用是至关重要的问题。</p><p>而速率限制有助于解决这些问题。</p><p>想象一下，我们有一个服务，它接收到大量的请求，但它每秒只能处理有限数量的请求。为了处理这个问题，我们需要某种节流或速率限制机制，只允许一定数量的请求，这样我们的服务就可以响应所有请求。</p><span id="more"></span><p>从高层次上讲，速率限制器限制了一个实体（用户、设备、IP等）在特定时间窗口内可以执行的事件数量。</p><p>换句话说，速率限制器是用于软件系统和网络通信中的一种机制，用于控制请求或操作的执行速率。</p><p>它旨在防止资源的过度使用，保护系统不被压垮，并确保多个用户或客户端之间的公平使用。它可以在应用程序、API网关或网络层等不同级别应用。</p><p>速率限制器对于在分布式系统和高流量应用程序中维护系统稳定性、确保服务质量和管理资源非常关键。</p><p>顺便说一下，如果你正在为系统设计面试做准备，并希望在有限的时间内学习系统设计，你还可以查看像ByteByteGo、Design Guru、Exponent、Educative和Udemy这样的网站，它们有许多优秀的系统设计课程。</p><p>类似地，在回答系统设计问题时，你也可以遵循像DesignGuru这样的系统设计模板，以便在有限的时间内更好地表达你的答案。</p><p>遵循这个模板实际上是你为任何系统设计面试做准备的最好的事情之一。</p><img src="/System-Design-Basics-%E2%80%94-Rate-Limiter/2.webp" class="" title="示意图 width=400"><p><strong>什么是速率限制器？</strong><br>速率限制器是一种用于计算中控制某些操作或请求被允许的速率的机制。它通常在各种应用程序和系统中使用，以防止滥用、保护资源和维护稳定性。</p><p>速率限制器的基本思想是限制用户或系统在指定期间内可以执行的请求或操作数量。</p><p>这样做是为了防止服务过载、避免不必要的资源消耗，并防止潜在的恶意活动或无意的误用。</p><p>这里有一个简单的速率限制器工作原理的解释：</p><ul><li><strong>定义限制</strong>：指定在某个时间窗口内允许的最大请求或操作数量。例如，你可能只允许每分钟100个请求。</li><li><strong>跟踪使用情况</strong>：速率限制器会跟踪用户或系统随时间所做的请求数量。</li><li><strong>检查限制</strong>：在处理新请求之前，速率限制器会检查用户或系统是否在当前时间窗口内超过了定义的限制。</li><li><strong>决策制定</strong>：如果用户或系统在允许的限制内，请求将被处理。否则，请求可能会被延迟、拒绝或根据具体实现采取其他行动。</li></ul><p>以下是Exponent的一个漂亮的图表，展示了速率限制器的实际应用：</p><img src="/System-Design-Basics-%E2%80%94-Rate-Limiter/3.webp" class="" title="示意图 width=400"><p><strong>速率限制器算法</strong><br>根据系统的要求和特性，有不同算法和策略来实现速率限制。一些常见的速率限制算法包括：</p><ul><li><strong>令牌桶</strong>：只要桶中有令牌可用，就可以授予请求。令牌以固定速率添加到桶中，每个请求消耗一个或多个令牌。</li><li><strong>漏桶</strong>：类似于令牌桶，但不是令牌，而是请求以固定速率从桶中漏出。如果桶溢出，多余的请求可能会被延迟或丢弃。</li><li><strong>滑动窗口</strong>：在滑动时间窗口内计算请求的数量。如果计数超过允许的限制，进一步的请求将被延迟或拒绝。</li></ul><p>速率限制在Web API、网络协议、Web服务器和各种分布式系统中广泛使用，以确保公平使用、防止滥用和维护系统稳定性。</p><p>如果你想了解更多，ByteByteGo的速率限制器章节是一个很好的资源，我大部分知识都是从那里学到的。</p><p>以下是ByteByteGo的一个漂亮的图表，用简单的语言解释了速率限制器的工作原理：</p><img src="/System-Design-Basics-%E2%80%94-Rate-Limiter/4.webp" class="" title="示意图 width=400"><p><strong>系统设计面试资源</strong><br>这里是一份精选的最佳系统设计书籍、在线课程和练习网站的列表，你可以查看这些资源，更好地为系统设计面试做准备。这些课程大多也回答了我在这里分享的问题。</p><ul><li>DesignGuru的《掌握系统设计课程》：一个互动学习平台，有动手练习和现实场景，以加强你的系统设计技能。</li><li>Alex Xu的《系统设计面试》：这本书深入探讨了系统设计概念、策略和面试准备技巧。</li><li>Martin Kleppmann的《设计数据密集型应用》：一本全面指南，涵盖了设计可扩展和可靠系统的原则和实践。</li><li>LeetCode系统设计标签：LeetCode是一个流行的技术面试准备平台。LeetCode上的系统设计标签包括各种问题供练习。</li><li>GitHub上的《系统设计入门》：一份精选资源列表，包括文章、书籍和视频，帮助你为系统设计面试做准备。</li><li>Educative的系统设计课程：一个互动学习平台，有动手练习和现实场景，以加强你的系统设计技能。</li><li>High Scalability博客：一个博客，展示高流量网站和可扩展系统架构的文章和案例研究。</li><li>YouTube频道：查看“Gaurav Sen”和“Tech Dummies”等频道，了解系统设计概念和面试准备的有见地的视频。</li><li>ByteByteGo：Alex Xu为系统设计面试准备的活书和课程。它包含了《系统设计面试》第一卷和第二卷的全部内容，并将在第三卷发布时更新。</li><li>Exponent：一个专门针对FAANG公司（如亚马逊和谷歌）面试准备的网站，他们也有一个很好的系统设计课程和许多其他材料，可以帮助你通过FAANG面试。</li></ul><p>以下是一份漂亮的系统设计面试备忘单，用于快速复习基本的系统设计概念：</p><img src="/System-Design-Basics-%E2%80%94-Rate-Limiter/5.webp" class="" title="示意图 width=400"><p><strong>结论</strong><br>这就是关于什么是速率限制器以及它是如何工作的。速率限制器是任何软件架构师手中的重要工具，你可以把它放在任何你想防止资源耗尽的地方。</p><p>它也是系统设计面试中需要学习的基本概念之一。许多公司还会询问关于设计API速率限制器的问题。我的意思是，你可能会被要求设计一个API速率限制器，根据用户发送的请求数量来限制用户。</p><!-- https://medium.com/javarevisited/system-design-basics-rate-limiter-249013cf5be4 -->]]></content>
      
      
      <categories>
          
          <category> System Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 年十大数据和人工智能趋势</title>
      <link href="/Top-10-Data-AI-Trends-for-2024.html"/>
      <url>/Top-10-Data-AI-Trends-for-2024.html</url>
      
        <content type="html"><![CDATA[<img src="/Top-10-Data-AI-Trends-for-2024/1.webp" class="" title="示意图 width=400"><p>数据和人工智能领域发展迅速。如果你不能经常停下来多瞅瞅这个，你可能会错过它。</p><span id="more"></span><p>2023年是通用人工智能（GenAI）的一年。而2024年似乎也将成为…又一个通用人工智能的一年。</p><p>但在2023年，团队们争先恐后地提及通用人工智能，到了2024年，团队们将优先考虑他们的人工智能模型解决真正的商业问题。随着重新聚焦，新的优先事项也随之出现。</p><p>当涉及到数据的未来时，潮涨船高。通用人工智能在2024年将继续上升，提高数据行业的标准——以及优先事项——与它一同上升。</p><p>以下是我对数据和人工智能团队下一步发展和你的团队如何保持一步之遥的前10个预测。</p><p>大型语言模型（LLMs）将改变技术栈 这一点是显而易见的。<br>毫不夸张地说，在过去的12个月里，大型语言模型已经彻底改变了技术的面貌。从有合法用例的公司到寻找问题的临时团队，每个人都在尝试以这样或那样的方式使用生成性人工智能（GenAI）。</p><p>大型语言模型预计将在2024年及以后继续这种转变——从推动对数据的需求增加到需要新的架构，如向量数据库（即“AI栈”），再到改变我们为最终用户操纵和使用数据的方式。</p><p>自动化数据分析和激活将成为每个产品和数据栈每个层面上预期的工具。问题是：我们如何确保这些新产品在2024年提供真正的价值，而不仅仅是为了公关信用而增加一点新闪光点？</p><p>数据团队将看起来像软件团队 最成熟的数据团队将他们的数据资产视为真正的数据产品——包括产品需求、文档、冲刺，甚至是最终用户的服务等级协议（SLA）。<br>因此，随着组织开始将越来越多的价值映射到他们定义的数据产品上，越来越多的数据团队将开始看起来——并且被管理——像他们所是的关键产品团队。</p><p>软件团队将成为数据实践者 当工程师试图构建数据产品或通用人工智能而不考虑数据时，结果通常不好。只需问问联合健康保险。<br>随着人工智能继续吞噬世界，工程和数据将成为同一件事。没有重大软件开发会进入市场而不考虑人工智能——也没有重大人工智能会进入市场而不使用一定程度的真实企业数据。</p><p>这意味着，随着工程师寻求提升新的人工智能产品，他们需要对数据——以及如何使用它——发展出一种眼光，以构建增加新价值和持续价值的模型。</p><p>RAG将成为所有RAG的焦点 在一系列备受瞩目的通用人工智能失败之后，需要清洁、可靠和策划的上下文数据来增强人工智能产品的需求变得越来越明显。<br>随着人工智能领域的不断发展和通用大型语言模型训练中的盲点变得痛苦明显，拥有专有数据的团队将转向RAG（检索增强生成）和大规模微调，以增强他们的企业人工智能产品，为他们的利益相关者提供可证明的价值护城河。</p><p>RAG在场景中仍然是相对较新的（它最初由Meta AI在2020年推出），组织尚未围绕RAG开发经验或最佳实践——但它们即将到来。</p><p>团队将使企业级人工智能产品运营化 持续流行的数据工程趋势——数据产品。不要搞错，人工智能是一种数据产品。<br>如果2023年是人工智能的一年，2024年将是使人工智能产品运营化的一年。无论是出于需要还是强迫，各行各业的数据团队将拥抱企业级人工智能产品。问题是——它们真的准备好了吗？</p><p>希望不再有创建随机聊天功能只是为了说你们正在整合人工智能，当董事会问起时。到2024年，团队可能会变得更加复杂，了解他们如何开发利用更好的培训实践来创造价值的人工智能产品，并确定要解决的问题，而不是制造技术来创造新问题。</p><p>数据可观测性将支持人工智能和向量数据库 在亚马逊网络服务（AWS）2023年首席数据官洞察调查中，受访者被问及他们组织实现生成性人工智能潜力的最大挑战是什么。<br>最常见的答案？数据质量。</p><p>生成性人工智能本质上是一种数据产品。像任何数据产品一样，没有可靠的数据它就无法运作。但在大型语言模型的规模上，手动监控无法提供所需的全面和高效的质量覆盖，以使任何人工智能可靠。</p><p>要真正成功，数据团队需要一个针对人工智能栈量身定制的、活生生的数据可观测性策略，使他们能够在不断增长和动态的环境中一致地检测、解决和预防数据停机时间。<br>而且，这些解决方案需要优先考虑解决、流水线效率以及支持人工智能的流式/向量基础设施，以便在2024年的现代人工智能可靠性之战中成为一个竞争者。</p><p>大数据将变小 三十年前，个人电脑是一种新奇事物。现在，随着现代Macbooks拥有与Snowflake在2012年推出其MVP仓库时相同的计算能力，硬件正在模糊商业和企业解决方案之间的界线。<br>由于大多数工作负载都很小，数据团队将开始使用进程内和内存/进程内数据库来分析和移动数据集。</p><p>特别是对于需要快速扩展的团队，这些解决方案可以快速启动，并且可以随着商业云提供商的提供上升到企业级功能。</p><p>正确调整规模将优先 今天的数据显示领导者面临一个不可能的任务。使用更多的数据，创造更大的影响，利用更多的人工智能——但降低那些云成本。<br>正如《哈佛商业评论》所言，首席数据和人工智能官被设置为失败。截至2023年第一季度，IDC报告称云基础设施支出上升到215亿美元。根据麦肯锡的数据，许多公司的云支出每年增长高达30%。</p><p>像元数据监控这样的低影响方法和允许团队查看和正确调整使用情况的工具将在2024年变得非常宝贵。</p><p>Apache Iceberg是由Netflix的数据工程团队开发的开源数据湖表格式，旨在提供一种更快、更容易处理大规模数据集的方法。它被设计为即使是PB级的大型分析表，也可以使用SQL轻松查询。</p><p>现代数据仓库和数据湖将提供计算和存储，而Iceberg专注于提供成本效益高、结构化的存储，可以被组织内可能同时使用的许多不同引擎访问，如Apache Spark、Trino、Apache Flink、Presto、Apache Hive和Impala。</p><p>最近，Databricks宣布Delta表元数据也将与Iceberg格式兼容，Snowflake也在积极整合Iceberg。随着数据湖成为许多组织的事实上的解决方案，Apache Iceberg——以及Iceberg的替代品——可能会继续增长受欢迎。</p><p>对某人来说，回到办公室 RTO——每个人都不喜欢的缩写。或者可能是他们最喜欢的！老实说，我现在跟不上了。虽然团队在这个问题上似乎意见分歧，但越来越多的团队每周至少被召回他们的小隔间灵活工作环境几天。</p><p>根据Resume Builder 2023年9月的报告，90%的公司计划到2024年底实施回办公室政策——这距离2020年那个命运之春已经将近四年了。</p><p>事实上，包括亚马逊的Andy Jassy、OpenAI的Sam Altman和谷歌的Sundar Pichai在内的几位有影响力的CEO在过去几个月已经实施了回办公室政策。而且，至少有一些在办公室工作（至少是兼职）相对于完全在家工作的好处。</p><p>发现自己在永远在家工作的阵营？<br>看来答案——就像在数据中总是一样——是提供更多的价值。<br>尽管最近的经济逆风和其对就业市场的影响，数据和人工智能团队需求量很大。雇主通常会尽一切努力获得他们——并留住他们。</p><p>虽然一些公司要求所有员工无论角色如何都回到办公室，但像Salesforce这样的其他公司则要求非远程工程师少得多，每个季度总共10天。</p><!-- https://barrmoses.medium.com/top-10-data-ai-trends-for-2024-7f830196db65 -->]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14个免费教程让你开始使用Web3</title>
      <link href="/14-Free-Tutorials-to-Get-You-Started-with-Web3.html"/>
      <url>/14-Free-Tutorials-to-Get-You-Started-with-Web3.html</url>
      
        <content type="html"><![CDATA[<img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/1.webp" class="" title="示意图 width=400"><p>你可能听说过这样一句话–当所有人都在挖金子的时候，做镐头和铲子的生意就好了。</p><p>Binance、Coinbase和其他加密货币交易所以这种方式获利。同样，各种公司也在不断涌现，在给消费者带来价值的同时也在赚钱。</p><p>人们也对投资加密货币感兴趣。<br>是的，我们大多数人都专注于购买更多的比特币和以太坊，因为我们相信加密货币在未来会暴涨。</p><span id="more"></span><p>我无法预测加密货币的未来价值，但我可以自信地说，如果你学会了Web3并利用它创造了任何东西，你无疑会成为富人。</p><p>你所需要的就是学习Web3的最好指南。 而现在你可以免费得到它。</p><p>注意：这些课程是完全免费的</p><p>此外，我试过其中的一些课程，而且相当喜欢。</p><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/2.webp" class="" title="示意图 width=400"><p>这不是很酷吗？</p><p>让我们开始吧。</p><ol><li><a href="https://buildspace.so/">buildspace.so</a> - 专为初学者设计的Web3实践培训。它是完全免费的，完成后，你将得到一个NFT。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/3.webp" class="" title="示意图 width=400"><p>这是我用来学习课程的第一个网站。具体来说，有几门课程，比如用solidity创建web3应用，甚至用Solana，用JavaScript创建DAO，等等。</p><p>而且内容丰富。他们还有一个Discord频道，你可以在那里问问题。</p><p>此外，在你完成一门课程后，你会收到一个NFT作为完成礼物。</p><ol start="2"><li><a href="https://cadena.dev/">Cadena</a> - 创建智能合约、dapp和获得Cadena NFT证书的教程。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/4.webp" class="" title="示意图 width=400"><p>它与Buildspace差不多。</p><p>他们提供关于智能合约、NFT、代币和其他相关主题的各种课程。完成后，你将获得NFT证书。</p><p>上述两个网站都提供了职业发展的可能性。</p><ol start="3"><li><a href="https://cryptozombies.io/">CryptoZombies</a> - 建立你自己的加密货币收藏品游戏，在互动编码学校学习如何设计智能合约。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/5.webp" class="" title="示意图 width=400"><p>这是互联网上非常好的资源。</p><p>如果你喜欢玩游戏或想建立自己的游戏，你会喜欢这个网站和它教授Web3的方法。</p><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/6.webp" class="" title="示意图 width=400"><p>这是其中一张截图，展示了他们如何教导学生。</p><p>这是不是真的很疯狂？</p><ol start="4"><li><a href="https://cryptodevhub.io/">cryptodevhub.io</a> - 一个由社区主导的倡议，将对区块链和加密技术感兴趣的人聚集在一起。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/7.webp" class="" title="示意图 width=400"><ol start="5"><li><a href="https://www.ludu.co/course/ethereum">Discover Ethereum &amp; Solidity</a> -完成一门课程，指导你按照最佳实践建立一个去中心化的Twitter克隆程序是必须的。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/8.webp" class="" title="示意图 width=400"><p>我读了这个网站上的东西，它相当简单。我在几分钟内就学会了从基础知识到使用node.js建立合同，再到truffle的一切。</p><p>入门非常简单。</p><ol start="6"><li><p><a href="https://github.com/ExtropyIO/defi-bot">ExtropyIO/defi-bot</a> - 建立DeFi套利机器人的教程。</p></li><li><p><a href="https://gist.github.com/karmacoma-eth/4f206a46dedc6da6808c1ccdef3262d0">karmacoma-eth/sending-ether-cheat-sheet</a> - 发送以太的技巧和最佳做法。</p></li><li><p><a href="https://learnxinyminutes.com/docs/solidity/">LearnXInY</a> - 在15分钟内学会Solidity（针对有经验的开发者）。</p></li><li><p><a href="https://github.com/manojpramesh/solidity-cheatsheet">manojpramesh/solidity-cheatsheet</a> - Cheatsheet和最佳实践。</p></li><li><p><a href="https://reference.auditless.com/cheatsheet">Solidity and Vyper cheat sheet</a> - 并排回顾两种语言的语法。</p></li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/9.webp" class="" title="示意图 width=400"><ol start="11"><li><a href="https://www.teachyourselfweb3.com/">Teach Yourself Web3</a> - 加入一个由Web3工程师和教育家组成的社区，他们可以帮助你在Web3开发中超常发挥。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/10.webp" class="" title="示意图 width=400"><p>在学习solidity的同时，你将学习智能合约安全、智能合约审计以及其他各种主题。</p><ol start="12"><li><a href="https://topmonks.github.io/solidity_quick_ref/">topmonks/solidity_quick_ref</a> - 语法概述。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/11.webp" class="" title="示意图 width=400"><p>这是一个solidity的汇总，可以帮助你简单地修正学习的一些小细节。</p><ol start="13"><li><a href="https://github.com/willitscale/learning-solidity">willitscale/learning-solidity</a> - 关于入门、创建自己的加密货币、ICO和部署的完整指南。</li></ol><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/12.webp" class="" title="示意图 width=400"><p>创作者创建了YouTube视频来教导Web3新手。</p><p>14.<a href="">useweb3.xyz/tutorials</a> - 一个基于特定项目、任务或挑战的免费社区教程的精选列表。</p><img src="/14-Free-Tutorials-to-Get-You-Started-with-Web3/13.webp" class="" title="示意图 width=400"><p>希望你喜欢它。</p><p>就这样吧–谢谢。</p><!-- https://javascript.plainenglish.io/14-insanely-free-web3-tutorials-youll-ever-find-on-the-internet-no-bs-7e07e8690ced -->]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web3 </tag>
            
            <tag> Tutorials </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6个容易上手的编程副业，每月赚取1,000多美元</title>
      <link href="/6-Easy-to-Start-Programming-Side-Hustle-to-Earn-1-000-A-Month.html"/>
      <url>/6-Easy-to-Start-Programming-Side-Hustle-to-Earn-1-000-A-Month.html</url>
      
        <content type="html"><![CDATA[<img src="/6-Easy-to-Start-Programming-Side-Hustle-to-Earn-1-000-A-Month/1.jpeg" class="" title="示意图 width=400"><blockquote><p>本文转自 Nitin Sharma 的博客</p></blockquote><p>你们中的大多数人都读过这样的故事，希望其中一些能帮助你们产生更多的钱。</p><p>嗯，几年前我也是这样的人。我希望能尝试一些新的副业，赚点钱。其中一个视频建议我在网上写作，此后我制作了许多技术文章。</p><p>而在这个过程中，我开展了多项副业，在全职工作之外还产生了被动收入，并认识了几位专家，从他们那里我又学到了很多。</p><p>因此，基于这一篇文章，我将协助你开始你的副业，甚至与你分享收入证明以资鼓励。</p><span id="more"></span><p>在我进一步介绍之前，我想强调的是，这些副业主要是为寻求与编程有关的副业的初学者或有一定专业知识的程序员，或希望建立副业的人。它当然不包括自由职业者，博客，或制作YouTube视频。</p><p>说得更具体一点，你们任何人都可以开始这些副业。说实话，这将需要一些努力；而且这一点也不被动。</p><p>让我们开始吧。</p><h4 id="1-在Gumroad上销售编程相关产品"><a href="#1-在Gumroad上销售编程相关产品" class="headerlink" title="1. 在Gumroad上销售编程相关产品"></a>1. 在Gumroad上销售编程相关产品</h4><p>这是我最近为自己创造的副业之一。<br>几个月来，我发现大多数人都试图在Gumroad上销售他们的专业知识，而消费者也会购买。</p><p>那么我为什么不呢？</p><p>然而，我所拥有的少数能力在很大程度上与编程有关，或者更具体地说，与网络开发有关。所以我决定做一些与此相关的东西。<br>到目前为止，我已经创造了两个数字产品，并在Gumroad上销售。第一个产品是免费赠送的。</p><p>我在几天内就收到了第一笔付款。</p><p>这是我第一次付款的快照。</p><img src="/6-Easy-to-Start-Programming-Side-Hustle-to-Earn-1-000-A-Month/2.webp" class="" title="示意图 width=400"><p>在此之后，我的销售量增加了，我的报酬也增加了。</p><p>这不是很神奇吗？</p><p>同样，你可以在Gumroad上建立和销售与编程有关的项目。<br>一开始可能需要一些时间来研究和开发，但你很快就会成为专家。</p><p>总之，如果你能在几周内赚到10美元，你可能在未来几个月内赚到更多。</p><h4 id="2-在你的职业生涯中使用Web3技能"><a href="#2-在你的职业生涯中使用Web3技能" class="headerlink" title="2. 在你的职业生涯中使用Web3技能"></a>2. 在你的职业生涯中使用Web3技能</h4><p>我的日常工作是作为一名网络开发人员。我为我的自由职业者客户设计网站，我的全职工作是网络开发。</p><p>因此，我通过网络开发来赚钱。但我需要赚更多的钱，这只有在我努力为我的工作增加更多价值时才能实现。</p><p>而就在那里，我学到了Web3的能力。对我来说，理解与网络开发框架和库有关的东西并不困难，因为我对它们很熟悉。</p><p>我唯一需要学习的是Solidity（与JavaScript相同），Ganache，和Truffle。</p><p>作为一个结果，我可能会通过向客户提供更多的价值来赚更多的钱。如果你希望全职工作，这也是一个可行的选择。</p><img src="/6-Easy-to-Start-Programming-Side-Hustle-to-Earn-1-000-A-Month/3.webp" class="" title="示意图 width=400"><p>当我进行谷歌搜索时，它说web3开发人员的年平均收入在90,000美元到150,000美元之间。</p><p>这不是很疯狂吗？</p><h4 id="3-使用-“设计到代码-“平台"><a href="#3-使用-“设计到代码-“平台" class="headerlink" title="3. 使用 “设计到代码 “平台"></a>3. 使用 “设计到代码 “平台</h4><p>今年，我广泛使用了Design-to-Code平台。你可能知道，我是全职工作，创造技术内容，在Gumroad上销售产品，并在我的职业中使用Web3。</p><p>因为我没有足够的时间将设计转化为代码，所以我使用设计到代码平台。而这些平台允许我在几分钟内将设计转化为代码。</p><p>而且它们中的大多数都是完全免费使用的。</p><p>是的，这些平台并不总是能够产生完美的设计。但是，它大大加快了我完成任务的速度。</p><p>而在这些网站的帮助下，我在一个月内赚了5000美元或更多。</p><p>同样地，你也可以利用类似的网站。</p><h4 id="4-建立一个编程社区"><a href="#4-建立一个编程社区" class="headerlink" title="4. 建立一个编程社区"></a>4. 建立一个编程社区</h4><p>当我在大学最后一年的时候，我的一些朋友建议我加入某些Instagram和Telegram小组。简而言之，这些小组协助我申请了最近的各种编程职位。</p><p>令人惊讶的是，他们在几天内就获得了大量的追随者。</p><p>接下来发生了什么？他们开始在社区里面制作和提供课程。</p><p>最近，其中一个小组的管理员通过第三方找到了我，让我协助他们发展社区。更具体地说，我惊奇地发现，他们提供的课程，每天的收入都超过1,000美元。</p><p>唯一的原因是，新人希望获得高薪职业，因此他们购买课程学习并获得工作。</p><p>这不是很吸引人吗？</p><p>这只是一个例子。我并不建议你在Instagram或Telegram上建立一个社区。然而，你可以在其他地方创建一个类似的社区。</p><p>例如，我在Medium上有成千上万的追随者，我在那里发布内容。而且，由于我的内容，我的追随者数量持续上升。</p><p>更具体地说，我创建了一个由共同渴望了解更多编程知识的人组成的社区。</p><p>这并不意味着我想出售一些课程 :)</p><h4 id="5-创建Web3教程"><a href="#5-创建Web3教程" class="headerlink" title="5. 创建Web3教程"></a>5. 创建Web3教程</h4><p>你知道为什么我们大多数人讨厌写博客、自由职业者或制作YouTube视频吗？</p><p>解释很简单：有很多个人在那里，这意味着有更多的竞争。</p><p>我同意这个领域有很多钱，但由于竞争太大，新人要成功很困难。</p><p>那么，你能做什么？如果你想制作课程或教程，考虑制作任何新事物的教程。</p><p>例如，web3是一项相对较新的技术，大多数人都不知道支持它的编程。以同样的方式，只有一些普通的YouTube频道在教人们了解web3。</p><p>因此，这对你来说是一个机会。</p><h4 id="6-使用Canva进行平面设计"><a href="#6-使用Canva进行平面设计" class="headerlink" title="6. 使用Canva进行平面设计"></a>6. 使用Canva进行平面设计</h4><p>我没有学过平面设计，也没有雇人帮我做。<br>那么，我应该怎么做呢？我就用Canva。</p><p>Canva是创建演示文稿、缩略图、YouTube视频、Instagram帖子、标志和其他图形的完美选择。Canva也被我用来创建我的简历。</p><p>现在让我告诉你如何把它变成一个副业。</p><p>第一个选择是，你可以通过使用Canva作为一个平面设计师赚钱。</p><p>你可能想知道平面设计师是做什么的。图形设计师使用计算机软件或手工创造视觉设计，启发、告知和吸引客户。</p><p>平面设计师负责整个设计和应用程序的布局，如广告、小册子、出版物和报告。而且，正如我们所见，Canva让制作变得简单。</p><p>假设你想销售网站主题，需要优秀的照片和图形设计技巧，这两点Canva都能给予。</p><p>下一个方法是销售Canva模板。</p><p>让我问你，谁负责Canva模板？像我们这样的设计师，而你可能就是其中之一。</p><p><a href="https://www.canva.com/en_in/creators/">Canva创作者</a>是一个网站，如果你想在Canva上出售模板，你可以申请。他们目前只与选定的创作者合作。如果你知道如何设计，你可以申请。在某些时候，Canva团队会向你发送电子邮件。</p><p>同样，你也可以向你的客户或在任何其他平台上出售Canva模板。</p><p>我也遇到过通过向客户教授Canva来谋生的人。</p><p>希望你喜欢它。</p><p>就这样吧–谢谢。</p><!-- https://medium.com/geekculture/6-easy-to-start-programming-side-hustle-to-earn-1-000-a-month-no-bs-34e2e8f58a38 -->]]></content>
      
      
      <categories>
          
          <category> Microservices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microservices </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道微服务和其设计模式吗？</title>
      <link href="/Do-you-know-about-Microservices-and-their-Design-Patterns.html"/>
      <url>/Do-you-know-about-Microservices-and-their-Design-Patterns.html</url>
      
        <content type="html"><![CDATA[<img src="/Do-you-know-about-Microservices-and-their-Design-Patterns/1.webp" class="" title="示意图 width=400"><p>大家好。<br>在这篇文章中，我们将看到微服务架构，以及它与单体应用的区别。还将看到什么是微服务设计模式和不同的类型。<br>然后，我们将看到微服务架构的优势和劣势，以结束这篇文章。<br>让我们开始吧！</p><span id="more"></span><h4 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h4><p>微服务是一种开发软件应用的架构风格，它作为单独的服务运行，通过以下方式相互通信：</p><ul><li>使用API调用进行同步通信</li><li>通过发布和订阅/基于事件的机制进行异步通信–即使用消息队列</li></ul><p>这些微服务具有以下特性</p><ul><li>可独立部署</li><li>对负载有高度的可扩展性</li><li>可以使用多种编程语言进行开发–即多语种</li><li>松散的耦合</li><li>围绕业务领域进行组织</li><li>由小型和独立的团队维护</li><li>高度的可维护性和可测试性</li><li>通过自动化的CICD管道实现持续交付，加快上线时间</li><li>容灾备灾能力<br>使用微服务架构，我们可以实现大型复杂应用程序的快速开发和交付，即缩短上线时间。</li></ul><h4 id="单体与微服务"><a href="#单体与微服务" class="headerlink" title="单体与微服务"></a>单体与微服务</h4><img src="/Do-you-know-about-Microservices-and-their-Design-Patterns/2.webp" class="" title="示意图 width=400"><p>在传统的单机架构中，整个应用程序被紧紧地耦合在一个单一的代码库中，使其成为紧耦合的。<br>在这个单一的代码库中会有不同的层次，如表现形式、业务逻辑和数据库持久性，并连接到一个单一的数据库。<br>这个应用程序是作为一个单一的fat jar构建的，它包含了类文件和所有运行所需的依赖性。</p><p>虽然单机应用程序非常容易构建、测试和部署，但它也面临着各种挑战，如紧密耦合和可扩展性。<br>单个模块不能在负载时单独扩展，因此我们需要使用一种叫做垂直扩展的技术来再次扩展整个应用程序。<br>单机应用也是单点故障。</p><p>2009年，Netflix面临很多基础设施问题，因为它无法跟上其快速增长的视频流媒体服务的需求。<br>从那时起，Netflix决定将其基础设施从私有数据中心迁移到AWS云，并将其单体架构替换为微服务架构。</p><p>他们是早期从单体架构过渡到微服务架构的先驱者。<br>甚至开源了自己用于构建微服务的框架和工具，这就是著名的Netflix OSS Stack，后来改名为Spring Cloud Netflix。</p><p>微服务架构，即现代应用开发方法，由较小的运行服务组成，这些服务是基于领域开发的。<br>这些服务有自己的数据库或模式，并将只包含相关的领域数据。</p><img src="/Do-you-know-about-Microservices-and-their-Design-Patterns/3.webp" class="" title="示意图 width=400"><p>如上图所示，微服务根据业务领域被隔离开来，如账户服务、库存服务、运输服务等，它们连接到各自的数据库。<br>这些服务也可以同步或异步地相互连接以获得任何需要的数据。</p><p>这些服务作为独立的小jar文件被部署在他们自己的机器上，并独立部署，这与单机应用不同。<br>部署可以在内部服务器、云服务器或docker容器中完成。</p><p>这种架构是可以独立扩展的，使用一种叫做 “水平扩展 “的技术，即只扩展具有较高负载的服务。<br>此外，这些服务是容错的，有弹性的，没有单点故障。<br>即使库存服务和运输服务出现故障，用户仍然可以使用账户服务检查他们的账户。</p><h4 id="微服务设计模式"><a href="#微服务设计模式" class="headerlink" title="微服务设计模式"></a>微服务设计模式</h4><p>微服务架构有很多现成的不同设计模式，可用于不同的用例。</p><img src="/Do-you-know-about-Microservices-and-their-Design-Patterns/4.webp" class="" title="示意图 width=400"><p>微服务是独立的、松散耦合的，并遵循分布式系统架构，每个服务只承担一个责任。<br>在这种类型的架构中会有很多挑战，包括通信故障、分布式事务回滚、配置外部化、集中式日志等。</p><p>这些设计上的挑战以解决它们的形式被称为微服务设计模式。<br>如下图所示，有很多微服务的设计模式。如果能接触到所有重要的模式，将对设计微服务架构有很大帮助。</p><p>微服务的设计模式一般可以分为以下几种类型</p><ul><li>分解模式</li><li>集成模式</li><li>数据库设计模式</li><li>可观察性设计模式</li><li>跨领域设计模式</li></ul><img src="/Do-you-know-about-Microservices-and-their-Design-Patterns/5.webp" class="" title="示意图 width=400"><h5 id="1-分解模式"><a href="#1-分解模式" class="headerlink" title="1. 分解模式"></a>1. 分解模式</h5><p>如果我们需要将一个单体应用分解成更小的微服务，那么分解模式就非常有用。这些模式提供了如何在逻辑上进行分解的建议。这些模式有不同的类型，重要的是要了解该领域。<br>a. 按业务能力分解<br>b. 按子域分解<br>c. 按 “绞杀者 “模式进行分解</p><h5 id="2-集成设计模式"><a href="#2-集成设计模式" class="headerlink" title="2. 集成设计模式"></a>2. 集成设计模式</h5><p>集成设计模式用于处理不同微服务之间的通信，以及如何获得跨服务的响应并将其发送到客户端，同时保持高性能。<br>重要的集成模式有<br>a. API网关模式<br>b. 聚合器模式<br>c. 代理模式<br>d. 链式微服务模式</p><h5 id="3-数据库设计模式"><a href="#3-数据库设计模式" class="headerlink" title="3. 数据库设计模式"></a>3. 数据库设计模式</h5><p>数据库设计模式帮助我们为微服务架构设计数据库，如为每个微服务使用单一的共享数据库或单独的数据库，为读和写操作提供单独的数据库，跨微服务的分布式事务管理，等等。<br>以下这些数据库设计模式是非常重要的，因为数据库的设计可以决定应用程序的好坏<br>a. 每个服务的数据库模式<br>b. 每个服务的共享数据库模式<br>c. 命令和查询责任隔离（CQRS）模式<br>d. 事件来源<br>e. 传奇模式</p><h5 id="4-可观察性模式"><a href="#4-可观察性模式" class="headerlink" title="4. 可观察性模式"></a>4. 可观察性模式</h5><p>可观察性模式对于设计微服务的适当监控和遥测非常关键，即集中式日志、分布式跟踪、性能指标、微服务实例的健康检查等等。<br>重要的模式有<br>a. 日志聚合模式<br>b. 性能度量<br>c. 分布式跟踪<br>d. 健康检查</p><h5 id="5-交叉关注设计模式"><a href="#5-交叉关注设计模式" class="headerlink" title="5. 交叉关注设计模式"></a>5. 交叉关注设计模式</h5><p>交叉关注模式用于处理微服务如何相互发现，如何将微服务配置外部化，如何使用断路器处理服务故障，以及如何部署微服务。<br>重要的模式有<br>a. 外部配置模式<br>b. 服务发现模式<br>c. 断路器模式<br>d. 蓝绿部署模式</p><h4 id="微服务的优势"><a href="#微服务的优势" class="headerlink" title="微服务的优势"></a>微服务的优势</h4><ul><li>微服务遵循单一责任原则。</li><li>更好的合规性和数据安全性。</li><li>自成一体，可独立部署</li><li>动态扩展，与单片机相比，扩展成本更低</li><li>进入发布的时间更快</li><li>我们可以为每个微服务使用多种编程语言和框架</li><li>更有弹性的应用程序和改进的故障隔离。</li><li>广泛的设计模式的自制性</li></ul><h4 id="微服务的弊端"><a href="#微服务的弊端" class="headerlink" title="微服务的弊端"></a>微服务的弊端</h4><p>微服务架构有其自身的缺点，具体如下</p><ul><li>增加了服务间通信的复杂性</li><li>通信失败的几率更高</li><li>分布式事务的回滚很复杂</li><li>更多的资源和开销</li><li>难以测试和调试</li><li>维护多个小型服务很复杂</li><li>复杂的部署</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在这篇文章中，我们看到了微服务架构以及它与单体应用的不同之处。<br>然后，我们看了什么是微服务设计模式和不同的类型。<br>还看到了微服务架构的优势和劣势。</p><p>希望这篇文章对你有用，感谢你的阅读！!</p><!-- https://medium.com/javarevisited/do-you-know-about-microservices-and-their-design-patterns-e8d7c8193dfe -->]]></content>
      
      
      <categories>
          
          <category> Microservices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microservices </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter游戏开发 初探Bonfire</title>
      <link href="/Flutter-games-exploring-Bonfire.html"/>
      <url>/Flutter-games-exploring-Bonfire.html</url>
      
        <content type="html"><![CDATA[<p>新的工具包 “Flutter Casual Games Toolkit “已随Flutter 3.0公布。它并不假装是任何问题的通用解决方案，但我们看到它是如何向游戏开发迈出 “官方 “的第一步。</p><p>还有其他工具，其中最强大的是Flame框架。在Flame的基础上建立了 “Bonfire”–一个游戏开发框架。它看起来至少是开发RPG游戏的最简单的框架。</p><img src="/Flutter-games-exploring-Bonfire/1.webp" class="" title="示意图 width=400"><span id="more"></span><p>在这篇文章中，我想分享我对Bonfire的经验，并展示它的优点和缺点……如果你还不确定在你的第一个游戏项目中使用什么框架，我希望我的文章会对你有所帮助。</p><h4 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h4><p>让我们来总结一下框架的主要功能，在简短的列表中。</p><ul><li>现成的控制层：支持键盘和虚拟游戏板。</li><li>实体 “玩家”、”敌人”、”追随者 “都可以使用。</li><li>用于创建 “飞行攻击物体 “的实体，如子弹。近战攻击机制。</li><li>实现NPC向玩家移动并攻击他的混合器和函数。</li><li>为玩家的角色在屏幕上用鼠标点击的点进行寻路。</li><li>支持平铺地图编辑器、动画平铺、与平铺的碰撞、读取平铺属性。将Tile放在不同的高度上。</li><li>将Tile中定义的对象映射到Dart的类中，以实现自定义行为。</li><li>照明，全屏色彩效果。</li><li>平滑的相机移动。</li><li>用户界面，对话框。</li><li>迷你地图。</li><li>…也许还有一些我漏掉的东西，或者在我准备这篇文章的时候已经实现了。</li></ul><p>这个工具箱看起来非常酷，对吗？<br>真的，这个框架允许我们在Tiled中建立大部分的游戏，使用对象的属性设置所有需要的参数，然后在你的代码中读取它们，并通过继承预定义的实体在自定义类中实现缺失的游戏逻辑。</p><p>在建立一个项目后，一切都非常简洁明了：我们有一个游戏对象，对象有回调来接受伤害，处理与其他对象的碰撞，运动时调用函数等等。你什么都有了，只要去实现你的想法就可以了! 我试着这么做了…</p><h4 id="我们的实验性游戏"><a href="#我们的实验性游戏" class="headerlink" title="我们的实验性游戏"></a>我们的实验性游戏</h4><p>我决定不再做另一个RPG游戏：首先是因为我没有任何有灵感的想法；其次是因为Bonfire太容易了，你将在Tiled中完成大约80%的工作。当你想探索框架的时候，它的能力和界限不是你所需要的。</p><p>你还记得一个老游戏，”坦克大战”吗？<br>在黑暗的背景下，建筑物都是用砖头砌成的，你的坦克保护着 “老鹰 “不受其他坦克的攻击，砖头是可以摧毁的。如果在那个 “古老 “的时代，人们能够创造这样的游戏，那么用现代工具包的所有力量来实现同样的游戏应该是非常容易的。</p><img src="/Flutter-games-exploring-Bonfire/2.webp" class="" title="示意图 width=400"><h4 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1. 控制器"></a>1. 控制器</h4><p>我们在框架中捆绑了配置游戏控制器的类–移动设备用虚拟摇杆，桌面用按键：WASD。<br>但在我这里，应该只允许在第四个方向移动。在Bonfire中，每个方向都可以移动，所以我们需要削减不必要的功能。</p><p>我没有任何其他的解决方案，只是复制粘贴并重写整个混合器 “MovementByDirection “的内容。<br>这不是一个好的做法，但仍然是 “好的”–只是一个完整的重新实现的实体，不是一个问题 让我们继续前进…</p><h4 id="2-准备好敌人的实体"><a href="#2-准备好敌人的实体" class="headerlink" title="2. 准备好敌人的实体"></a>2. 准备好敌人的实体</h4><p>在这里，我们面临着类似的情况：我们需要将NPC绑定为4个方向的运动。<br>在这种情况下，我们不需要复制粘贴任何东西，但是为了实现所需的行为，你应该熟悉Bonfire的函数调用顺序：什么时候应该使用 “update()”，它与 “onMove() “有什么不同，什么是 “moveLeft”、”moveRight “等等。<br>学习内部框架结构、深入的类/混合体层次结构等不是问题，但这不是你可以称之为 “简单 “或 “直观 “的东西。<br>这里是Bonfire开始向你展示其复杂性的地方。</p><h4 id="3-为子弹准备好的实体，承受和接收伤害"><a href="#3-为子弹准备好的实体，承受和接收伤害" class="headerlink" title="3. 为子弹准备好的实体，承受和接收伤害"></a>3. 为子弹准备好的实体，承受和接收伤害</h4><p>这里是我们在Bonfire中实现的功能和实现游戏机制所需的功能之间的第一个冲突点。</p><p>在Bonfire中，子弹是通过 “FlyingAttackObject “类实现的。<br>它在与任何游戏组件碰撞的瞬间就会爆炸（如果它有任何关于碰撞的信息的话）。伤害只由 “可攻击 “类型的物体接受。看起来很有用。让我们与”坦克大战”的原始游戏机制进行比较。</p><ul><li>有坦克，它们接受伤害。标准Bonfire的机制在这里应该很好用。</li><li>这里有可破坏的砖块，我不知道如何在不修改的情况下使用Bonfire的机制，因为砖块在第一次撞击后不会消失–只有砖块的一部分应该被删除。</li><li>最后，我们在地图上有水。水砖应该是可以碰撞的，因为坦克不能游泳，但子弹应该在水面上自由飞行。</li></ul><p>我们应该如何解决这个问题呢？我决定采用以下方法：</p><ul><li>坦克的一切都很好，让我们保持标准的力学。</li><li>对于墙壁–第一个想法是用小Tile来建造地图，但这意味着大量疯狂的手工作业，因为最小的Tile尺寸是4px。另外，用引擎处理这么多的瓦片对象也是无效的。<br> 然后我选择了另一种方法：当子弹击中墙壁时，我们计算子弹的飞行矢量，并在这个方向上将Tile的尺寸缩小为瓦片全尺寸的一半。如果尺寸为零，那么这块Tile就应该被移除。<br> 该方案运行良好，但所有来自 “onCollision() “函数的标准机制应该从头开始重写。</li><li>水。这里我们需要再次重写子弹类的 “onCollision() “函数以忽略与水的碰撞。<br>这看起来并不复杂，但是一个问题接着另一个问题出现：Bonfire看不到不同类型的Tile之间有任何区别。<br>为了让引擎看到水是水，砖是砖，我们应该在它的核心部分做一些额外的工作……我将在第7部分描述它。</li></ul><h4 id="4和5。敌人对玩家的移动、寻路。"><a href="#4和5。敌人对玩家的移动、寻路。" class="headerlink" title="4和5。敌人对玩家的移动、寻路。"></a>4和5。敌人对玩家的移动、寻路。</h4><p>在这一点上，所有框架的 “开箱即用 “的解决方案都变得无用。<br>敌人的移动只可能在第四个方向上进行。另外，有很多障碍物需要准确地绕过，以便有目的地到达某个地方。</p><p>捆绑式寻路也让人吃惊。<br>首先，它只为玩家实现。对于任何其他的游戏对象，你应该自己实现一切。<br>Bonfire的作者使用了第三方软件包<a href="https://pub.flutter-io.cn/packages/a_star_algorithm%EF%BC%8C%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%AE%83%E6%98%AF%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E9%A2%9D%E5%A4%96%E7%9A%84%E6%A1%86%E6%9E%B6%E6%8E%A5%E5%8F%A3%E3%80%82">https://pub.flutter-io.cn/packages/a_star_algorithm，直接使用它是很简单的，不需要额外的框架接口。</a><br>但是，我们又面临另一个问题：如果地图上有复杂的浮雕，而且点与点之间的距离很长，那么这个算法会使整个游戏变慢，我们会看到低FPS。<br>所有的操作都是单线程的，所以显示器上的坦克越多，游戏就会越慢。这就是为什么我最终停止了随机移动和在转角处改变方向的简单算法，以及当玩家在视线范围内时开火。<br>这并不完全是我想做的，但仍然比原游戏中的行为更聪明。</p><h4 id="6-支持平铺，游戏对象的不同高度。"><a href="#6-支持平铺，游戏对象的不同高度。" class="headerlink" title="6. 支持平铺，游戏对象的不同高度。"></a>6. 支持平铺，游戏对象的不同高度。</h4><p>我已经提到了对平铺地图的支持。<br>现在让我们来描述一下我所说的对象的高度。<br>有时候，一种物体应该被渲染在另一种物体之上。<br>例如，想象一下RPG游戏中的地牢和那里的火把或檐口。这些物体比玩家呆在地板上的高度要高，所以当玩家在它们下面移动时，它应该被画在上面。</p><p>在Flame中，我们有一个特殊的参数来控制这个。<br>游戏对象的 “优先级 “属性。它是一个整数，它越高，相应的物体就被放在越高的位置。<br>令人惊讶的是，Bonfire游戏不允许你使用这个功能！你唯一能做的就是影响游戏对象的位置。<br>你可以通过在Tiled编辑器中指定 “高于 “作为Tiled类型的名称来影响对象的摆放高度的唯一方法。有了 “高于”，这个Tile就会被渲染到游戏中所有物体的上方。<br>我还在最后的提交中发现了一个新的类型 “dynamicAbove”，但似乎没有办法直接控制 “优先级”。</p><p>Bonfire完全控制了 “优先级”，因为它是以游戏为导向的，摄像机被放置在45或70度的地方。它并不是简单地从上到下垂直观察。因此，一个物体有可能与另一个物体重叠，只是因为它在Y轴上比较低。<br>也许作者会扩展框架以允许使用多个高度层，但现在所有可用的高度层都被硬编码在 “LayerPriority “类中，添加自己的层的唯一方法是编辑框架的代码。</p><p>为什么我开始探索这个问题？<br>在最初的游戏中，背景只是一个简单的深色，而且在破坏后墙壁简单地消失。<br>我决定添加一个地面纹理，而不是深色背景，并添加灰烬纹理来代替被破坏的墙。<br>因此，灰烬的位置应该比地面高，但比任何其他游戏对象低。<br>不幸的是，我没有任何工具来实现这个目标，最后我fork了这个框架，并直接在其中添加了一个所需的逻辑。</p><p>当你期望只是简单地使用现成的 “开箱即用 “的解决方案时，这可不是什么好消息。</p><h4 id="7-将地图上的对象和Tile映射到Dart的自定义类中"><a href="#7-将地图上的对象和Tile映射到Dart的自定义类中" class="headerlink" title="7. 将地图上的对象和Tile映射到Dart的自定义类中"></a>7. 将地图上的对象和Tile映射到Dart的自定义类中</h4><p>为了实现我的目标，这是下一个需要重写的部分。</p><p>我很惊讶Bonfire不允许框架的用户看到Tile之间的差异。<br>这个功能只适用于Tiled “objects”，但它和 “tile “是完全不同的实体。<br>Tile “对象 “没有精灵或动画，它只能在地图上被定位和调整大小。最简单的描述是，”物体 “只是地图上有个别名称的方块。因此，我希望在Bonfire上能够创建单独的类来处理 “砖块 “，但这并没有实现。事实上，Bonfire的逻辑是这样的。</p><p>所有打算在游戏中进行互动的对象，都应该在Tiled中创建为 “对象 “实体。对象可以在地图加载时被转化为自定义类，但你应该手动进行精灵或动画加载。<br>所有的环境对象，比如墙壁、地板、非交互式的装饰物都应该被创建为Tile。但是你可以指定某些Tile应该是可碰撞的。<br>你可以在文档和教程中看到这一点。<br>第一次是我感到困惑的原因，为什么作者不在所需的类中直接映射Tile，但你可以看到这个功能还没有被实现。</p><p>在我看来，这个功能很关键，因为:</p><ul><li>在处理子弹的游戏逻辑时，我需要知道Tile的类型：以区别水的Tile和砖的Tile。</li><li>我需要控制每块砖瓦在被子弹击中时缩小其尺寸。</li><li>最后，我想实现额外的机制：允许玩家躲在森林里，对电脑敌人来说是隐形的。</li></ul><p>所以，如果仅限于Bonfire的内置功能，我们也许应该在Tile层上面再画一层物体。这看起来比探索和修改框架的源代码要困难得多。</p><p>最后，我实现了额外的构建器–”tileBuilder “和 “decorationBuilder”。与内置的 “objectBuilder “一起，它可以为任何Tile对象创建每一个需要的类。下面是我的代码例子:</p><img src="/Flutter-games-exploring-Bonfire/3.webp" class="" title="示意图 width=400"><h4 id="最令人失望的是"><a href="#最令人失望的是" class="headerlink" title="最令人失望的是"></a>最令人失望的是</h4><p>最后，我拥有了实现游戏逻辑的所有必要工具–多亏了fork和对框架的深入修改。</p><p>然后我面临另一个惊喜：在桌面上的性能大约是20-30FPS，而在手机上只有12-15FPS!</p><img src="/Flutter-games-exploring-Bonfire/4.webp" class="" title="示意图 width=400"><p>我开始探索这个问题，禁用了我以前写的所有游戏逻辑，但FPS总是在30左右。<br>之后，我试着去掉有碰撞的图层和装饰性Tile。<br>这有更好的效果，但仍然不是60FPS。最后，我禁用了所有的图形，玩家的坦克站在绝对黑色的屏幕上，游戏场周围有很小的砖块方块。<br>好吧，这样的配置达到了60FPS，但只是在你试图移动或开火或产生敌人之前才可以。</p><img src="/Flutter-games-exploring-Bonfire/5.webp" class="" title="示意图 width=400"><p>“也许我fork错了什么？” - 我曾想过，并开始建立和启动Bonfire的演示应用程序。<br>而且，令人惊讶的是! - 它也只在30FPS下工作！！。</p><p>在这一点上，我完成了我对框架或写在这个框架上的游戏的任何尝试。<br>在放弃一切之前，我再次研究了Bonfire的源代码，并将其内部逻辑与Flame进行了比较。现在我想我可以列举出Bonfire如此缓慢的原因了（而且，我确信，如果没有任何根本性的架构改变，它在未来也会变得缓慢）。</p><h4 id="后台操作"><a href="#后台操作" class="headerlink" title="后台操作"></a>后台操作</h4><p>除非你在 “更新 “中写下自己的逻辑，否则Flame在后台不会发生任何事情。<br>如果你启用它，只有碰撞会被计算。这就是全部。</p><p>在Bonfire中，至少有3个后台任务被永久地启动。</p><ul><li>循环浏览所有游戏对象并确定不可见的对象。不在视口中的物体将不会被处理。我确信这是一个可疑的解决方案：如果我们想避免不必要的渲染–这是图形引擎应该处理的工作，而且我相信它会做得更快、更有效。</li><li>另一个循环穿过所有游戏对象来计算每个对象的 “优先级”。正如我在第6部分所说的，Bonfire会自动计算这个参数以实现 “倾斜的相机 “视图。<br> 但是，实施看起来并不优化：例如，会有一些额外的层，其中的对象从不相互重叠。或者说，如果位置没有变化就不重新计算。</li><li>碰撞检测。作者试图通过传递当前不在视口中的物体来优化这一点。有了这种行为，你可以很容易地发现卡在纹理里的NPC，甚至是游戏场外的NPC，因为NPC可以在屏幕上看不到的时候穿过墙壁。</li></ul><p>所有这些操作都会对你的游戏产生持续的负载，即使没有写任何一行自定义的游戏逻辑。负载量只是由你在Tiled编辑器中绘制的对象数量决定的。</p><p>后台操作的间隔（但所有操作都在单线程中）。</p><img src="/Flutter-games-exploring-Bonfire/6.webp" class="" title="示意图 width=400"><img src="/Flutter-games-exploring-Bonfire/7.webp" class="" title="示意图 width=400"><h4 id="Tile的渲染"><a href="#Tile的渲染" class="headerlink" title="Tile的渲染"></a>Tile的渲染</h4><p>Flame在渲染Tile时不会创建任何额外的实体。<br>Tile不是游戏对象，不会被游戏循环事件处理。Flame使用SpriteBatch（<a href="https://pub.dev/documentation/flame/latest/sprite/SpriteBatch-class.html%EF%BC%89%E6%9D%A5%E4%BC%98%E5%8C%96%E5%9C%B0%E5%9B%BE%E7%9A%84%E6%B8%B2%E6%9F%93%E3%80%82">https://pub.dev/documentation/flame/latest/sprite/SpriteBatch-class.html）来优化地图的渲染。</a><br>我想它可能会更优化，但无论如何它仍然比Bonfire的方法快。</p><p>Bonfire把每块Tile当作游戏对象。<br>对于每一块Tile，Bonfire都要进行计算，这块Tile是否可见？每块Tile都有可能包含碰撞，所以每块Tile也要进行检查。<br>最后，”优先级 “参数也要为每块Tile计算。</p><h4 id="碰撞处理"><a href="#碰撞处理" class="headerlink" title="碰撞处理"></a>碰撞处理</h4><p>Flame将所有碰撞对象分为两类。</p><ul><li>被动对象，比如墙。这类物体只是在其位置上移动，不会相互碰撞。</li><li>主动对象，如玩家、子弹或敌人。这类物体主动移动，它可以相互碰撞，也可以与被动物体碰撞。</li></ul><p>这种方法可以减少被动物体的计算时间。我确信被动物体是大多数典型游戏地图的主要组成部分。</p><p>在Bonfire中，物体类型之间没有区别。<br>每个物体都是平等的，每个物体都被计算。系统每次都会检查并报告你与两面静态墙的碰撞情况–这是你较新需要的信息（很可能）。<br>额外的开销是Bonfire的运动系统。<br>在每次对移动物体的 “update() “调用中，Bonfire都会在下一次勾选时将该物体移动到它的位置，并进行额外的碰撞计算。因此，你添加的移动对象越多，系统就越慢。</p><p>不要忘了，所有的计算都是在单线程上进行的，这里没有使用额外的 “隔离”–所以效率是非常有限的。</p><h4 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h4><p>这可能是最无害的问题，但无论如何。<br>在Bonfire中，大多数动画都是从头开始创建的：你传递文件名，框架切割图像，并从它制作独立的帧……只有图像本身被缓存，但如果把准备好的帧也缓存起来，那就很有用了。<br>我认为，这种方法有可能导致在需要创建新动画的时候出现短暂的 “冻结 “现象。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我自己的决定是根本不使用Bonfire。<br>首先，我认为如果你fork它并为你的游戏目的重写它的内部逻辑，它可能是有用的。但这样的性能瓶颈是非常令人失望的。</p><p>尽管如此，仍然有很多有用的东西你可以从Bonfire中拿到你的项目中去。例如，一个操纵杆组件。或者全屏的动画色彩过滤器。<br>但你应该小心，并始终分析你要复制的东西。</p><p>Bonfire有机会克服这些问题吗？我认为没有进化的方法。<br>太多的代码已经写好了，系统的不同部分之间存在着大量的依赖关系，要使引擎的性能和灵活性提高，需要进行非常彻底的改变。即使作者决定重新设计所有的东西，它也将是完全不同的框架。</p><p>最后，Bonfire真的有它的应用领域吗？<br>我相信，如果你的项目不复杂，你可以使用它：地图小，对象数量少，游戏逻辑简单。如果你知道90%的工作都可以在Tiled中完成–Bonfire绝对是你的选择！</p><p>Flame本身会不会有更高的性能？肯定是的!<br>但不要指望如果你创建了成千上万的对象，引擎会轻松地处理它们。这个错误会导致你遇到Bonfire的性能问题。</p><p>如果你真的想让你的Flutter游戏更快，即使用Flame！<br>你也需要开发特殊的优化，适合你的游戏机制。</p><!-- https://asgalex.medium.com/flutter-games-exploring-bonfire-1190938f3020 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Bonfire </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8个必须知道的Stream API使用方法</title>
      <link href="/8-Must-know-Stream-API-Usages.html"/>
      <url>/8-Must-know-Stream-API-Usages.html</url>
      
        <content type="html"><![CDATA[<img src="/8-Must-know-Stream-API-Usages/1.webp" class="" title="示意图 width=400"><p>作为一名java开发工程师，数组和集合在我的代码中随处可见。我经常使用集合或数组来处理数据，如过滤和对象转换。我相信大家对数组的数据处理已经非常熟悉了。</p><span id="more"></span><p>但是当数据处理比较复杂的时候，我们的代码就会非常长，难以理解。这个时候，我通常会把代码拆成方法，并给出有意义的方法名称，这样可以解决一部分问题。然而，在java8之后，官方有了一个更有效、更方便的解决方案：Stream API。</p><p>Stream是Java8中处理集合的关键抽象。它可以指定你要对集合进行的操作，并且可以进行非常复杂的操作，如搜索、过滤和映射数据。<br>使用Stream API对集合数据进行操作，类似于使用SQL进行数据库查询。也可以使用Stream API来执行并行操作。简而言之，Stream API提供了一种高效且易于使用的数据处理方式。</p><p>Stream具有以下特点:</p><ul><li>它不是一个数据结构，不保存数据。</li><li>懒惰评估，在流的中间处理过程中，只记录操作，不立即执行，直到执行终止操作才会进行实际计算。</li></ul><p>今天我将分享一些工作中常用的、非常有用的API。</p><h4 id="列表到地图"><a href="#列表到地图" class="headerlink" title="列表到地图"></a>列表到地图</h4><p>在我们的工作中，经常会遇到列表或数组被转换为地图的场景。Collectors.toMap可以将List转换成Map。<br>代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListToMap</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Lance"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         *  list to map         *  (k1, k2) -&gt;k1 indicates that if there is a duplicate key, the first key is retained and the second key is discarded         */</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">,</span> user <span class="token operator">-&gt;</span> user<span class="token punctuation">,</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> k1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user<span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，还有Collectors.toList(),Collectors.toSet()，这意味着将相应的流转换为一个List或Set。</p><h4 id="使用groupingBy进行分组"><a href="#使用groupingBy进行分组" class="headerlink" title="使用groupingBy进行分组"></a>使用groupingBy进行分组</h4><p>分组在执行聚合数据操作时经常使用，比如按国籍对用户进行分组。说到分组，相信大家都会想到SQL的group by。在Java8之前，我们可能需要这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Daivd"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Lance"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"England"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> country <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>userList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你使用groupingBy，只需要一行代码就可以了:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result<span class="token operator">=</span>users<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用限制和跳过的内存分页"><a href="#使用限制和跳过的内存分页" class="headerlink" title="使用限制和跳过的内存分页"></a>使用限制和跳过的内存分页</h4><p>有时我们在内存中聚合数据后，数据量可能太大，无法一次性将数据返回到前端。这个时候，就需要分页。Stream api提供了limit和skip来完美支持它。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pageableList<span class="token operator">=</span>list<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用filter-来过滤元素"><a href="#使用filter-来过滤元素" class="headerlink" title="使用filter()来过滤元素"></a>使用filter()来过滤元素</h4><p>从集合中过滤掉不符合标准的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Get all students older than 18</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentNames <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student<span class="token operator">-&gt;</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用-sorted-Comparator-进行排序"><a href="#使用-sorted-Comparator-进行排序" class="headerlink" title="使用 sorted+Comparator 进行排序"></a>使用 sorted+Comparator 进行排序</h4><p>在集合操作中，排序绝对是一个高频的操作。虽然有现成的集合工具进行排序，但Stream api整合了这一功能，形成了自己的功能生态，进一步提高了api的便利性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Daivd"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Lance"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"England"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> sortedUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用reduce进行聚合评估"><a href="#使用reduce进行聚合评估" class="headerlink" title="使用reduce进行聚合评估"></a>使用reduce进行聚合评估</h4><p>Stream api也有一个非常有用的方法reduce()。使用reduce可以聚合集合中的所有元素，得到一个单一的值。最典型的情况是数组的总和。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，你也可以使用reduce来执行其他的聚合操作，比如寻找一个数组的平均值。</p><h4 id="使用map来转换类型"><a href="#使用map来转换类型" class="headerlink" title="使用map来转换类型"></a>使用map来转换类型</h4><p>map操作是对流中的元素进行重新处理，形成一个新的流。这在开发中很有用，例如，我有一个用户的集合，但我只需要使用用户的名字和年龄，使用map方法就可以做到这点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Daivd"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Lance"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"England"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo</span><span class="token punctuation">&gt;</span></span> userVoList <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user<span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userVo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userVo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> userVo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flatMap操作可以将同一类型的多个流合并为一个流。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Daivd"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Lance"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"England"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"James"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>流API以声明的方式处理集合数据，可以极大地提高Java程序员的工作效率，使我们能够写出高效、干净、简洁的代码。<br>我希望每个人都能掌握Stream Api，写出优雅的代码。谢谢你的阅读!</p><!-- https://levelup.gitconnected.com/8-must-know-stream-api-usages-b72ebc50d447 -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> StreamAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nylo v3.x - Flutter的最新微框架</title>
      <link href="/Nylo-v3-x-%E2%80%94-Flutter%E2%80%99s-Latest-Micro-Framework.html"/>
      <url>/Nylo-v3-x-%E2%80%94-Flutter%E2%80%99s-Latest-Micro-Framework.html</url>
      
        <content type="html"><![CDATA[<p>Nylo v3.x已经面世，可以帮助你更容易地构建Flutter应用程序。</p><img src="/Nylo-v3-x-%E2%80%94-Flutter%E2%80%99s-Latest-Micro-Framework/1.png" class="" title="示意图 width=400"><span id="more"></span><p>我很高兴地分享Nylo v3.x终于发布了。<br>这个版本是疯狂的，有一些小的变化，但也有一些大的补充，使开发Flutter应用程序变得轻而易举。</p><h4 id="首先，让我们开始吧"><a href="#首先，让我们开始吧" class="headerlink" title="首先，让我们开始吧"></a>首先，让我们开始吧</h4><p>你可以通过以下方式下载Nylo。</p><ul><li><a href="https://nylo.dev/">https://nylo.dev</a></li><li>git clone <a href="https://github.com/nylo-core/nylo.git">https://github.com/nylo-core/nylo.git</a></li></ul><p>打开项目后，构建并运行该应用程序。</p><img src="/Nylo-v3-x-%E2%80%94-Flutter%E2%80%99s-Latest-Micro-Framework/2.png" class="" title="示意图 width=400"><p>祝贺你! 现在让我们深入了解一下v3.x的新更新。</p><h4 id="突出的特点"><a href="#突出的特点" class="headerlink" title="突出的特点"></a>突出的特点</h4><ul><li>编写API服务的一种新的优雅方式</li><li>事件+监听器</li><li>可启动的提供者</li><li>帮助者</li><li>新网站</li></ul><p>为了保持故事的短小精悍，我将只介绍上述内容。你可以在<a href="https://nylo.dev/">https://nylo.dev</a>，查看文档以了解更多。</p><h4 id="API服务"><a href="#API服务" class="headerlink" title="API服务"></a>API服务</h4><p>我将从最酷的新增功能（在v3.x中）开始，它是新的网络助手。<br>在你的项目中，导航到”/lib/app/networking/“。在这里你可以为你的应用程序添加你的API服务。</p><h4 id="提出HTTP请求"><a href="#提出HTTP请求" class="headerlink" title="提出HTTP请求"></a>提出HTTP请求</h4><p>在你的API服务中，使用网络方法来建立你的API请求。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span> <span class="token punctuation">{</span>  <span class="token class-name">ApiService</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">BuildContext</span><span class="token operator">?</span> buildContext<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>buildContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">String</span> <span class="token keyword">get</span> baseUrl <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">"https://jsonplaceholder.typicode.com"</span></span><span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> network<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/users/1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>请求参数</code>是一个<a href="https://pub.dev/packages/dio">Dio</a>实例。</p><p>使用泛型，你可以使用Nylo的模型解码器从响应中自动返回一个对象。</p><h4 id="引入模型解码器"><a href="#引入模型解码器" class="headerlink" title="引入模型解码器"></a>引入模型解码器</h4><p>模型解码器是Nylo v3.x中引入的一个新概念。它们使你很容易返回你的对象，如下面的例子:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> network<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/users/1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件: lib/config/decoders.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">final</span> modelDecoders <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// add your model and handle the return of the object</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="这是怎么做到的？"><a href="#这是怎么做到的？" class="headerlink" title="这是怎么做到的？"></a>这是怎么做到的？</h4><p>在幕后，Nylo会查看你的config/decoders.dart文件，并使用modelDecoders变量来决定解码时使用哪种 “类型”。<br>下面是一个例子:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">final</span> modelDecoders <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一个键是你的模型的<code>type</code>，例如，使用上面的例子，将是<code>User</code>和<code>List&lt;User&gt;</code>。</li><li><code>(data)</code>参数将包含来自你的API请求的HTTP响应体。</li></ul><p>接下来，创建一种方法，初始化你的模型。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token operator">?</span> email<span class="token punctuation">;</span>  <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'name'</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'email'</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你可以像下面的例子一样，使用<code>network</code>自动返回你的模型的正确表示。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> network<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/users/1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> network<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/users"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="没有模型解码器的HTTP请求"><a href="#没有模型解码器的HTTP请求" class="headerlink" title="没有模型解码器的HTTP请求"></a>没有模型解码器的HTTP请求</h4><p>你也可以使用网络助手的handleSuccess参数来处理HTTP请求。</p><p>下面是一些例子:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">// Example: returning an Object</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">network</span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/users/1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        handleSuccess<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// response - Dio Response object</span>          <span class="token keyword">dynamic</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// Example: returning a String</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">network</span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/message/1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        handleSuccess<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// response - Dio Response object</span>          <span class="token keyword">dynamic</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'name'</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">'Anthony'</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"It's Anthony"</span></span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"Hello world"</span></span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// Example: returning a bool</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">network</span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/user/1"</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">"name"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Anthony"</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        handleSuccess<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// response - Dio Response object</span>          <span class="token keyword">dynamic</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'status'</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">'OK'</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，你不需要在<code>network</code>上指定任何通用类型。在<code>handleSuccess</code>回调里面，你只需要自己处理返回。</p><p>你也可以使用<code>handleFailure</code>参数来处理失败的HTTP响应。</p><h4 id="在你的项目中使用API服务"><a href="#在你的项目中使用API服务" class="headerlink" title="在你的项目中使用API服务"></a>在你的项目中使用API服务</h4><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _MyHomePageState <span class="token keyword">extends</span> <span class="token class-name">NyState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token class-name">ApiService</span> _apiService <span class="token operator">=</span> <span class="token class-name">ApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token metadata function">@override</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span><span class="token operator">?</span> user <span class="token operator">=</span> <span class="token keyword">await</span> _apiService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User? instance</span>    <span class="token comment">// or</span> <span class="token class-name">User</span><span class="token operator">?</span> user <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApiService</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User? instance</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>如果你对拦截器感到陌生，不要担心。它们提供了一种在你的HTTP请求被发送之前拦截它们的方法。</p><p>拦截器提供了以下的回调。</p><ul><li>onRequest: 在发送之前修改请求。</li><li>onResponse: 对响应数据做一些处理。</li><li>onError。处理HTTP请求中的错误。<br>Nylo允许你为你的API服务添加新的拦截器，就像下面的例子一样。</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span> <span class="token punctuation">{</span>  <span class="token class-name">ApiService</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">BuildContext</span><span class="token operator">?</span> buildContext<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>buildContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token metadata function">@override</span>  <span class="token keyword">final</span> interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">:</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// Add more interceptors for the API Service e.g. below</span>    <span class="token comment">// BearerAuthInterceptor: BearerAuthInterceptor(),</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在项目中的如下文件查看拦截器的实现: “lib/app/networking/dio/interceptors/logging_interceptor.dart”</p><h4 id="创建一个新的API服务"><a href="#创建一个新的API服务" class="headerlink" title="创建一个新的API服务"></a>创建一个新的API服务</h4><pre class="line-numbers language-none"><code class="language-none">flutter pub run nylo_framework:main make:api_service shop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令会在目录/lib/app/networking/*下创建一个新的API服务，名称为shop_api_service.dart。</p><h4 id="增加模型选项"><a href="#增加模型选项" class="headerlink" title="增加模型选项"></a>增加模型选项</h4><pre class="line-numbers language-none"><code class="language-none">flutter pub run nylo_framework:main make:api_service shop --model="Shop"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>模型选项–model=”Shop”告诉Nylo为你新创建的API服务添加以下方法：查找、创建、删除、更新和获取全部内容。</p><h4 id="增加了URL标志"><a href="#增加了URL标志" class="headerlink" title="增加了URL标志"></a>增加了URL标志</h4><pre class="line-numbers language-none"><code class="language-none">flutter pub run nylo_framework:main make:api_service shop --url="https://myapi-baseurl.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-url```选项告诉Nylo将baseUrl设置为你提供的值。" data-language="url```选项告诉Nylo将baseUrl设置为你提供的值。"><code class="language-url```选项告诉Nylo将baseUrl设置为你提供的值。">#### 事件+监听器当你需要在你的应用程序中发生一些事情后处理逻辑时，事件是强大的。Nylo提供了一个简单的事件实现，允许你调用为该事件注册的监听器。监听器可以从事件的有效载荷中执行逻辑。下面是一个事件的例子，我们设想我们拥有一个销售T恤的电子商务应用程序。当用户成功付款后，我们想派发一个事件来处理以下事情。 * 清除用户的购物车 * 使用谷歌标签管理器来记录事件，以便进行分析。```dartimport 'package:nylo_framework/nylo_framework.dart';import 'package:google_tag_manager/google_tag_manager.dart' as gtm;class PaymentSuccessfulEvent implements NyEvent {final listeners = {    SanitizeCheckoutListener: SanitizeCheckoutListener(),    GTMPurchaseListener: GTMPurchaseListener(),  };}class SanitizeCheckoutListener extends NyListener {  handle(dynamic event) async {    await NyStorage.store('cart', null); // clear the cart  }}class GTMPurchaseListener extends NyListener {  handle(dynamic event) async {    // Get payload from event    Order order = event['order'];   // Push event to gtm (Google tag manager).    gtm.push({      'ecommerce': {        'purchase': {          'actionField': {            'id': order.id,            'revenue': order.revenue,            'tax': order.tax,            'shipping': order.shipping          },          'products': order.line_items        }      }    });  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Nylo中调度一个事件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">stripePay</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token comment">// create the order</span>  <span class="token class-name">Order</span><span class="token operator">?</span> order <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderApiService</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> api<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// dispatch the event</span>  <span class="token keyword">await</span> event<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentSuccessfulEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">'order'</span></span><span class="token punctuation">:</span> order<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在 “lib/app/events/“目录下添加事件。</p><h4 id="创建新事件"><a href="#创建新事件" class="headerlink" title="创建新事件"></a>创建新事件</h4><pre class="line-numbers language-none"><code class="language-none">flutter pub run nylo_framework:main make:event message_created_event<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a>Providers</h4><p>在Nylo中，当你的应用程序首次运行时，提供程序将从你的main.dart文件中启动。所有的提供者都在”/lib/app/providers/“中，你可以修改这些文件或使用Metro创建你的提供者。</p><p>对提供者的需求是什么？<br>随着项目的发展，你可能需要在你的应用程序运行前初始化更多的包、类或代码。</p><p>提供者提供了一个整洁的解决方案，使你的main.dart文件不致臃肿。让我们来看看一些开箱即注册的提供者。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// file: lib/app/providers/app_provider.dart</span><span class="token keyword">class</span> <span class="token class-name">AppProvider</span> <span class="token keyword">implements</span> <span class="token class-name">NyProvider</span> <span class="token punctuation">{</span>  <span class="token function">boot</span><span class="token punctuation">(</span><span class="token class-name">Nylo</span> nylo<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token class-name">NyLocalization</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>        localeType<span class="token punctuation">:</span> localeType<span class="token punctuation">,</span>        languageCode<span class="token punctuation">:</span> languageCode<span class="token punctuation">,</span>        languagesList<span class="token punctuation">:</span> languagesList<span class="token punctuation">,</span>        assetsDirectory<span class="token punctuation">:</span> assetsDirectory<span class="token punctuation">,</span>        valuesAsMap<span class="token punctuation">:</span> valuesAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// file: lib/app/providers/route_provider.dart</span><span class="token keyword">class</span> <span class="token class-name">RouteProvider</span> <span class="token keyword">implements</span> <span class="token class-name">NyProvider</span> <span class="token punctuation">{</span>  <span class="token function">boot</span><span class="token punctuation">(</span><span class="token class-name">Nylo</span> nylo<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    nylo<span class="token punctuation">.</span><span class="token function">addRouter</span><span class="token punctuation">(</span><span class="token function">appRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nylo<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个提供者都有助于启动应用程序。一个是添加路由，另一个是初始化项目的本地化。</p><p>您可以修改您的提供者或创建新的提供者，以促进您的Flutter应用程序中的新服务。</p><h4 id="创建一个新的provider"><a href="#创建一个新的provider" class="headerlink" title="创建一个新的provider"></a>创建一个新的provider</h4><pre class="line-numbers language-none"><code class="language-none">flutter pub run nylo_framework:main make:provider firebase_provider<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h4><p>一些新增加的小功能。</p><p>whenEnv - 这允许你在你的应用程序的环境处于某种状态时执行一些代码。下面是一个例子。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Your</span> <span class="token punctuation">.</span>env fileAPP_NAME<span class="token operator">=</span><span class="token class-name">MyApp</span>APP_ENV<span class="token operator">=</span>developing <span class="token comment">// &lt; -- this is set to "developing"</span><span class="token comment">// Register page for users</span><span class="token keyword">class</span> _RegisterPageState <span class="token keyword">extends</span> <span class="token class-name">NyState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegisterPage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">TextEditingController</span> _txtNameController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TextEditingController</span> _txtEmailController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token metadata function">@override</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">whenEnv</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'developing'</span></span><span class="token punctuation">,</span> perform<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> faker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Faker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _txtEmailController<span class="token punctuation">.</span>text <span class="token operator">=</span> faker<span class="token punctuation">.</span>internet<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _txtNameController<span class="token punctuation">.</span>text <span class="token operator">=</span> faker<span class="token punctuation">.</span>person<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// E.g. Fill the fields with fake data to save time</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>希望上面的例子能告诉你如何使用whenEnv帮助器来使你的测试/开发工作更容易。</p><p>Backpack - 这个类被设计用来存储即时的小尺寸数据。它不需要异步等待，这使得它非常适合存储用户认证令牌、API会话等。</p><p>Here’s an example:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// storing a string</span><span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'user_api_token'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'a secure token'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// storing an object</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'user'</span></span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// storing an int</span><span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'my_lucky_no'</span></span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// reading data</span><span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'user_api_token'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a secure token</span><span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'user'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User instance</span><span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'my_lucky_no'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在你的应用程序的任何地方使用Backpack，例如授权一个API请求。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">accountDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">network</span><span class="token punctuation">(</span>        request<span class="token punctuation">:</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> userToken <span class="token operator">=</span> <span class="token class-name">Backpack</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'user_api_token'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Set auth header</span>      request<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string-literal"><span class="token string">'Authorization'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Bearer "</span></span> <span class="token operator">+</span> userToken      <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"/account/1"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在Backpack类中设置的值不会持久化。如果你的应用程序需要，你可能需要实现NyStorage和Backpack的组合。</p><h4 id="新网站"><a href="#新网站" class="headerlink" title="新网站"></a>新网站</h4><p>官方网站已经被重新设计，以使学习Nylo的体验更好。你会发现，文档页面是全新的，看起来很简约。</p><img src="/Nylo-v3-x-%E2%80%94-Flutter%E2%80%99s-Latest-Micro-Framework/3.png" class="" title="示意图 width=400"><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>非常兴奋，v3.x终于发布了。如果你是Nylo的新手，它是新项目的一个伟大的起点。它让你忘记小事，这样你就可以专注于创作。</p><p>一如既往，感谢您的阅读。</p><!-- https://medium.com/@agordn52/nylo-v3-x-flutters-latest-micro-framework-updates-2d063c0b5945 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Nylo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是什么让Julia独树一帜？</title>
      <link href="/What-Makes-Julia-Unique.html"/>
      <url>/What-Makes-Julia-Unique.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>看看multiple dispatch是如何将Julia与所有其他编程语言区分开来的</p></blockquote><img src="/What-Makes-Julia-Unique/1.jpeg" class="" title="示意图 width=400"><span id="more"></span><p>multiple dispatch是 Julia 编程语言的杀手锏，但不幸的是，很少有开发者听说过multiple dispatch。<br>更少的人知道它是什么或者它是如何工作的。<br>这并不奇怪，因为很少有语言支持multiple dispatch，而那些支持multiple dispatch的语言往往把它藏得很深。因此，在我大肆宣扬multiple dispatch的威力之前，我必须先解释一下它到底是什么。<br>我给你一条线索：它与函数的调用方式有关，但让我们退一步来阐述。</p><p>当一个程序运行时，遇到一个函数调用，它必须弄清楚要跳到什么代码并执行。<br>在简单的程序性编程语言中，如C或Pascal，这个过程是直接的。<br>每个函数都被实现为一个子程序，位于一个独特的内存位置。调用该函数只需要跳转到子程序的内存地址，并执行每一条指令，直到微处理器发出返回指令。</p><p>在处理函数指针时，事情变得有点棘手了。<br>我们跳转到的子程序可以在运行期间改变，因为代码被允许改变存储在函数指针中的子程序地址。<br>我为什么要提到这些细节呢？因为我想表达这样一个观点：调用一个函数并确定执行什么代码并不总是一件微不足道的事情。</p><p>考虑一下在面向对象编程中调用一个方法的复杂性。</p><pre class="line-numbers language-julia" data-language="julia"><code class="language-julia">warrior<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>knight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成员函数attack并不对应于一个特定内存地址的子程序。<br>当attack方法在战士对象上被调用时，一个确定跳转到哪个子程序的复杂过程被启动了。<br>我们必须确定什么样的战士在进行攻击。我们可以想象一下不同战士的类型层次，如弓箭手、长矛手和骑士。</p><img src="/What-Makes-Julia-Unique/2.png" class="" title="示意图 width=400"><p>因为弓箭手的攻击方式与步兵或骑士不同，每种类型的攻击方法的实现方式也不同。<br>通过一个被称为单一调度的过程，我们决定调用哪个方法。从低级别的角度来看，我们试图确定在执行<code>warrior.attack(knight)</code>语句时跳到哪个子程序。</p><p>单一调度如何工作取决于我们是在处理动态语言还是静态类型的语言。让我们关注它在动态类型语言中是如何工作的，因为我们将把这个过程与Julia进行比较，后者也是一种动态类型的语言。</p><p>想象一下，我们有一个战士a在攻击一个战士b，我们的第一步将是确定a是什么类型。<br>在动态类型的语言中，每个对象都知道他们是什么类型。<br>例如，在Objective-C中，每个对象都有一个叫做isa的字段，指向一个描述该对象类型的类对象。在下面的图形中，我们假装战士a是Archer类的一个实例。Archer类包含了每个实现方法的函数指针。为了找到正确的方法，我们对 “attack！”这个键做一个字典查询。</p><img src="/What-Makes-Julia-Unique/3.png" class="" title="示意图 width=400"><p>几个方法结尾处的感叹号可能看起来很特别。<br>别担心，这只是一个命名惯例，在Lisp和Julia中流行，用于突变函数。它没有任何语义上的意义。</p><p>严格地说，在大多数动态语言中谈论函数指针是错误的。例如，在Ruby中，你实际上并没有用机器码指向任何子程序，而是指向由解析方法产生的抽象语法树（AST）。Ruby解释器解释AST来运行方法中的代码。</p><img src="/What-Makes-Julia-Unique/4.png" class="" title="示意图 width=400"><p>我们刚才讨论的被称为单一调度，因为我们根据单一对象来决定调用什么方法。<br>对象b的类型并不以任何方式影响方法的查找过程。<br>相比之下，在multiple dispatch中，函数调用中的每一个参数都在决定哪个方法被选中方面起作用。我知道这听起来很古怪，所以让我通过解释单一调度的问题来给你一个拥有multiple dispatch的动机。</p><h4 id="multiple-dispatch解决了哪些问题？"><a href="#multiple-dispatch解决了哪些问题？" class="headerlink" title="multiple dispatch解决了哪些问题？"></a>multiple dispatch解决了哪些问题？</h4><p>假设我们有一个用Julia代码编写的battle！函数。<br>它通过调用attack！函数来模拟两个战士a和b之间的战斗，并根据结果向用户打印出信息。<br>下面的大部分代码应该是不言自明的。在Julia中，我们用::来分隔变量名和变量类型。<br>因此，在代码的例子中，a::Warrior，告诉 Julia 战斗！函数有一个名为 a 的 Warrior 类型的参数。</p><pre class="line-numbers language-julia" data-language="julia"><code class="language-julia"><span class="token keyword">function</span> battle<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">::</span>Warrior<span class="token punctuation">,</span> b<span class="token punctuation">::</span>Warrior<span class="token punctuation">)</span>    attack<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">.</span>health <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>health <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">" and "</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">" destroyed each other"</span><span class="token punctuation">)</span>    <span class="token keyword">elseif</span> a<span class="token punctuation">.</span>health <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">" defeated "</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">elseif</span> b<span class="token punctuation">.</span>health <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">" defeated "</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span>        <span class="token keyword">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">" survived attack from "</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看这些代码并问自己这个简单的问题。<br>类似的代码在C++或Java中也能工作吗？乍一看，这似乎是可能的。<br>这两种语言都允许你定义多个具有相同名称但不同参数的函数。你可以写一些类似于下面Julia代码的东西。</p><pre class="line-numbers language-julia" data-language="julia"><code class="language-julia"><span class="token keyword">function</span> attack<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">::</span>Archer<span class="token punctuation">,</span> b<span class="token punctuation">::</span>Archer<span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">.</span>arrows <span class="token operator">&gt;</span> <span class="token number">0</span>        shoot<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        damage <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>        b<span class="token punctuation">.</span>health <span class="token operator">=</span> max<span class="token punctuation">(</span>b<span class="token punctuation">.</span>health <span class="token operator">-</span> damage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    a<span class="token punctuation">.</span>health<span class="token punctuation">,</span> b<span class="token punctuation">.</span>health<span class="token keyword">end</span><span class="token keyword">function</span> attack<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">::</span>Archer<span class="token punctuation">,</span> b<span class="token punctuation">::</span>Knight<span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">.</span>arrows <span class="token operator">&gt;</span> <span class="token number">0</span>        shoot<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        damage <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> b<span class="token punctuation">.</span>mounted            damage <span class="token operator">+=</span> <span class="token number">3</span>        <span class="token keyword">end</span>        b<span class="token punctuation">.</span>health <span class="token operator">=</span> max<span class="token punctuation">(</span>b<span class="token punctuation">.</span>health <span class="token operator">-</span> damage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    a<span class="token punctuation">.</span>health<span class="token punctuation">,</span> b<span class="token punctuation">.</span>health<span class="token keyword">end</span><span class="token keyword">function</span> attack<span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">::</span>Knight<span class="token punctuation">,</span> b<span class="token punctuation">::</span>Knight<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>health <span class="token operator">=</span> max<span class="token punctuation">(</span>a<span class="token punctuation">.</span>health <span class="token operator">-</span> rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>health <span class="token operator">=</span> max<span class="token punctuation">(</span>b<span class="token punctuation">.</span>health <span class="token operator">-</span> rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span>health<span class="token punctuation">,</span> b<span class="token punctuation">.</span>health<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的具体内容并不重要。<br>我想让你从这个代码例子中得到的是，我们已经定义了三次attack!。<br>每个定义都接受了不同类型的参数。在C++和Java中，我们把这称为函数重载。在编译时，编译器会通过检查调用处的每个输入参数的类型来选择合适的函数来调用。</p><p>这里有一个关键的问题。一个C++编译器不可能猜到在battle！函数中调用哪个attack!函数，因为它不知道参数a和b的具体类型。哪个子类型只有在代码实际运行时才能确定。这是一个无奈之举，因为函数重载只在编译时发挥作用。</p><p>在这种情况下，multiple dispatch可以做一些单一调度和函数重载都做不到的事情。它可以在运行时根据参数a和b的类型来选择正确的代码。</p><h4 id="multiple-dispatch是如何工作的"><a href="#multiple-dispatch是如何工作的" class="headerlink" title="multiple dispatch是如何工作的"></a>multiple dispatch是如何工作的</h4><p>还记得单次派发是如何通过在运行时查找正确的方法来工作的吗？<br>multiple dispatch也是要选择正确的方法。<br>你刚才看到的attack!定义实际上不是函数的定义，而是方法的定义。要在Julia中定义一个attack!函数，你可以写:</p><pre class="line-numbers language-julia" data-language="julia"><code class="language-julia"><span class="token keyword">function</span> attack<span class="token operator">!</span> <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么没有参数？因为 Julia 函数没有参数，而 Julia 方法有参数。<br>与面向对象的语言不同，Julia 中的方法是附属于函数的，而不是类。</p><p>因此，在 Julia 中，函数的调用是通过首先查找哪个函数被调用来进行的。<br>在每个函数上，Julia 都注册了一个方法表。这个表被从上到下搜索，以找到一个接受参数类型与函数调用处提供的输入参数类型相匹配的方法。</p><img src="/What-Makes-Julia-Unique/5.png" class="" title="示意图 width=400"><p>Julia是一种即时编译（JIT）语言，因此方法的源代码在几个步骤中变成了可执行的机器代码。</p><ul><li>当Julia文件被加载到内存中时，每个方法的源代码都会被解析并变成一个抽象语法树（AST）。</li><li>每个方法的AST被存储在正确的方法表中，用于正确的功能。</li><li>在运行时，当一个方法被定位时，我们首先得到AST。AST被JIT编译器转化为机器代码，并为以后的查找进行缓存。<br>这个过程实际上比我在这里展示的要复杂得多。<br>你看，一个抽象语法树可以是非常通用的。它可以是一个为数字参数定义的计算。无论参数是16位无符号整数还是32位有符号整数，所进行的计算都是一样的。<br>然而，这些情况下的汇编代码看起来就不一样了。<br>同一个 AST 可以产生几个机器代码子程序。Julia 将为方法表中的每一种情况添加一个条目。<br>因此，一个方法表并不局限于你所写的源代码的方法数量。</li></ul><h4 id="是什么使Julia的multiple-dispatch变得独特"><a href="#是什么使Julia的multiple-dispatch变得独特" class="headerlink" title="是什么使Julia的multiple dispatch变得独特"></a>是什么使Julia的multiple dispatch变得独特</h4><p>每当你在Julia中调用一个函数时，都会进行一次方法查找。或者说，从Julia开发者的角度来看，这就是所发生的事情。代码的运行就像每次都会发生一样。</p><p>在其他支持multiple dispatch的语言中，这并不是发生的事情。只有以特殊方式标记的函数才能利用multiple dispatch。否则，会进行常规的函数调用。为什么其他语言限制使用multiple dispatch？因为在Julia出现之前，multiple dispatch是非常慢的。</p><p>不难想象为什么multiple dispatch会很慢。与其在恒定时间内做一次字典查询，即 O(1)，不如在一个大表中做一次线性搜索，即 O(N)。函数可以有巨大的方法表。</p><p>Julia 是如何规避这个问题的呢？<br>Julia 是围绕着保持类型尽可能稳定的想法而设计的。在像 Python 或 JavaScript 这样的语言中，情况并非如此。字段和方法可以在运行时被添加或删除。单个字段的类型可以改变。在 Julia 中，类型在设计上被锁定得更多。当你定义一个复合类型时，你固定了字段的数量和它们的类型。</p><p>这种设计选择是如何影响multiple dispatch的呢？<br>这意味着 Julia JIT 编译器所做的代码分析变得更加容易。代码的行为变得更加可预测，这使得有可能识别更多的情况，当一个函数被调用时，应该被定位的方法变得完全确定和可预测。<br>记住，如果函数调用的参数类型保持不变，那么Julia将总是查找同一个方法。<br>如果代码分析能够确定函数的哪些参数永远不会被改变，那么JIT编译器就可以用一个直接的函数调用来代替多次调度的查找。如果代码很短，它甚至可以被内联。</p><p>因此，Julia成功地将开始时的性能劣势变成了性能优势。你看正因为如此，Julia 的函数调用一般会比面向对象语言的单次调度调用快得多。</p><p>一旦你得到了闪电般的速度，在任何地方使用multiple dispatch，你的编码风格就会改变。始终有多路调度可用，对 Julia 社区的软件工程实践产生了深远的影响。</p><h4 id="通过multiple-dispatch重用代码"><a href="#通过multiple-dispatch重用代码" class="headerlink" title="通过multiple dispatch重用代码"></a>通过multiple dispatch重用代码</h4><p>面向对象语言的用户通过继承类和实现接口来重用代码，这使得人们可以将新的代码插入现有的框架中。<br>Julia的方法是在函数层面上进行重用。<br>不同的开发者都可以向相同的函数添加方法。我们不是扩展类，而是扩展函数。因为函数存在于较低的粒度水平上，所以我们可以得到更多的代码重用机会。</p><p>这种灵活性的一个简单例子是定义在 Julia 标准库中的 show 函数。<br>它被Julia用来在不同的背景下显示一个值。上下文可以是 REPL（交互式命令行）、笔记本或 IDE 环境。匹配以下两个签名的方法可以被添加到show函数中。</p><pre class="line-numbers language-julia" data-language="julia"><code class="language-julia">show<span class="token punctuation">(</span>io<span class="token punctuation">::</span>IO<span class="token punctuation">,</span> mime<span class="token punctuation">,</span> x<span class="token punctuation">)</span>show<span class="token punctuation">(</span>io<span class="token punctuation">::</span>IO<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>io对象代表一个显示值x的目标。io可以是控制台窗口、文件、文本字符串、套接字或图形显示。值x可以是一个简单的数字、日期、文本字符串或更复杂的对象，如字典或数组。</p><p>与面向对象的编程语言不同，你可以沿着多个维度扩展显示功能。<br>你可以为全新的IO子类型添加显示方法，创建这些方法是为了在新的背景下显示现有的值类型。<br>比如我们创建了特殊的类型来表示温度单位摄氏度、华氏度和开尔文。可以为显示方法添加，这样代表温度的数字就会以正确的单位显示。</p><p><em>请注意，在Julia中可以用等号来定义单行函数。</em></p><pre class="line-numbers language-julia" data-language="julia"><code class="language-julia">show<span class="token punctuation">(</span>io<span class="token punctuation">::</span>IO<span class="token punctuation">,</span> t<span class="token punctuation">::</span>Celsius<span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> t<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"°C"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>io<span class="token punctuation">::</span>IO<span class="token punctuation">,</span> t<span class="token punctuation">::</span>Fahrenheit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> t<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"°F"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>io<span class="token punctuation">::</span>IO<span class="token punctuation">,</span> t<span class="token punctuation">::</span>Kelvin<span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> t<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了理解为什么这种扩展机制如此强大，请允许我指出一些你试图用面向对象的编程来复制这种扩展机制会面临的问题。你可以设计一个系统，每个对象都必须实现一个显示方法才能被显示，但这种选择会导致几个问题。</p><ul><li>所有的类都必须继承一个具有显示方法的基类。</li><li>每个对象都会在每个IO对象类型上得到相同的表示。</li></ul><p>请允许我详细说明一下。许多面向对象的系统最终会出现过于复杂的基类。原因是你想为每个对象支持这么多的功能。</p><ul><li>在不同的环境中对一个对象进行可视化，比如在调试器中</li><li>用于打印或存储到文件的文本表示法</li><li>允许在一个集合中使用该对象的哈希函数<br>你可以在Java和Objective-C中找到这种模式，例如。这样的方法是僵化和不灵活的。如果你把基类的设计弄错了，就会对所有依赖的代码产生严重的后果。</li></ul><p>更不用说，如果语言设计者忘记添加一个显示方法，那么就没有简单的方法来改造它。只有对标准库的更新才能解决这个问题。你作为一个第三方开发者，是无法改造一个解决方案的。相反，如果Julia标准库没有定义显示函数，你可以很容易地自己定义它，并发布一个为普通对象实现可视化的库，你可以把它发布给其他人。</p><img src="/What-Makes-Julia-Unique/6.png" class="" title="示意图 width=400"><p>让我们再谈谈I/O系统的问题。假设你已经创建了一个叫做Vector2D的2D矢量类型。<br>当在控制台中使用时，你可能想把一个向量显示为[4, 8]，而如果I/O对象代表一个图形显示，你会想显示一个箭头。<br>这两种选择在 Julia 中都是可能的，因为你可以为 io 参数是一个图形显示，而 x 参数是一个 2D 矢量的情况编写一个专门方法。<br>与此相反，面向对象的语言只能根据io或x的类型来选择执行的方法，而不是两者。<br>请记住，在单调度中，运行时要调用的方法是根据单个参数的类型来选择的，而不是多个参数。</p><p>当然，你可以抛出一个switch-case语句来处理不同的类型，但这是不可扩展的。每次你增加一个新的类型，你都必须修改switch-case语句。这使你无法将你的代码作为一个可重用的库来发布。<br>库的用户不应该修改第三方库的源代码来扩展它。</p><h4 id="multiple-dispatch的效用"><a href="#multiple-dispatch的效用" class="headerlink" title="multiple dispatch的效用"></a>multiple dispatch的效用</h4><p>模拟不同类型的战士之间的战斗或制作一个I/O系统，当然只是multiple dispatch简化编码的少数情况。<br>我第一次发现自己在为视频游戏的碰撞检测编码时需要这样的东西。<br>不同的游戏对象将由不同的几何形状来表示。<br>问题是，计算两个圆形、两个正方形或一个圆形和一个正方形之间的交点是完全不同的。<br>你不能只看一个参数就确定要使用的算法，你需要两个参数。如果没有multiple dispatch，你的解决方案就会变得很混乱。</p><img src="/What-Makes-Julia-Unique/7.png" class="" title="示意图 width=400"><p>multiple dispatch也自然适合于任何数字工作。对数字的操作通常是二进制的。如果只看第一个数字的类型来决定如何组合两个数字，是没有意义的。</p><p>简而言之，multiple dispatch就像一把瑞士军刀。它可以帮助程序运行得更快，让你优雅地解决许多问题，并为代码重用提供了一种卓越的手段。<br>这听起来可能有点夸张，但我真的相信multiple dispatch将定义未来的编程范式。</p><!-- https://itnext.io/what-makes-julia-unique-f3ad184fa4a2 -->]]></content>
      
      
      <categories>
          
          <category> Julia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Julia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15个免费的API，你可以在自己的项目里试试</title>
      <link href="/15-Free-APIs-for-your-Programming-Projects.html"/>
      <url>/15-Free-APIs-for-your-Programming-Projects.html</url>
      
        <content type="html"><![CDATA[<p>API是应用编程接口的意思。<br>作为一个程序员，使用外部工具是加快你想建立的项目开发的一个好方法。<br>API简化了开发者如何将新的应用组件集成到现有的架构中。<br>这里有15个API，你可以用它来帮助你启动一个惊人的项目。<br>每个程序员都应该在他们的编程项目中使用这15个API。</p><span id="more"></span><h4 id="⭐Fake-Store-API"><a href="#⭐Fake-Store-API" class="headerlink" title="⭐Fake Store API"></a>⭐<a href="http://fakestoreapi.com/">Fake Store API</a></h4><p>如果你正在创建一个电子商务商店，那么这个API是为你准备的。<br>电子商务商店是一个伟大的项目，有了Fake Store API，它就变得更容易了。<br>忘掉后台和数据库的繁琐，专注于建立购物车、愿望清单、推荐和其他功能。</p><h4 id="⭐Words-API"><a href="#⭐Words-API" class="headerlink" title="⭐Words API"></a>⭐<a href="https://www.wordsapi.com/">Words API</a></h4><p>一个英语语言的API。Words API是一组Restful API，允许开发者查询单词的定义、上下文细节和其他形态上的单词特定信息，如同义词、示例用法、语篇、押韵、使用区域等。</p><h4 id="⭐随机用户数据API"><a href="#⭐随机用户数据API" class="headerlink" title="⭐随机用户数据API"></a>⭐<a href="https://randomuser.me/">随机用户数据API</a></h4><p>不要再浪费时间手动创建假的用户数据。<br>只需从这个API拉过全面的随机用户数据。对项目来说是非常方便的API。<br>而且它比硬编码数据更能模拟真实的做法。</p><h4 id="⭐Quotes-API"><a href="#⭐Quotes-API" class="headerlink" title="⭐Quotes API"></a>⭐<a href="https://api-ninjas.com/api/quotes">Quotes API</a></h4><p>Quotes API提供了历史上几乎无穷无尽的名人名言。<br>Quotes API结合了检索证券日终价格、延迟价格和实时价格的端点，以及证券和市场层面的业绩关键数字和基本参考数据。</p><h4 id="⭐DummyAPI"><a href="#⭐DummyAPI" class="headerlink" title="⭐DummyAPI"></a>⭐<a href="http://dummyapi.io/">DummyAPI</a></h4><p>Dummy API拥有你所需要的一切，使你的应用程序看起来像有真实的用户活动在热闹。从假用户到假评论和帖子。告别硬编码的JSON数据。</p><h4 id="⭐Sejda"><a href="#⭐Sejda" class="headerlink" title="⭐Sejda"></a>⭐<a href="https://www.sejda.com/">Sejda</a></h4><p>是否曾经不得不下载一个PDF，只是为了阅读或编辑它？<br>只是为了再次上传修改内容。不要让您的用户忍受这种糟糕的用户体验。使用Sejda的API，你可以直接从你的Web应用中阅读和编辑PDF。</p><h4 id="⭐IGDB-API"><a href="#⭐IGDB-API" class="headerlink" title="⭐IGDB API"></a>⭐<a href="https://www.igdb.com/api">IGDB API</a></h4><p>互联网游戏数据库。</p><p>IGDB是一个流行的视频游戏数据库网站，它有一个强大和公开的API。<br>这有助于我们需要视频游戏数据的每个项目–如发布日期、Metacritic评分、标签等。<br>这在大多数情况下效果很好，特别是自V4以来，Twitch（亚马逊）也被支持该API了。</p><h4 id="⭐Movie-DB-API-TMDB"><a href="#⭐Movie-DB-API-TMDB" class="headerlink" title="⭐Movie DB API (TMDB)"></a>⭐<a href="https://www.themoviedb.org/documentation/api">Movie DB API (TMDB)</a></h4><p>这个API是史诗级的! 它有这么多的数据，有很好的文档，并允许你创建令人难以置信的应用程序，如Netflix的克隆。<br>而且它是完全免费的。只要把它们归入你的应用程序。</p><h4 id="⭐Mailchimp"><a href="#⭐Mailchimp" class="headerlink" title="⭐Mailchimp"></a>⭐<a href="https://mailchimp.com/">Mailchimp</a></h4><p>说 “我是专家 “的最好方式莫过于向您的用户自动发送欢迎邮件。<br>有了Mailchimp慷慨的免费层级，你就可以做到这一点!<br>Mailchimp的经典自动化功能可以让你建立一系列的邮件，在特定的日期、活动或事件的触发下发送给用户。使用API来管理自动化工作流程、电子邮件和队列。</p><h4 id="⭐Mapbox"><a href="#⭐Mapbox" class="headerlink" title="⭐Mapbox"></a>⭐<a href="https://www.mapbox.com/">Mapbox</a></h4><p>正在建立一个基于位置的项目吗？这是为你准备的API! 被Strava等知名公司使用，所以你知道他们的API是顶级质量的。<br>他们的免费等级门槛非常慷慨，你可以使用Mapbox而不需要支付一分钱。</p><h4 id="⭐市场数据API"><a href="#⭐市场数据API" class="headerlink" title="⭐市场数据API"></a>⭐<a href="https://site.financialmodelingprep.com/developer/docs/">市场数据API</a></h4><p>股票API是一个编程接口，旨在向特定来源提供实时股票市场数据流。<br>例如，许多现有的经纪平台依靠股票API为他们提供实时信息，他们的投资者可以利用这些信息做出购买和销售决策。</p><h4 id="⭐SERP-API"><a href="#⭐SERP-API" class="headerlink" title="⭐SERP API"></a>⭐<a href="https://serpapi.com/">SERP API</a></h4><p>搜索引擎结果页。</p><p>SERP API 使用 Google 的地理定位、加密参数，并通过离你所需位置最近的代理服务器路由你的请求以确保准确性。在我们的location端点获取位置。</p><p>当你有谷歌和其他搜索引擎的力量支持时，可能性是无穷的。SERP API使这一切成为可能。<br>想象一下，你可以用这种力量建立什么!</p><h4 id="⭐Auth0-API"><a href="#⭐Auth0-API" class="headerlink" title="⭐Auth0 API"></a>⭐<a href="https://auth0.com/">Auth0 API</a></h4><p>Auth0是实现OAuth或单点登录（SSO）的好方法。<br>SSO使用户能够通过第三方应用程序如Facebook或Google进行注册或登录。<br>这是一个伟大的功能，可以添加到一个更大的项目。</p><h4 id="⭐ILovePDF-API"><a href="#⭐ILovePDF-API" class="headerlink" title="⭐ILovePDF API"></a>⭐<a href="https://www.ilovepdf.com/">ILovePDF API</a></h4><p>无论你是一个小型的创业公司还是一个大型企业，ILovePDF API都可以帮助你实现文档处理的自动化。<br>使用ILovePDF API的PDF处理工作流程非常简单，由4个基本请求指令组成：<br>开始任务、上传文件、处理文件和下载文件。<br>一旦API执行了这四个步骤，你的PDF文件将被你所需要的工具处理，并下载到你喜欢的地方。</p><h4 id="⭐新闻-API"><a href="#⭐新闻-API" class="headerlink" title="⭐新闻 API"></a>⭐<a href="https://newsapi.org/">新闻 API</a></h4><p>强大的新闻 API 扫描整个网络的数万个新闻源，并根据您的请求返回相关内容。如果你想在你的网站上介绍与你的产品或行业相关的内容，这是一个方便的工具。</p><!-- https://medium.com/@flutterqueen/15-free-apis-for-your-programming-projects-c68aca72b392 -->]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每个Java开发者都必须知道的七个Intellij调试技巧</title>
      <link href="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know.html"/>
      <url>/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know.html</url>
      
        <content type="html"><![CDATA[<p>你知道这些窍门吗？这些肯定会提高你的开发效率。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/1.jpeg" class="" title="示意图 width=400"><span id="more"></span><p>调试代码是java工程师日常工作的一个重要部分。<br>调试代码的目的有两个:<br>一个是检查代码逻辑是否有问题，从而检查代码逻辑，发现隐藏的bug；<br>另一个是当系统出现bug时，可以快速定位问题，修复这些bug。<br>但是，不管是哪种目的，高效的代码调试无疑会提高我们的代码效率，提高定位和解决问题的效率，从而达到白盒代码自我观察的目的。<br>本文主要列举了10种常用的调试技巧，这些技巧可以帮助我们快速发现代码BUG。</p><h4 id="表达式计算结果评估"><a href="#表达式计算结果评估" class="headerlink" title="表达式计算结果评估"></a>表达式计算结果评估</h4><p>在调试过程中，一些变量的当前值会默认显示在代码的右侧，但一些表达式的值则默认不显示。<br>有时我们在计算过程中需要注意表达式的数据是否正确。<br>这时，你可以复制要选择的表达式，然后使用快捷键或点击下面的图标来查看表达式的计算结果。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/2.png" class="" title="示意图 width=400"><h4 id="调试条件"><a href="#调试条件" class="headerlink" title="调试条件"></a>调试条件</h4><p>在一些循环条件中，一个代码片段需要通过条件判断后才能执行。<br>然而，在调试时，我们希望快速找到符合条件的对象，而不是把时间浪费在我们不关心的调试对象上。<br>这个时候，我们可以使用调试过滤条件来快速过滤出我们需要的对象，大大提高了我们的调试效率。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/3.png" class="" title="示意图 width=400"><h4 id="丢弃框架"><a href="#丢弃框架" class="headerlink" title="丢弃框架"></a>丢弃框架</h4><p>在代码调试的过程中，有时由于你点击下一步的速度很快，可能会在打到之前打的断点后直接跳到某个方法的内部，或者有些会直接退出，重新执行调试。<br>这时，你可以使用 “Drop Frame “的功能返回到上一步，并快速定位到之前代码的运行位置。<br>我们都知道，JVM是通过堆栈框架来保存方法调用地址的，所以其实这部分功能可以理解为放弃当前的调用堆栈，返回到原来的调用。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/4.png" class="" title="示意图 width=400"><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/5.png" class="" title="示意图 width=400"><h4 id="调试字段"><a href="#调试字段" class="headerlink" title="调试字段"></a>调试字段</h4><p>当我们需要知道一个类中的字段值被修改时，从一开始就进行调试是非常麻烦的，因为有时我们可能不知道字段值赋值的起点在哪里，特别是在阅读框架源代码时。<br>这个时候，你可以尝试在类的字段中做断点。<br>检查字段访问或字段修改是否会运行到字段修改发生的地方或字段被访问的地方。<br>这将大大提高寻找字段被修改的地方，然后进行修改的效率。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/6.png" class="" title="示意图 width=400"><h4 id="流调试"><a href="#流调试" class="headerlink" title="流调试"></a>流调试</h4><p>Java 8后来引入了lambda表达式的功能。<br>虽然该功能使用起来非常方便，但调试起来却非常麻烦。<br>主要是不方便查看流的内部值的运行状态。<br>这个时候，我们需要使用Java Stream Debugger插件，这样我们在调试流的时候就可以看到内部值的执行过程和最终结果，方便我们定位问题。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/7.png" class="" title="示意图 width=400"><h4 id="强制返回"><a href="#强制返回" class="headerlink" title="强制返回"></a>强制返回</h4><p>有时，当我们调试一些耗时的代码时，我们可能只是想确认业务逻辑是否有问题，而并不真的想执行这些代码。<br>在这种情况下，我们可以使用强制返回函数来指定一个返回值，以继续后续的业务逻辑调试，而不执行该方法背后的代码。</p><h4 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h4><p>在Idea的默认调试模式下，所有线程都将被封锁。<br>只有当当前的调试线程完成了它的逻辑，它才能进入其他线程。<br>如果我想在多线程的情况下调试代码逻辑，应该怎么做？<br>其实，在设置断点时，我们可以通过右键单击断点来选择线程调试模式。</p><img src="/Seven-Intellij-Debug-Tricks-that-Every-Java-Developer-Must-Know/8.png" class="" title="示意图 width=400"><p>好了，已经介绍了七种调试技术。我希望这篇文章能够提高你的IntelliJ调试能力。最后，感谢您的阅读。</p><!-- https://levelup.gitconnected.com/seven-intellij-debug-tricks-that-every-java-developer-must-know-de26aaac736a -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Intellij </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带有实时位置跟踪的Flutter谷歌地图--Uber风格</title>
      <link href="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style.html"/>
      <url>/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style.html</url>
      
        <content type="html"><![CDATA[<p>通过本课，您将学习如何在Flutter中使用谷歌地图，并进行一些定制，如设置自定义图像标记和绘制路线方向折线。在地图上添加实时位置更新。</p><img src="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style/1.gif" class="" title="示意图 width=400"><span id="more"></span><h3 id="内容表"><a href="#内容表" class="headerlink" title="内容表 :"></a>内容表 :</h3><ul><li>初始设置 ⚙️</li><li>谷歌地图 🗺</li><li>绘制路线方向 〰</li><li>在地图上实时更新位置 🔴</li><li>添加自定义标记/图钉 📍</li></ul><blockquote><p>注意：这篇文章假设您已经在您的项目中使用谷歌地图Flutter包和您自己的谷歌地图API密钥设置了地图。如果没有，请点击此<a href="https://pub.dev/packages/google_maps_flutter">链接</a>，了解如何设置您的Flutter项目与谷歌地图一起工作。其他依赖项包括<a href="https://pub.dev/packages/flutter_polyline_points">Flutter Polyline Points</a>包和<a href="https://pub.dev/packages/location">Flutter Location Plugin</a>。</p></blockquote><h4 id="初始设置-⚙️"><a href="#初始设置-⚙️" class="headerlink" title="初始设置 ⚙️"></a>初始设置 ⚙️</h4><p>请确保你对你的环境做了相应的准备，以便在IOS和Android上启用位置跟踪，具体方法是按照软件包的README中关于Android清单文件和iOS Info.plist的步骤进行。</p><p>一旦设置好，依赖关系看起来像👇</p><pre class="line-numbers language-none"><code class="language-none">....dependencies:  flutter:    sdk: flutter  cupertino_icons: ^1.0.2  flutter_polyline_points: ^1.0.0  google_maps_flutter: ^2.1.7  location: ^4.4.0...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：截至本文写作时，上述软件包的版本是可用的–请相应更新。</p></blockquote><h4 id="谷歌地图-🗺"><a href="#谷歌地图-🗺" class="headerlink" title="谷歌地图 🗺"></a>谷歌地图 🗺</h4><p>创建一个名为OrderTrackingPage的StatefulWidget及其相应的State类，在这里我导入了所需的包以及一些硬编码的源和目标位置（为了本教程的目的）。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:async'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:google_maps_flutter/google_maps_flutter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OrderTrackingPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">OrderTrackingPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token metadata function">@override</span>  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderTrackingPage</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">OrderTrackingPageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OrderTrackingPageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderTrackingPage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoogleMapController</span><span class="token punctuation">&gt;</span></span> _controller <span class="token operator">=</span> <span class="token class-name">Completer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span> sourceLocation <span class="token operator">=</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.33500926</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.03272188</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span> destination <span class="token operator">=</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.33429383</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.06600055</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">GoogleMap</span> widget will be here <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建GoogleMap小组件，并将initialCameraPosition设置为源的位置。地图需要放大一些，所以把它设置为13.5。</p><p>我们需要一个标记/图钉来了解确切的位置。定义一个标记，并将其位置设置为源位置。对于目的地，添加另一个标记/图钉。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">GoogleMap</span><span class="token punctuation">(</span>  initialCameraPosition<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">CameraPosition</span><span class="token punctuation">(</span>    target<span class="token punctuation">:</span> sourceLocation<span class="token punctuation">,</span>    zoom<span class="token punctuation">:</span> <span class="token number">13.5</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  markers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token class-name">Marker</span><span class="token punctuation">(</span>      markerId<span class="token punctuation">:</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"source"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      position<span class="token punctuation">:</span> sourceLocation<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token class-name">Marker</span><span class="token punctuation">(</span>      markerId<span class="token punctuation">:</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"destination"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      position<span class="token punctuation">:</span> destination<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onMapCreated<span class="token punctuation">:</span> <span class="token punctuation">(</span>mapController<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _controller<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>mapController<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style/2.png" class="" title="示意图 width=400"><h4 id="绘制路线方向-〰"><a href="#绘制路线方向-〰" class="headerlink" title="绘制路线方向 〰"></a>绘制路线方向 〰</h4><p>接下来我想做的是画一条从目的地到源头的线。<br>创建一个名为polylineCoordinates的空列表。<br>创建一个PolylinePoints的实例和一个叫做getPolyPoints的异步函数。getRouteBetweenCoordinates方法返回多线点的列表。<br>需要谷歌API密钥、源和目的地位置。如果这些点不是空的，我们将它们存储到polylineCoordinates。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LatLng</span><span class="token punctuation">&gt;</span></span> polylineCoordinates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getPolyPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">PolylinePoints</span> polylinePoints <span class="token operator">=</span> <span class="token class-name">PolylinePoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PolylineResult</span> result <span class="token operator">=</span> <span class="token keyword">await</span> polylinePoints<span class="token punctuation">.</span><span class="token function">getRouteBetweenCoordinates</span><span class="token punctuation">(</span>    google_api_key<span class="token punctuation">,</span> <span class="token comment">// Your Google Map Key</span>    <span class="token class-name">PointLatLng</span><span class="token punctuation">(</span>sourceLocation<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span> sourceLocation<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">PointLatLng</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span> destination<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>points<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span>points<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token class-name">PointLatLng</span> point<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> polylineCoordinates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>        <span class="token class-name">LatLng</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span> point<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 initState方法中调用 getPolyPoints</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span><span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getPolyPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到GoogleMap小组件，定义多段线。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">GoogleMap</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  polylines<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token class-name">Polyline</span><span class="token punctuation">(</span>      polylineId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">PolylineId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"route"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      points<span class="token punctuation">:</span> polylineCoordinates<span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF7B61FF</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style/3.png" class="" title="示意图 width=400"><h4 id="地图上的实时位置更新-🔴"><a href="#地图上的实时位置更新-🔴" class="headerlink" title="地图上的实时位置更新 🔴"></a>地图上的实时位置更新 🔴</h4><p>现在到了最令人兴奋的部分，我们需要设备的位置。<br>创建一个名为currentLocation的可空变量。<br>然后用一个叫getCurrentLocation的函数，在里面创建一个Location的实例。一旦我们得到了位置，将当前位置设置为等于该位置。<br>在位置改变时，更新当前位置。使其在地图上可见，称为setState。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">LocationData</span><span class="token operator">?</span> currentLocation<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token class-name">Location</span> location <span class="token operator">=</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentLocation <span class="token operator">=</span> location<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GoogleMapController</span> googleMapController <span class="token operator">=</span> <span class="token keyword">await</span> _controller<span class="token punctuation">.</span>future<span class="token punctuation">;</span>location<span class="token punctuation">.</span>onLocationChanged<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>newLoc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentLocation <span class="token operator">=</span> newLoc<span class="token punctuation">;</span>googleMapController<span class="token punctuation">.</span><span class="token function">animateCamera</span><span class="token punctuation">(</span>          <span class="token class-name">CameraUpdate</span><span class="token punctuation">.</span><span class="token function">newCameraPosition</span><span class="token punctuation">(</span>            <span class="token class-name">CameraPosition</span><span class="token punctuation">(</span>              zoom<span class="token punctuation">:</span> <span class="token number">13.5</span><span class="token punctuation">,</span>              target<span class="token punctuation">:</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span>                newLoc<span class="token punctuation">.</span>latitude<span class="token operator">!</span><span class="token punctuation">,</span>                newLoc<span class="token punctuation">.</span>longitude<span class="token operator">!</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请确保在initState上调用getCurrentLocation。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getPolyPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果currentLocation是空的，它显示一个加载文本。同时，为currentLocation添加另一个标记/图钉，以及将初始摄像机位置改为当前位置。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">body<span class="token punctuation">:</span> currentLocation <span class="token operator">==</span> <span class="token keyword">null</span>  <span class="token operator">?</span> <span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Loading"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token class-name">GoogleMap</span><span class="token punctuation">(</span>      initialCameraPosition<span class="token punctuation">:</span> <span class="token class-name">CameraPosition</span><span class="token punctuation">(</span>        target<span class="token punctuation">:</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span>            currentLocation<span class="token operator">!</span><span class="token punctuation">.</span>latitude<span class="token operator">!</span><span class="token punctuation">,</span> currentLocation<span class="token operator">!</span><span class="token punctuation">.</span>longitude<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        zoom<span class="token punctuation">:</span> <span class="token number">13.5</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      markers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token class-name">Marker</span><span class="token punctuation">(</span>          markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"currentLocation"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          position<span class="token punctuation">:</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span>              currentLocation<span class="token operator">!</span><span class="token punctuation">.</span>latitude<span class="token operator">!</span><span class="token punctuation">,</span> currentLocation<span class="token operator">!</span><span class="token punctuation">.</span>longitude<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">const</span> <span class="token class-name">Marker</span><span class="token punctuation">(</span>          markerId<span class="token punctuation">:</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"source"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          position<span class="token punctuation">:</span> sourceLocation<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">const</span> <span class="token class-name">Marker</span><span class="token punctuation">(</span>          markerId<span class="token punctuation">:</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"destination"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          position<span class="token punctuation">:</span> destination<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onMapCreated<span class="token punctuation">:</span> <span class="token punctuation">(</span>mapController<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _controller<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>mapController<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      polylines<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token class-name">Polyline</span><span class="token punctuation">(</span>          polylineId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">PolylineId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"route"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          points<span class="token punctuation">:</span> polylineCoordinates<span class="token punctuation">,</span>          color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF7B61FF</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          width<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style/4.gif" class="" title="示意图 width=400"><h4 id="对于iOS"><a href="#对于iOS" class="headerlink" title="对于iOS ::"></a>对于iOS ::</h4><p>进入功能，将鼠标悬停在位置上，选择Freeway drive。我是根据这个Freeway驱动器使用源和目标位置。</p><img src="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style/5.gif" class="" title="示意图 width=400"><h4 id="对于安卓系统"><a href="#对于安卓系统" class="headerlink" title="对于安卓系统 ::"></a>对于安卓系统 ::</h4><p>如果你在Windows上或使用安卓模拟器，点击底部的三个点，并确保你在位置上。<br>比方说，源位置是谷歌Plex，把sourceLocation改为这个坐标，目的地位置是微软硅谷园区。<br>把目的地改为这个位置。现在点击 “路线 “标签，搜索微软硅谷和谷歌Plex作为起点。保存路线，设置一个播放速度，点击播放路线。<br>当前的位置正在移动，这就是我们想要的：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span> sourceLocation <span class="token operator">=</span> your chosen location<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span> destination <span class="token operator">=</span> your chosen location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="添加自定义标记-图钉-📍"><a href="#添加自定义标记-图钉-📍" class="headerlink" title="添加自定义标记/图钉 📍"></a>添加自定义标记/图钉 📍</h4><p>来源、目的地和当前位置的图标是一样的。让我们为它们使用一个自定义标记/图钉。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">BitmapDescriptor</span> sourceIcon <span class="token operator">=</span> <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span>defaultMarker<span class="token punctuation">;</span><span class="token class-name">BitmapDescriptor</span> destinationIcon <span class="token operator">=</span> <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span>defaultMarker<span class="token punctuation">;</span><span class="token class-name">BitmapDescriptor</span> currentLocationIcon <span class="token operator">=</span> <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span>defaultMarker<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setCustomMarkerIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span><span class="token function">fromAssetImage</span><span class="token punctuation">(</span>          <span class="token class-name">ImageConfiguration</span><span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"assets/Pin_source.png"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>icon<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sourceIcon <span class="token operator">=</span> icon<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span><span class="token function">fromAssetImage</span><span class="token punctuation">(</span>          <span class="token class-name">ImageConfiguration</span><span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"assets/Pin_destination.png"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>icon<span class="token punctuation">)</span> <span class="token punctuation">{</span>      destinationIcon <span class="token operator">=</span> icon<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span><span class="token function">fromAssetImage</span><span class="token punctuation">(</span>          <span class="token class-name">ImageConfiguration</span><span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"assets/Badge.png"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>icon<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currentLocationIcon <span class="token operator">=</span> icon<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在initState上调用setCustomMarkerIcon</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getPolyPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setCustomMarkerIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在标记集的图标上做最后的润色：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">GoogleMap</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    markers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token class-name">Marker</span><span class="token punctuation">(</span>        markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"currentLocation"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> currentLocationIcon<span class="token punctuation">,</span>        position<span class="token punctuation">:</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span>            currentLocation<span class="token operator">!</span><span class="token punctuation">.</span>latitude<span class="token operator">!</span><span class="token punctuation">,</span> currentLocation<span class="token operator">!</span><span class="token punctuation">.</span>longitude<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Marker</span><span class="token punctuation">(</span>        markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"source"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> sourceIcon<span class="token punctuation">,</span>        position<span class="token punctuation">:</span> sourceLocation<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Marker</span><span class="token punctuation">(</span>        markerId<span class="token punctuation">:</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"destination"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> destinationIcon<span class="token punctuation">,</span>        position<span class="token punctuation">:</span> destination<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-Google-Map-With-Live-Location-Tracking-%E2%80%94-Uber-Style/6.gif" class="" title="示意图 width=400"><!-- https://medium.com/flutter-community/flutter-google-map-with-live-location-tracking-uber-style-12da38771829 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> GoogleMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 带有自定义标记的谷歌地图📍</title>
      <link href="/Flutter-%E2%80%94-Google-Map-with-Custom-Marker.html"/>
      <url>/Flutter-%E2%80%94-Google-Map-with-Custom-Marker.html</url>
      
        <content type="html"><![CDATA[<p>让我们把谷歌地图添加到您的Flutter应用中，用一个花哨的标记来取代无聊的标记。</p><img src="/Flutter-%E2%80%94-Google-Map-with-Custom-Marker/1.png" class="" title="示意图 width=400"><span id="more"></span><h4 id="获取API密钥"><a href="#获取API密钥" class="headerlink" title="获取API密钥"></a>获取API密钥</h4><p>如果您想在您的Flutter应用程序中使用谷歌地图，您需要在谷歌地图平台配置一个API项目。</p><ul><li>进入<a href="https://cloud.google.com/maps-platform/">谷歌地图平台</a> &gt; 创建新项目或使用现有项目。</li><li>在库页面 &gt; 搜索 “Maps SDK”。</li><li>点击Maps SDK for iOS，然后点击Enable。</li><li>点击Maps SDK for Android，然后点击Enable</li><li>在Credentials页面，点击Create credentials &gt; API key。(创建的API密钥对话框显示您新创建的API密钥）。</li><li>新的API密钥被列在凭证页面的API密钥下。要重新命名它，请点击编辑图标。(专业提示：在生产中使用API密钥之前要对其进行限制。）</li></ul><h4 id="将谷歌地图Flutter包作为依赖项添加"><a href="#将谷歌地图Flutter包作为依赖项添加" class="headerlink" title="将谷歌地图Flutter包作为依赖项添加"></a>将谷歌地图Flutter包作为依赖项添加</h4><p>在Flutter中，包允许你添加额外的功能。运行此命令</p><pre class="line-numbers language-none"><code class="language-none">flutter pub add google_maps_flutter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or add the package under dependencies</p><pre class="line-numbers language-none"><code class="language-none">dependencies:    google_maps_flutter: ^2.2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="为安卓应用添加API密钥"><a href="#为安卓应用添加API密钥" class="headerlink" title="为安卓应用添加API密钥"></a>为安卓应用添加API密钥</h4><p>为了给安卓应用添加一个API密钥，编辑android/app/src/main中的AndroidManifest.xml文件。<br>在应用程序节点内添加一个单一的元数据条目，其中包含在上一步中创建的API密钥。</p><pre class="line-numbers language-none"><code class="language-none">&lt;manifest ...  &lt;application ...    &lt;meta-data android:name="com.google.android.geo.API_KEY"               android:value="YOUR KEY HERE"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Also set the minSdkVersion to 20 in android/app/build.gradle</p><pre class="line-numbers language-none"><code class="language-none">android {    defaultConfig {        minSdkVersion 20    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为iOS应用程序添加API密钥"><a href="#为iOS应用程序添加API密钥" class="headerlink" title="为iOS应用程序添加API密钥"></a>为iOS应用程序添加API密钥</h4><p>为了给iOS应用程序添加一个API密钥，请编辑ios/Runner中的AppDelegate.swift文件。将整个代码替换为以下内容👇</p><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">import UIKitimport Flutterimport GoogleMaps  <span class="token comment">// Add this import</span><span class="token operator">@</span>UIApplicationMain<span class="token operator">@</span>objc class AppDelegate<span class="token punctuation">:</span> FlutterAppDelegate <span class="token punctuation">{</span>  override func <span class="token function">application</span><span class="token punctuation">(</span>    _ application<span class="token punctuation">:</span> UIApplication<span class="token punctuation">,</span>    didFinishLaunchingWithOptions launchOptions<span class="token punctuation">:</span> <span class="token punctuation">[</span>UIApplication<span class="token punctuation">.</span>LaunchOptionsKey<span class="token punctuation">:</span> Any<span class="token punctuation">]</span><span class="token operator">?</span>  <span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Bool <span class="token punctuation">{</span>    GeneratedPluginRegistrant<span class="token punctuation">.</span><span class="token keyword">register</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token comment">// TODO: Add your Google Maps API key</span>    GMSServices<span class="token punctuation">.</span><span class="token function">provideAPIKey</span><span class="token punctuation">(</span><span class="token string">"YOUR-API-KEY"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">application</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> didFinishLaunchingWithOptions<span class="token punctuation">:</span> launchOptions<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建谷歌地图屏幕"><a href="#创建谷歌地图屏幕" class="headerlink" title="创建谷歌地图屏幕"></a>创建谷歌地图屏幕</h4><p>现在是在屏幕上获取地图的时候了。<br>我们需要一个初始CameraPosition来显示地图。它可以是用户的当前位置，但为了简单起见，我们使用了一个固定值。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:google_maps_flutter/google_maps_flutter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MapScreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">MapScreen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token metadata function">@override</span>  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapScreen</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MapScreenState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _MapScreenState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapScreen</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">LatLng</span> initialLocation <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.422131</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.084801</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ToDo: add custom marker</span><span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">GoogleMap</span><span class="token punctuation">(</span>        initialCameraPosition<span class="token punctuation">:</span> <span class="token class-name">CameraPosition</span><span class="token punctuation">(</span>          target<span class="token punctuation">:</span> initialLocation<span class="token punctuation">,</span>          zoom<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// ToDO: add markers</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-%E2%80%94-Google-Map-with-Custom-Marker/2.png" class="" title="示意图 width=400"><h4 id="在地图上添加标记"><a href="#在地图上添加标记" class="headerlink" title="在地图上添加标记"></a>在地图上添加标记</h4><p>标记对于识别任何特定的位置很有用。你可以在地图上添加多个标记。替换为：用这个添加标记👇</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">markers<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token class-name">Marker</span><span class="token punctuation">(</span>    markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"marker1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    position<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.422131</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.084801</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    draggable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    onDragEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// value is the new position</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// To do: custom marker icon</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Marker</span><span class="token punctuation">(</span>    markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"marker2"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    position<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.415768808487435</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.08440050482749</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你允许用户改变标记的位置，那么就把可拖动设置为 “true”，默认为 “false”。 onDragEnd为你提供新的位置LatLng。</p><img src="/Flutter-%E2%80%94-Google-Map-with-Custom-Marker/3.png" class="" title="示意图 width=400"><h4 id="在地图上设置自定义图像标记"><a href="#在地图上设置自定义图像标记" class="headerlink" title="在地图上设置自定义图像标记"></a>在地图上设置自定义图像标记</h4><p>在我的资产中添加了一个标记图片，然后创建一个方法来设置markerIcon。替换为：用以下代码添加自定义标记👇</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">BitmapDescriptor</span> markerIcon <span class="token operator">=</span> <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span>defaultMarker<span class="token punctuation">;</span><span class="token metadata function">@override</span><span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">addCustomIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">addCustomIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span><span class="token function">fromAssetImage</span><span class="token punctuation">(</span>          <span class="token keyword">const</span> <span class="token class-name">ImageConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"assets/Location_marker.png"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>icon<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        markerIcon <span class="token operator">=</span> icon<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到第一个标记，markerId是marker1。设置<code>icon = markerIcon</code></p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Marker</span><span class="token punctuation">(</span>  markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"marker1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  position<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.422131</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.084801</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  draggable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  onDragEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// value is the new position</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  icon<span class="token punctuation">:</span> markerIcon<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-%E2%80%94-Google-Map-with-Custom-Marker/4.png" class="" title="示意图 width=400"><p>完整的代码 🥳</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:google_maps_flutter/google_maps_flutter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MapScreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">MapScreen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapScreen</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MapScreenState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _MapScreenState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapScreen</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">LatLng</span> initialLocation <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.422131</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.084801</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BitmapDescriptor</span> markerIcon <span class="token operator">=</span> <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span>defaultMarker<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addCustomIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">addCustomIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">BitmapDescriptor</span><span class="token punctuation">.</span><span class="token function">fromAssetImage</span><span class="token punctuation">(</span>            <span class="token keyword">const</span> <span class="token class-name">ImageConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"assets/Location_marker.png"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>icon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          markerIcon <span class="token operator">=</span> icon<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">GoogleMap</span><span class="token punctuation">(</span>        initialCameraPosition<span class="token punctuation">:</span> <span class="token class-name">CameraPosition</span><span class="token punctuation">(</span>          target<span class="token punctuation">:</span> initialLocation<span class="token punctuation">,</span>          zoom<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        markers<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token class-name">Marker</span><span class="token punctuation">(</span>            markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"marker1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            position<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.422131</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.084801</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            draggable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            onDragEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// value is the new position</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> markerIcon<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">Marker</span><span class="token punctuation">(</span>            markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"marker2"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            position<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">37.415768808487435</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.08440050482749</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- https://medium.com/flutter-community/flutter-google-map-with-custom-marker-ea1555a37342 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> GoogleMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 在谷歌地图中突出显示任何区域</title>
      <link href="/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps.html"/>
      <url>/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps.html</url>
      
        <content type="html"><![CDATA[<p>我们已经向您展示了如何在Flutter应用程序中添加谷歌地图和自定义标记。<br>让我们更进一步，向您展示如何在您的地图上添加一个圆圈，或识别一个特定的区域市、州或国家。</p><img src="/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps/1.png" class="" title="示意图 width=400"><span id="more"></span><p>请注意。这里已经假设您知道如何将谷歌地图添加到Flutter应用中。如果没有，请查看我之前的文章👉<a href="https://pangz.fun/Flutter-%E2%80%94-Google-Map-with-Custom-Marker.html">Flutter - 带有自定义标记的谷歌地图📍</a>。</p><h4 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h4><p>现在是时候开始了!<br>这是一个简单的屏幕，上面有一个谷歌地图小部件，设置了initialCameraPosition和一个标记。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">GoogleMapScreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">GoogleMapScreen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token metadata function">@override</span>  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoogleMapScreen</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_GoogleMapScreenState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _GoogleMapScreenState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoogleMapScreen</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoogleMapController</span><span class="token punctuation">&gt;</span></span> _controller <span class="token operator">=</span> <span class="token class-name">Completer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LatLng</span> intialLocation <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.762912</span><span class="token punctuation">,</span> <span class="token number">90.427816</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token class-name">Expanded</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token class-name">GoogleMap</span><span class="token punctuation">(</span>              initialCameraPosition<span class="token punctuation">:</span> <span class="token class-name">CameraPosition</span><span class="token punctuation">(</span>                target<span class="token punctuation">:</span> intialLocation<span class="token punctuation">,</span>                zoom<span class="token punctuation">:</span> <span class="token number">15.6746</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              onMapCreated<span class="token punctuation">:</span> <span class="token punctuation">(</span>controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>                _controller<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              markers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token class-name">Marker</span><span class="token punctuation">(</span>                  markerId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MarkerId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  position<span class="token punctuation">:</span> intialLocation<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token comment">// ToDo: Add Circle</span>              <span class="token comment">// ToDo: Add polygon</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps/2.png" class="" title="示意图 width=400"><h4 id="添加一个圈圈"><a href="#添加一个圈圈" class="headerlink" title="添加一个圈圈"></a>添加一个圈圈</h4><p>第一个问题是如何在我们的地图上添加一个圆圈。用以下代码</p><pre class="line-numbers language-ToDo:" data-language="ToDo:"><div class="caption"><span>Add Circle```用下面的代码添加圆圈👇</span></div><code class="language-ToDo:">```dartcircles: {  Circle(    circleId: CircleId("1"),    center: intialLocation,    radius: 420,    strokeWidth: 2,    fillColor: Color(0xFF006491).withOpacity(0.2),  ),},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>center设置圆的位置。我使用intialLocation，这样标记就会是圆的中间点。半径值为430比较合适的，但是如果地图没有被放大，那么就使用一个更大的值。<br>为了避免圆周围出现巨大的边界，我将strokeWidth设置为2。</p><img src="/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps/3.png" class="" title="示意图 width=400"><h4 id="突出一个特定的区域"><a href="#突出一个特定的区域" class="headerlink" title="突出一个特定的区域"></a>突出一个特定的区域</h4><p>并不总是需要画一个圆，也许你只需要标记某个区域。<br>为了达到这个目的，我们使用谷歌地图的多边形。需要用下面的代码替换<code>//ToDo: Add polygon</code></p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">polygons<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token class-name">Polygon</span><span class="token punctuation">(</span>    polygonId<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">PolygonId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    fillColor<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF006491</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    strokeWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    points<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span>      <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.766315</span><span class="token punctuation">,</span> <span class="token number">90.425778</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.764691</span><span class="token punctuation">,</span> <span class="token number">90.424767</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.761916</span><span class="token punctuation">,</span> <span class="token number">90.426862</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.758532</span><span class="token punctuation">,</span> <span class="token number">90.428588</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.758825</span><span class="token punctuation">,</span> <span class="token number">90.429228</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">LatLng</span><span class="token punctuation">(</span><span class="token number">23.763698</span><span class="token punctuation">,</span> <span class="token number">90.431324</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps/4.png" class="" title="示意图 width=400"><p>请看下效果：</p><img src="/Flutter-%E2%80%94-Highlight-any-area-in-Google-Maps/5.gif" class="" title="示意图 width=400"><p>如果这篇文章对你有帮助，请点个赞👏 呗。</p><!-- https://theflutterway.medium.com/flutter-highlight-any-area-in-google-maps-4f6380a203c3 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> GoogleMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter ARKit--完整的速成课程</title>
      <link href="/Flutter-ARKit-%E2%80%94-the-complete-crash-course.html"/>
      <url>/Flutter-ARKit-%E2%80%94-the-complete-crash-course.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/1.png" class="" title="示意图 width=400"><p>有没有想过在Flutter应用程序中使用AR？<br>Well，ARKit可以帮助你。这是一个非常容易使用的软件包，只要你了解它是如何工作的。<br>这就是为什么我今天要向你介绍这个软件包的原因! 让我们开始吧!</p><span id="more"></span><p>注意。ARKit只适用于iOS设备（因为ARKit是由苹果开发的）。对于安卓设备，你可以使用ar_core_flutter_plugin。</p><p>Happy reading!</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>创建我们的应用程序后，我们要做的第一件事是添加 arkit_plugin。为此，我们将使用命令<br><code>flutter pub add arkit_plugin</code>。你应该熟悉这些命令，否则，我建议你再查一下Flutter的基础知识。</p><p>现在，让我们配置一些文件以在iOS设备上使用ARKit。</p><p>首先，允许你的应用程序使用摄像头。为此，我们必须提供一个<code>NSCameraUsageDescription</code>。</p><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/2.png" class="" title="示意图 width=400"><p>在这之后，我们必须更新Podfile。<br>最低支持的iOS版本是11.0，但如果你需要使用图像锚，请使用11.3。<br>对于图像跟踪配置或面部跟踪，将其设置为12.0，身体跟踪的最低版本为13.0。</p><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/3.png" class="" title="示意图 width=400"><h4 id="使用ARKit"><a href="#使用ARKit" class="headerlink" title="使用ARKit"></a>使用ARKit</h4><p>首先，我们必须在一个StatefulWidget中创建一个ARitController。</p><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/4.png" class="" title="示意图 width=400"><p>现在，让我们来创建我们的ARKit视图。<br>为此，我们将使用ARKitSceneView。它有一个名为onARKitViewCreated的属性。<br>我们可以在那里调用一个函数并初始化我们的ARKITController。</p><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/5.png" class="" title="示意图 width=400"><p>但目前，我们什么都看不到。<br>让我们添加一个FloatingActionButton，调用一个函数，向akitController添加一个对象。</p><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/6.png" class="" title="示意图 width=400"><p>ARKitNode还有很多自定义选项，你可以在<a href="https://pub.dev/documentation/arkit_plugin/latest/arkit_plugin/ARKitNode-class.html">这里</a>找到。</p><p>现在的ARKit可以是这样的:</p><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/8.gif" class="" title="示意图 width=400"><p>我们强烈建议你看一下ARKit的例子。<br>你可以在那里学习如何在节点上添加你自己的图像，使用自定义灯光设置，追踪脸部、身体和其他。<br>有很多东西可以发现，所以看一下这个<a href="https://pub.dev/packages/arkit_plugin#examples">列表</a>，看看你喜欢什么。你简直可以用ARKit做任何事情。</p><p>在发布到App Store之前，一些给开发者们的建议：</p><blockquote><p>该插件支持TrueDepth API。如果你不使用它，一定要通过修改你的Podfile文件来删除任何TrueDepth功能，否则，你的应用程序将被苹果拒绝。</p></blockquote><img src="/Flutter-ARKit-%E2%80%94-the-complete-crash-course/9.png" class="" title="示意图 width=400"><h4 id="进一步阅读与结论"><a href="#进一步阅读与结论" class="headerlink" title="进一步阅读与结论"></a>进一步阅读与结论</h4><p>在这篇文章中，你已经了解了AR包 “ARKit “的基础知识。你已经看到了它是多么容易使用，以及它是多么强大。</p><p>如果你使用Freezed、Isar或Flutter Hooks等包，你可以展开ARKit的全部力量。</p><p>谢谢你的阅读，祝你有个愉快的一天！</p><!-- https://tomicriedel.medium.com/4007f8b7f945 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> ARKit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6个针对Java程序员的免费Spring Boot课程</title>
      <link href="/6-Free-Spring-Boot-Courses-For-Java-Programmers.html"/>
      <url>/6-Free-Spring-Boot-Courses-For-Java-Programmers.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这些免费课程将教会你关于流行的Java框架Spring Boot的一切知识。</p></blockquote><img src="/6-Free-Spring-Boot-Courses-For-Java-Programmers/1.jpeg" class="" title="示意图 width=400"><p>在过去十年中，Spring已经成为Java开发者最受欢迎的框架之一。<br>同样，Spring Boot是Spring框架的一个轻量级版本，用于微服务。<br>它不仅仅是一个框架，而是一个拥有许多集成工具的平台，支持多种行业用例，如Spring Batch和Spring Integration。它是一个直观的、易于配置的下一代框架。</p><p>因此，我在这里分享一些最有用的免费Spring boot课程。如果你对支付Spring Boot教程不感兴趣，这篇文章将帮助你学习它。所以，不再多说，让我们开始吧!</p><span id="more"></span><h3 id="面向Java程序员的免费Spring-Boot课程"><a href="#面向Java程序员的免费Spring-Boot课程" class="headerlink" title="面向Java程序员的免费Spring Boot课程"></a>面向Java程序员的免费Spring Boot课程</h3><p>请记住，这些免费的Spring Boot课程将来可能又会变成付费课程，所以把它们放在你的清单上，避免以后再付费。不多说了，我们开始吧!</p><h4 id="1-Spring-Boot-Restful-Web-Services-Tutorial-—-Udemy"><a href="#1-Spring-Boot-Restful-Web-Services-Tutorial-—-Udemy" class="headerlink" title="1. Spring Boot Restful Web Services Tutorial — [Udemy]"></a>1. <a href="https://www.udemy.com/course/spring-boot-restful-web-services-tutorial-free-course/">Spring Boot Restful Web Services Tutorial</a> — [Udemy]</h4><img src="/6-Free-Spring-Boot-Courses-For-Java-Programmers/2.jpeg" class="" title="示意图 width=400"><p>Spring Boot允许开发人员快速、轻松地创建基于Spring的应用程序。使用Spring Boot，开发人员可以快速创建基于Spring的应用程序，而不需要一次又一次地编写模板代码。</p><p>在这个Spring Boot课程中，您将:</p><ul><li>学习如何使用Spring Boot构建RESTful Web服务。</li><li>发现如何在Spring boot应用程序中实现三层架构（控制器、服务和存储库）。</li><li>了解如何将Spring boot应用程序连接到MySQL数据库。</li><li>了解如何使用Lombok库来减少模板代码。</li><li>了解Spring Data JPA如何在Spring Boot应用程序中工作。</li></ul><p>总之，Spring Boot是Spring框架的一个扩展，它消除了设置Spring应用程序所需的所有模板配置。本课程将帮助您学习如何使用Spring Boot、Spring Data JPA（Hibernate）和MySQL为员工管理项目开发REST API。</p><p>这是Udemy上的一门免费Spring Boot课程，在5门课程中获得了4.4分，长度为1小时51分钟。另外，请记住，由于这是一个免费的Udemy课程，你在完成后不会得到一个证书。</p><h4 id="2-Building-Scalable-Java-Microservices-with-Spring-Boot-and-Spring-Cloud-—-Coursera"><a href="#2-Building-Scalable-Java-Microservices-with-Spring-Boot-and-Spring-Cloud-—-Coursera" class="headerlink" title="2. Building Scalable Java Microservices with Spring Boot and Spring Cloud — [Coursera]"></a>2. <a href="https://www.coursera.org/learn/google-cloud-java-spring">Building Scalable Java Microservices with Spring Boot and Spring Cloud</a> — [Coursera]</h4><p>微服务是松散耦合的服务，形成一种软件设计模式。<br>它们是细粒度的，可以独立地进行扩展和维护。由于强调弹性扩展和按需资源，微服务是公共云环境的理想选择。<br>本课程教您如何使用Spring Boot和Spring Cloud在谷歌云上开发Java应用程序。</p><p>在这个Spring Boot课程中，您将:</p><ul><li>学习在谷歌云上使用Spring Boot和Spring Cloud构建Java应用程序。</li><li>使用Pub/Sub和Spring Integration发送和接收信息。</li><li>学习如何从Cloud SQL迁移到Cloud Spanner作为Java应用的管理关系数据库。</li><li>用Google Cloud的操作套件跟踪和调试你的Spring应用程序。</li></ul><p>在本课程中，您将使用Spring Cloud Config来管理应用程序的配置。您将使用Pub/Sub和Spring Integration发送和接收消息。<br>此外，您将学习如何为您的Java应用程序使用云SQL，它是谷歌云的全球分布的强一致性数据库，以及如何迁移到云Spanner。<br>此外，你还将学习如何使用谷歌云的操作套件来调试和跟踪你的Spring应用程序。</p><p>这是Coursera上的一门免费的Spring boot课程，在5门课程中获得了4.3分，学时为13小时。由于这是一门免费的Coursera课程，你在完成后会收到一份证书。</p><h4 id="3-Introduction-to-Spring-Boot-2-and-Spring-Framework-5-—-Udemy"><a href="#3-Introduction-to-Spring-Boot-2-and-Spring-Framework-5-—-Udemy" class="headerlink" title="3. Introduction to Spring Boot 2 and Spring Framework 5 — [Udemy]"></a>3. <a href="https://www.udemy.com/course/introduction-to-spring-boot-2-and-spring-framework-5/">Introduction to Spring Boot 2 and Spring Framework 5</a> — [Udemy]</h4><img src="/6-Free-Spring-Boot-Courses-For-Java-Programmers/3.jpeg" class="" title="示意图 width=400"><p>这个来自Udemy的免费Spring Boot课程将帮助你了解Spring Boot 2和Spring Framework 5。本课程对任何刚接触Spring Boot的人来说都是完美的!<br>它解释了如何使用Spring Boot 2快速、轻松地建立一个Web应用程序。<br>使用Spring Initializer，您将创建您的初始Spring Boot项目。</p><p>在这个Spring Boot课程中，您将:</p><ul><li>学习如何创建一个Spring Boot Web应用程序。</li><li>创建一个新的Spring Boot项目。</li><li>使用Spring Data JPA存储和检索数据。</li><li>使用Thymeleaf将数据从数据库显示到网页上。<br>之后，您将在这个Spring Boot课程中使用Hibernate创建JPA实体以持久化到数据库中。<br>使用Spring Boot和Spring Data JPA，您将看到如何配置内存中的H2数据库并初始化数据。<br>最后，你将看到如何使用Spring MVC和Thymeleaf模板在网页上显示数据库的数据。</li></ul><p>这是Udemy的一门免费的Spring boot课程，课程评分为4.4（满分5分），时长2小时18分钟。另外，请记住，由于这是一个免费的Udemy课程，你在完成后不会得到一个证书。</p><h4 id="4-Spring-MVC-Spring-Boot-and-Rest-Controllers-—-Coursera"><a href="#4-Spring-MVC-Spring-Boot-and-Rest-Controllers-—-Coursera" class="headerlink" title="4. Spring MVC, Spring Boot, and Rest Controllers — [Coursera]"></a>4. <a href="https://www.coursera.org/learn/spring-mvc-rest-controller">Spring MVC, Spring Boot, and Rest Controllers</a> — [Coursera]</h4><p>希望使用著名的Spring MVC和Spring Boot框架开发基于Java的Web应用和Restful Micro Services的学生将从本课程中受益。<br>作为课程的一部分，学生将使用各种URL模板创建服务，使用json或XML有效载荷进行消费和响应，并创建自定义HTTP头。</p><p>这些服务将支持Java和Angular JS客户端，以展示它们在分布式系统中的可重用性。<br>我们还将讨论使用模型-视图-控制器（MVC）架构来渲染网页的传统网络应用。<br>在这个实践课程中，包括几个实验室来说明关键概念。</p><p>这个Spring boot课程的主题包括:</p><ul><li>Spring MVC、SpringBoot和RestControllers</li><li>请求参数</li><li>控制器</li></ul><p>这是Coursera上的一门免费的Spring boot课程，课程评分为4.3分，时长为12小时。<br>由于这是一门免费的Coursera课程，你在完成后会收到一份证书。</p><h4 id="5-Spring-Framework-And-Dependency-Injection-For-Beginners-—-Udemy"><a href="#5-Spring-Framework-And-Dependency-Injection-For-Beginners-—-Udemy" class="headerlink" title="5. Spring Framework And Dependency Injection For Beginners — [Udemy]"></a>5. <a href="https://www.udemy.com/course/spring-framework-video-tutorial/">Spring Framework And Dependency Injection For Beginners</a> — [Udemy]</h4><p>本课程非常适合那些刚接触Spring框架或Spring但过去从未配置过Java的初学者。<br>一个真实世界的开发者只需要知道Spring框架的依赖注入框架的几个关键特性。<br>这些是你需要知道的几件事，以便马上开始创建真实世界的应用程序。</p><p>在这个Spring课程中，你将:</p><ul><li>快速开始使用Spring应用程序。</li><li>有效地使用Java和基于注解的依赖注入。</li><li>为不同的环境配置自定义的外部属性和bean。</li><li>使用Spring Boot以正确的方式发送SMTP邮件。</li><li>满怀信心地进一步学习Spring。</li></ul><p>在这个循序渐进的视频教程中，我们首先要学习如何快速创建一个Spring应用程序。<br>本课程将教你使用Java和基于注解的配置，了解Spring的依赖注入（IoC）功能的基本原理。<br>这项技能在任何Spring框架课程中都是非常宝贵的。</p><p>这是Udemy上的一门免费的Spring boot课程，在5门课程中获得了4.4分，长度为1小时24分钟。另外，请记住，由于这是一门免费的Udemy课程，你在完成后不会得到一个证书。</p><ol start="6"><li><a href="https://www.youtube.com/watch?v=vtPkZShrvXQ">Spring Boot Tutorial For Beginners</a> [FreeCodeCamp — YouTube]</li></ol><iframe width="692" height="519" src="https://www.youtube.com/embed/vtPkZShrvXQ" title="Spring Boot Tutorial for Beginners (Java Framework)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p>用Spring Boot开发Java应用程序是一种很好的体验。<br>该框架简化了创建独立的、基于Spring的生产级应用程序的过程。<br>在这个面向初学者的完整的Spring Boot课程中，你将学到关于Spring Boot的所有知识。</p><!-- https://medium.com/quick-code/5-free-spring-boot-courses-for-java-programmers-369981c93c4a -->]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Courses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Flutter使用NFC</title>
      <link href="/NFC-with-Flutter.html"/>
      <url>/NFC-with-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/NFC-with-Flutter/1.jpeg" class="" title="示意图 width=400"><p>近场通信技术有各种各样的用例，让我们看看我们如何在跨平台的Flutter应用程序中使用它。</p><span id="more"></span><h4 id="NFC究竟是什么？"><a href="#NFC究竟是什么？" class="headerlink" title="NFC究竟是什么？"></a>NFC究竟是什么？</h4><img src="/NFC-with-Flutter/2.jpeg" class="" title="示意图 width=400"><p>NFC（近场通信）实际上描述了一系列的通信技术，可以用来在两个设备之间进行短距离的通信（取决于硬件，在我的测试中最多3厘米）。<br>通常情况下，其中一个设备没有任何形式的电源（例如上面的贴纸，被动部分），由另一个设备无线供电（例如你的手机，主动部分）。<br>NFC硬件有多种类型，从塑料卡上的贴纸、小钥匙扣令牌到缝有芯片的衣服。实际的芯片也有不同的功能，比如:</p><ul><li>支持的不同协议/存储格式（后面会有更多介绍）</li><li>存储大小（从几个字节到32KB不等）</li><li>读/写速度</li><li>内置的硬件加密（如CRYPTO 1、3DES、AES128）。</li><li>读取距离（需要一个特殊的读卡器，例如恩智浦ICODE SLIX，最远可达1.5米）。</li><li>支持写锁，支持读计数器，支持读锁</li></ul><p>ISO/IEC 14443将NFC标签分为5个不同的组别，这取决于上述的特征集。<br>通常情况下，你会处理第二组兼容的标签，这些标签允许多次读写，大小在48字节到2KB之间（理论上规范允许达到1MB）。<br>根据你的使用情况，你也可能最终使用遵循ISO/IEC 15693的标签，该标签描述了范围为多米的非接触式芯片卡。</p><h4 id="NDEF"><a href="#NDEF" class="headerlink" title="NDEF"></a>NDEF</h4><p>NFC数据交换格式，正如其名称所示，描述了一种如何将内容保存在芯片上的方法。<br>所以，是的，我们终于在谈论软件了 :)<br>NDEF允许所有兼容设备了解存储在芯片上的数据结构和类型。所有的内容都被保存为信息，一条信息可以包含多个记录。</p><p>每条记录以一个头开始，其中包含关于该记录的元数据，例如包括有效载荷的类型和大小信息。头部之后是记录的有效内容。</p><blockquote><p>NDEF Record = [Record HEADER][Record playload]</p></blockquote><p>整洁的部分是头的类型，默认情况下，你有7个类型的值:</p><ul><li>0: Empty — 一个没有类型和有效内容的记录</li><li>1: Well-Known (WKT) — NFC论坛RTD中预先定义的类型之一，编码为统一资源名称（URN），如 “urn:wkt:T”，其中T代表文本。</li><li>2: MIME media-type — RFC 2046中定义的类型，如text/csv</li><li>3: Absolute URL — 在RFC 3986中定义</li><li>4: External — 用户定义的值</li><li>5: Unknown — 未知类型，要求长度为0</li><li>6: Unchanged — 用于分块有效内容之间或末端（终止）的记录，长度必须为0</li><li>7: Reserved — 保留给未来使用</li></ul><p>你用它做的大多数事情要么属于1-Well-Known、2-MIME或4-External类别。<br>一个非常常见的4-External记录的例子是Android的 “android.com:pkg”，它被用来打开应用程序。<br>关于实际的结构和配置还有很多，但现在，我们将结束这个话题，最后看一下Flutter的代码。</p><img src="/NFC-with-Flutter/3.jpeg" class="" title="示意图 width=400"><h4 id="Flutter和NFC"><a href="#Flutter和NFC" class="headerlink" title="Flutter和NFC"></a><a href="https://pub.flutter-io.cn/packages/nfc_manager">Flutter和NFC</a></h4><p>你会发现pub.flutter-io.cn上有多个与NFC有点关系的包。<br>我选择的这个叫nfc_manager，支持Android和iOS，这个包在我们的应用程序中的日常使用被证明是可靠的。</p><p>我们将在此展示的项目是基于Flutter的计数器例子，并加入了NFC的元素。<br>这个想法很简单：你可以在一个标签上存储你当前的计数器值，或者从标签上读取一个值。<br>标签就像计数器应用的一个持久性存储层。<br>最酷的一点是，这种存储不在设备上，也不需要任何电源。</p><h4 id="必要的设置"><a href="#必要的设置" class="headerlink" title="必要的设置"></a>必要的设置</h4><p>对于这两个平台，在我们的例子中是安卓和iOS，你需要配置你的应用程序以便能够使用NFC功能。<br>上述链接软件包的pub.flutter-io.cn页面已经指出了所需的步骤。</p><h4 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h4><p>只要在你的flutter项目中的AndroidManifest.xml文件中添加权限请求，你就可以开始了。<br>如果你认为NFC是你的应用程序需要使用的一个要求，你也可以为NFC添加一个 “use-feature “标签。</p><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>首先，似乎只有当你拥有一个付费的苹果开发者账户时，你才能玩转NFC。<br>登录苹果开发者门户，选择</p><pre class="line-numbers language-none"><code class="language-none">Certificates, Identifiers &amp; Profiles -&gt; Identifiers → Select your app -&gt; Enable NFC Tag Reading -&gt; Save.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一旦你完成了这些，你可能需要同步/下载更新的配置文件（对我来说，它开箱即用）。<br>下一步是打开XCode，导航到你的项目和下面显示的屏幕。</p><img src="/NFC-with-Flutter/4.png" class="" title="示意图 width=400"><p>这应该已经生成了你读写NDEF标签所需的所有文件。<br>你可能想更新你的.plist文件中的文字，说明你为什么要使用NFC。如果你需要更多的标签类型，请查看pub.flutter-io.cn页面或<a href="https://developer.apple.com/documentation/corenfc/building_an_nfc_tag-reader_app">苹果的这个链接</a>。</p><img src="/NFC-with-Flutter/5.jpeg" class="" title="示意图 width=400"><h4 id="值得注意的是"><a href="#值得注意的是" class="headerlink" title="值得注意的是"></a>值得注意的是</h4><p>安卓和iOS对NFC的处理方式有很大区别！<br>安卓用户可以在系统设置中关闭设备的NFC，而iOS不允许用户关闭NFC。安卓用户可以在系统设置中关闭设备的NFC，如果他们愿意，iOS不允许用户关闭NFC。如果有应用程序要求，它将始终处于开启状态。</p><p>更重要的是，安卓允许在后台扫描多个标签，而不向用户提供任何视觉指示。<br>iOS总是一个接一个地扫描标签，并总是将你的应用程序覆盖在下面所示的视图上。这意味着你必须添加某种UI元素来触发阅读，并且一旦扫描了一个标签，就总是启动/停止监听器。<br>这可能是一个问题，也可能不是，这在很大程度上取决于你的应用程序和所需的工作流程。</p><img src="/NFC-with-Flutter/6.jpeg" class="" title="示意图 width=400"><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>这个例子的所有代码都在main.dart文件中，下面的片段逐一展示了更相关的部分。为了以防万一，下面是该应用程序在Android上运行的截图。</p><img src="/NFC-with-Flutter/7.png" class="" title="示意图 width=400"><h4 id="如何检查NFC是否可用捏"><a href="#如何检查NFC是否可用捏" class="headerlink" title="如何检查NFC是否可用捏"></a>如何检查NFC是否可用捏</h4><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:nfc_manager/nfc_manager.dart'</span></span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Required for the line below</span>  isNfcAvalible <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">NfcManager</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该包提供了一个方法来检查NFC是否可用，你可以在Flutter环境准备好后（在第4行完成）或在runApp被调用后随时调用。<br>如果你是在安卓系统上，并且这个方法返回错误，这可能意味着:</p><ul><li>该手机没有NFC硬件</li><li>NFC设置是关闭的</li><li>你没有使用NFC的权限</li></ul><p>如果你在iOS设备上得到错误信息，这意味着该设备根本没有NFC硬件。</p><h4 id="以NDEF的形式写和读一个标签"><a href="#以NDEF的形式写和读一个标签" class="headerlink" title="以NDEF的形式写和读一个标签"></a>以NDEF的形式写和读一个标签</h4><p>NDEF是所有平台上最常用的格式，也是以下代码中唯一使用的格式。如果你需要其他格式，请确保你所有的目标平台都支持该格式。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//...</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_listenForNFCEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token comment">//Always run this for ios but only once for android</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isAndroid <span class="token operator">&amp;&amp;</span> listenerRunning <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token class-name">Platform</span><span class="token punctuation">.</span>isIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//Android supports reading nfc in the background, starting it one time is all we need</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">_alert</span><span class="token punctuation">(</span>          <span class="token string-literal"><span class="token string">'NFC listener running in background now, approach tag(s)'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Update button states</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          listenerRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">NfcManager</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">startSession</span><span class="token punctuation">(</span>        onDiscovered<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">NfcTag</span> tag<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>          bool succses <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token comment">//Try to convert the raw tag data to NDEF</span>          <span class="token keyword">final</span> ndefTag <span class="token operator">=</span> <span class="token class-name">Ndef</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//If the data could be converted we will get an object</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ndefTag <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// If we want to write the current counter vlaue we will replace the current content on the tag</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>writeCounterOnNextContact<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//Ensure the write flag is off again</span>              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                writeCounterOnNextContact <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//Create a 1Well known tag with en as language code and 0x02 encoding for UTF8</span>              <span class="token keyword">final</span> ndefRecord <span class="token operator">=</span> <span class="token class-name">NdefRecord</span><span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span>_counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//Create a new ndef message with a single record</span>              <span class="token keyword">final</span> ndefMessage <span class="token operator">=</span> <span class="token class-name">NdefMessage</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ndefRecord<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//Write it to the tag, tag must still be "connected" to the device</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//Any existing content will be overrwirten</span>                <span class="token keyword">await</span> ndefTag<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ndefMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">_alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Counter written to tag'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                succses <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">_alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Writting failed, press 'Write to tag' again"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//The NDEF Message was already parsed, if any</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ndefTag<span class="token punctuation">.</span>cachedMessage <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> ndefMessage <span class="token operator">=</span> ndefTag<span class="token punctuation">.</span>cachedMessage<span class="token operator">!</span><span class="token punctuation">;</span>              <span class="token comment">//Each NDEF message can have multiple records, we will use the first one in our example</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>ndefMessage<span class="token punctuation">.</span>records<span class="token punctuation">.</span>isNotEmpty <span class="token operator">&amp;&amp;</span>                  ndefMessage<span class="token punctuation">.</span>records<span class="token punctuation">.</span>first<span class="token punctuation">.</span>typeNameFormat <span class="token operator">==</span>                      <span class="token class-name">NdefTypeNameFormat</span><span class="token punctuation">.</span>nfcWellknown<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//If the first record exists as 1:Well-Known we consider this tag as having a value for us</span>                <span class="token keyword">final</span> wellKnownRecord <span class="token operator">=</span> ndefMessage<span class="token punctuation">.</span>records<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token comment">///Payload for a 1:Well Known text has the following format:</span>                <span class="token comment">///[Encoding flag 0x02 is UTF8][ISO language code like en][content]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wellKnownRecord<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>first <span class="token operator">==</span> <span class="token number">0x02</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">//Now we know the encoding is UTF8 and we can skip the first byte</span>                  <span class="token keyword">final</span> languageCodeAndContentBytes <span class="token operator">=</span>                      wellKnownRecord<span class="token punctuation">.</span>payload<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//Note that the language code can be encoded in ASCI, if you need it be carfully with the endoding</span>                  <span class="token keyword">final</span> languageCodeAndContentText <span class="token operator">=</span>                      utf8<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>languageCodeAndContentBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//Cutting of the language code</span>                  <span class="token keyword">final</span> payload <span class="token operator">=</span> languageCodeAndContentText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//Parsing the content to int</span>                  <span class="token keyword">final</span> storedCounters <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">tryParse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>storedCounters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    succses <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">_alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Counter restored from tag'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      _counter <span class="token operator">=</span> storedCounters<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment">//Due to the way ios handles nfc we need to stop after each tag</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">NfcManager</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">stopSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>succses <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">_alert</span><span class="token punctuation">(</span>              <span class="token string-literal"><span class="token string">'Tag was not valid'</span></span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// Required for iOS to define what type of tags should be noticed</span>        pollingOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token class-name">NfcPollingOption</span><span class="token punctuation">.</span>iso14443<span class="token punctuation">,</span>          <span class="token class-name">NfcPollingOption</span><span class="token punctuation">.</span>iso15693<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment">//...example code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们从最初的平台检查（第4行至第14行）开始逐节回顾代码。<br>使用平台类，我们可以检查我们是否在Android上运行，并使用一个本地标志防止启动读取器两次。<br>如果读取器没有运行，或者我们在iOS上运行，我们使用</p><pre class="line-numbers language-NfcManager.instance.startSession```方法，通过提供```onDiscovered```回调（第16行）启动一个新的阅读器会话。" data-language="NfcManager.instance.startSession```方法，通过提供```onDiscovered```回调（第16行）启动一个新的阅读器会话。"><code class="language-NfcManager.instance.startSession```方法，通过提供```onDiscovered```回调（第16行）启动一个新的阅读器会话。">所有的读和写都发生在```onDiscovered```回调中，首先检查提供的NfcTag对象。我们只想处理NDEF标签，请看第20行，我们可以直接调用```Ndef.from(tag)```来检查提供的标签是否可以被解析为NDEF格式。&gt; 当你调用此方法时，nfc_manager将自动解析标签上的NDEF信息及其记录。#### 写入向标签写入数据是通过创建NdefMessage对象并将NdefRecord对象的列表作为内容来完成的（见第30至32行）。我们将使用Well-Known类型的文本，默认语言编码设置为 "en"。nfc_manager包提供了一些帮助对象来创建所需的数据。写入数据的最后一步是在我们的NDEF标签对象上调用写入方法，并传递NdefMessage对象（第36行）。&gt; 请注意：要写一个标签，你首先需要读取它，或者更准确地说，它仍然必须在手机的范围内。#### 读取读取NDEF格式的数据发生在第44至63行。该代码首先检查标签上是否有任何NDEF信息。如果找到了，我们要确保它有记录，并且第一条记录是基于Well-Known格式的。现在，代码确保有效数据（一串字节）以0x2开始，这是UTF-8编码文本的标志。有效数据应该始终是这样的格式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[ENCODING_FLAG][ISO_LANGUAGE_CODE][TEXT]</p><pre><code>剩下要做的就是将这些字节（我们可以跳过第一个字节）解码为文本，并使用```substring(2)```切断语言代码。最后一部分与示例应用程序有关（第65至70行），确保文本是一个有效的整数，并将计数器设置为它。#### 摘要&amp;链接&amp;小知识NFC可以被整合到Flutter应用程序中，而不需要做很大的改变，而且现在的大部分手机都支持NFC。NFC标签的存储空间不大，但仍可用于触发功能、分享信息或将用户指向特定的资源。最重要的是，通过NDEF，所有的兼容设备都可以读取信息，而不局限于一个设备/品牌或应用程序。例如，在日常工作中使用NFC来触发我们应用中的各种功能，以替代扫描二维码或手动搜索。对用户来说，最大的好处是NFC不需要摄像头，而且如果需要改变上下文，标签可以被重写。举个简单的例子:你想看看一个存储区的内容？把你的手机靠近NFC标签，手机就会向你显示备件的清单，不管你之前做了什么，都不需要你按下按钮（至少在安卓系统上是这样的......）。Have FUN！&lt;!-- https://medium.com/flutter-community/nfc-with-flutter-f8c3515cb0e0 --&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> NFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7个最佳Python工具让你的生活更轻松</title>
      <link href="/7-Best-Python-Tools-To-Make-Your-Life-Easier.html"/>
      <url>/7-Best-Python-Tools-To-Make-Your-Life-Easier.html</url>
      
        <content type="html"><![CDATA[<img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/1.jpeg" class="" title="示意图 width=400"><p>有一句谚语 “你不必重新发明车轮”。<br>工具就是最好的例子。它可以帮助你以一种简单的方式实现复杂和耗时的功能。<br>据我所知，为了提高生产力和效率，我们需要使用一些最好的工具。<br>在这里，有7个工具，它们将帮助你完成你的开发之旅。</p><span id="more"></span><h4 id="1-thefuck"><a href="#1-thefuck" class="headerlink" title="1. thefuck"></a>1. <a href="https://github.com/nvbn/thefuck">thefuck</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/2.gif" class="" title="示意图 width=400"><p>这是我目前正在使用的一个。<br>我认为用命令行工作会使你的工作效率更高。这是一个宏伟的应用程序，可以纠正你之前的控制台命令。<br>它试图用一条规则来匹配之前的命令。<br>如果发现匹配，就会使用匹配的规则创建一个新的命令并执行。<br>它也是在GitHub上拥有超过73000颗星的最多星级存储库之一。</p><h4 id="2-py-spy"><a href="#2-py-spy" class="headerlink" title="2. py-spy"></a>2. <a href="https://github.com/benfred/py-spy">py-spy</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/3.jpeg" class="" title="示意图 width=400"><p>了解我们的程序在哪里花费时间是开发者的重要任务之一。<br>这个库可以让你直观地看到你的Python程序在什么地方花费时间，而不需要重新启动程序或以任何方式修改代码。<br>为了提高速度，它是用Rust编写的，并且不会与被剖析的Python程序在同一进程中运行。这意味着这个库可以安全地针对生产的Python代码使用。<br>这个库在GitHub上有超过9k颗星。</p><h4 id="3-httpie"><a href="#3-httpie" class="headerlink" title="3. httpie"></a>3. <a href="https://github.com/httpie/httpie">httpie</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/4.gif" class="" title="示意图 width=400"><p>这是一个命令行HTTP客户端。<br>它的目标是使CLI与Web服务的交互尽可能的人性化。<br>它被设计用于测试、调试以及与API和HTTP服务器进行一般的交互。http &amp; https命令允许创建和发送任意的HTTP请求。<br>它在GitHub上有超过24k颗星。</p><h4 id="4-poetry"><a href="#4-poetry" class="headerlink" title="4. poetry"></a>4. <a href="https://github.com/python-poetry/poetry">poetry</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/5.gif" class="" title="示意图 width=400"><p>作为一个开发者，我想你已经知道管理依赖性有时会很费时或复杂。<br>这可以帮助你声明、管理和安装项目的依赖性，确保你在任何地方都有正确的堆栈。<br>它用一个简单的基于pyproject.toml的项目格式取代了setup.py、requirements.txt、setup.cfg、MANIFEST.in和Pipfile。<br>它在GitHub上有超过22000颗星。</p><h4 id="5-you-get"><a href="#5-you-get" class="headerlink" title="5. you-get"></a>5. <a href="https://github.com/soimort/you-get">you-get</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/6.png" class="" title="示意图 width=400"><p>如果你喜欢互联网上的东西，只是想下载它们供自己享用，那么这就是你需要的工具。<br>这是一个很小的命令行工具，用于从网络上下载媒体内容（视频、音频、图片），以防没有其他方便的方法来做。<br>它在GitHub上有超过45.5万颗星。<br>你可以用这个命令安装它 <code>$ pip3 install you-get</code></p><h4 id="6-pyarmor"><a href="#6-pyarmor" class="headerlink" title="6. pyarmor"></a>6. <a href="https://github.com/dashingsoft/pyarmor">pyarmor</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/7.png" class="" title="示意图 width=400"><p>混淆是保护你的代码的最好方法之一。<br>这个库是一个命令行工具，用来混淆Python脚本，将被混淆的脚本绑定到固定的机器上，或者使被混淆的脚本失效。<br>被混淆的脚本是一个普通的python脚本。<br>通过一个额外的扩展模块pytransform，普通的Python脚本可以被混淆的脚本无缝替换。<br>这个库在Github上有超过1.8k颗星。</p><h4 id="7-black"><a href="#7-black" class="headerlink" title="7. black"></a>7. <a href="https://github.com/psf/black">black</a></h4><img src="/7-Best-Python-Tools-To-Make-Your-Life-Easier/8.png" class="" title="示意图 width=400"><p>我相信代码格式化是每个开发人员最常用的工具之一。<br>因为代码格式化器总是为更重要的事情节省时间和精神能量。<br>正如你所猜测的，这个库将帮助你进行Python代码格式化。它为你提供了速度、确定性和摆脱 pycodestyle 对格式化的唠叨的自由。<br>它在GitHub上有超过29k颗星。</p><p>今天就讲到这里。我相信这些库会在你的开发旅程中帮助你很多。</p><!-- https://medium.com/geekculture/7-best-python-tools-to-make-your-life-easier-6fc79c1a65e7 -->]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Flutter中使用GitHub Actions</title>
      <link href="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course.html"/>
      <url>/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course.html</url>
      
        <content type="html"><![CDATA[<img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/1.jpeg" class="" title="示意图 width=400"><p>自动化是我们作为开发者可以拥有的最好的东西之一。<br>这就是为什么当一个新的拉动请求被创建时，自动测试或构建是非常重要的，这样我们就不需要手动操作了。<br>今天我将向你展示如何使用GitHub Actions和Flutter来创建一个完整的持续集成流程。<br>让我们开始吧!</p><span id="more"></span><p>阅读愉快!</p><h4 id="创建我们的基本结构"><a href="#创建我们的基本结构" class="headerlink" title="创建我们的基本结构"></a>创建我们的基本结构</h4><p>首先，我们进入我们的应用程序的根，创建一个名为.github的文件夹。<br>在这个文件夹中，我们创建一个文件夹workflows。<br>现在，我们在workflows里面创建一个叫ci.yml的文件。ci.yml现在是我们的第一个工作流程。<br>我们将给我们的工作流一个名字（本例中为持续集成），并指定它应该在什么情况下运行。<br>在我们的例子中，它将是在一个拉动请求上。</p><img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/2.png" class="" title="示意图 width=400"><h4 id="创建一个测试工作"><a href="#创建一个测试工作" class="headerlink" title="创建一个测试工作"></a>创建一个测试工作</h4><p>现在我们要创建一个作业，来运行我们的Flutter应用程序的测试。<br>在一个工作流程中，可以有多个作业被执行。因此，我们首先要创建一个作业，我们称之为flutter_test，名称为运行Flutter应用测试。<br>我们还必须定义它应该运行哪个操作系统。你可以选择windows、macOS和不同的Linux版本，所以我们将只使用windows-latest。</p><img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/3.png" class="" title="示意图 width=400"><p>现在我们来到了有趣的部分。<br>我们将指定工作所要做的步骤。<br>首先，我们必须指定，工作必须使用 actions/checkout@v2，用 actions/setup-java@v1 进行 java 设置。<br>我们还必须指定用于 flutter 的操作，我们将使用 subosito 的项目：subosito/flutter-actions 在主分支上。<br>有了这个动作，我们就可以使用我们需要的所有flutter命令。</p><img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/4.png" class="" title="示意图 width=400"><img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/5.png" class="" title="示意图 width=400"><p>因此，首先，我们只是运行 flutter pub get，然后是 flutter analyze 和 flutter test。如果分析或测试失败，整个行动就会失败。</p><img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/6.png" class="" title="示意图 width=400"><p>如果你现在把它推送到 GitHub 上的主分支，并创建一个新的拉取请求，你应该看到它自动运行了这个测试。<br>之后，你也可以break你的测试，提交到该分支，看看测试会如何失败。</p><img src="/Use-GitHub-Actions-with-Flutter-%E2%80%94-Crash-Course/7.png" class="" title="示意图 width=400"><h4 id="来点高级的"><a href="#来点高级的" class="headerlink" title="来点高级的"></a>来点高级的</h4><p>您也可以做不同的事情。<br>例如，如果您想为iOS构建，您只需创建一个新的作业（在flutter_test下面），将其称为 “创建iOS构建”，并取代<code>flutter analyze</code>和<code>flutter test</code>，我们将运行<code>flutter clean</code>，然后<code>flutter build ios --no-codeign</code>。<br>除此以外，在 “名称 “下，你还必须添加 needs: [flutter_test]，所以只有当我们的测试成功时，我们才会构建一个ios应用程序。你也可以对安卓和其他平台做同样的事情。</p><h4 id="进一步阅读和结论"><a href="#进一步阅读和结论" class="headerlink" title="进一步阅读和结论"></a>进一步阅读和结论</h4><p>在这篇文章中，你已经了解了Flutter中GitHub Actions的基础知识。<br>您已经看到它是多么容易使用，以及它能为您节省多少时间。</p><p>有一些很好的Flutter软件包，如Freezed、Isar或Riverpod，它们将进一步提高你的工作效率。</p><p>谢谢你的阅读，祝你有个愉快的一天!</p><!-- https://tomicriedel.medium.com/857faad16671 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你应该在你的下一个项目中使用7个有用的Python库</title>
      <link href="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project.html"/>
      <url>/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project.html</url>
      
        <content type="html"><![CDATA[<img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/1.jpeg" class="" title="示意图 width=400"><p>有一句谚语：”你不必重新发明车轮”。<br>库就是最好的例子，它可以帮助你以一种简单的方式编写复杂而耗时的功能。、据我所知，一个好的项目会使用一些最好的库。</p><span id="more"></span><p>这篇文章是关于Python强大库系列的一部分，在这个系列中，我准备了7个Python库的列表，这些库将帮助你的开发之旅。</p><h4 id="1-locust"><a href="#1-locust" class="headerlink" title="1. locust"></a>1. <a href="https://github.com/locustio/locust">locust</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/2.png" class="" title="示意图 width=400"><p>这是一个星级最高的Python库，在GitHub上有超过19000颗星。<br>测试是软件开发中最重要的阶段之一。这是一个易于使用、可编写脚本和可扩展的性能测试工具。<br>你在常规的Python代码中定义用户的行为，而不是受制于UI或特定领域的语言，只是假装是真正的代码。<br>这使得这个库可以无限扩展，对开发者非常友好。</p><h4 id="2-loguru"><a href="#2-loguru" class="headerlink" title="2. loguru"></a>2. <a href="https://github.com/Delgan/loguru">loguru</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/3.gif" class="" title="示意图 width=400"><p>我认为日志是最常用的调试方法之一。<br>这个库的目的是通过增加一些有用的功能来解决标准日志的缺陷，从而使Python日志记录不那么痛苦。<br>在你的应用程序中使用日志应该是一种自动行为，这个库试图让它变得既愉快又强大。<br>这个库在GitHub上有超过13000颗星。</p><h4 id="3-pyqtgraph"><a href="#3-pyqtgraph" class="headerlink" title="3. pyqtgraph"></a>3. <a href="https://github.com/pyqtgraph/pyqtgraph">pyqtgraph</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/4.png" class="" title="示意图 width=400"><p>数据的可视化将帮助开发者了解这些数据想要表达什么。<br>这个库旨在用于数学/科学/工程应用。<br>尽管该库完全由python编写，但由于它大量利用了NumPy进行数字运算，Qt的GraphicsView框架进行2D显示，以及OpenGL进行3D显示，所以速度很快。<br>它在GitHub上有超过3千颗星。</p><h4 id="4-faust"><a href="#4-faust" class="headerlink" title="4. faust"></a>4. <a href="https://github.com/robinhood/faust">faust</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/5.png" class="" title="示意图 width=400"><p>它来自Robinhood。<br>这是一个流处理库，将Kafka Streams的想法移植到Python中。<br>它被用来建立高性能的分布式系统和实时数据管道，每天处理数十亿的事件。<br>它不使用DSL，它只是Python。这意味着你可以在流处理时使用所有你喜欢的Python库，如NumPy, PyTorch, Pandas, NLTK, Django, Flask, SQLAlchemy, ++。<br>它在GitHub上有超过6千颗星。</p><h4 id="5-requests-HTML"><a href="#5-requests-HTML" class="headerlink" title="5. requests-HTML"></a>5. <a href="https://github.com/psf/requests-html">requests-HTML</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/6.png" class="" title="示意图 width=400"><p>如果你必须解析HTML，那么这对你来说是一个很好的资源。<br>这个库的目的是使解析HTML（如爬取网络）尽可能简单和直观。<br>它包括很多功能，如完整的JavaScript支持，CSS选择器（又称jQuery风格，感谢PyQuery），XPath选择器，模拟的用户代理（像一个真正的网络浏览器），甚至更多。<br>它在GitHub上有超过12.5万颗星。</p><h4 id="6-pyinfra"><a href="#6-pyinfra" class="headerlink" title="6. pyinfra"></a>6. <a href="https://github.com/Fizzadar/pyinfra">pyinfra</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/8.gif" class="" title="示意图 width=400"><p>这个库可以在大规模的情况下超快地自动化基础设施。<br>它可用于临时命令的执行、服务部署、配置管理等。它包括在成千上万的主机上以可预测的性能进行超快速执行，对SSH/Docker/subprocess/winrm主机进行无代理执行，与Docker、Vagrant/Mech和Ansible开箱即用，等等。<br>它在GitHub上有超过3千颗星。</p><h4 id="7-more-itertools"><a href="#7-more-itertools" class="headerlink" title="7. more-itertools"></a>7. <a href="https://github.com/more-itertools/more-itertools">more-itertools</a></h4><img src="/7-Useful-Python-Libraries-You-Should-Use-in-Your-Next-Project/9.png" class="" title="示意图 width=400"><p>如果你想增强你的处理功能，那么这对你来说是一个很好的资源。<br>这个库是一个宝石，你可以用它提供的功能为各种问题组成优雅的解决方案。<br>它收集了用于处理Python可迭代数据的额外构建blocks, recipes和 routines。<br>它在GitHub上有超过2.7千颗星。</p><p>今天就讲到这里。我相信这些库会在你的开发旅程中帮助你很多。</p><!-- https://medium.com/codex/7-useful-python-libraries-you-should-use-in-your-next-project-6b5159523ebc -->]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Flutter进行电子邮件认证 - Firebase</title>
      <link href="/Email-Authentication-with-Flutter-Firebase.html"/>
      <url>/Email-Authentication-with-Flutter-Firebase.html</url>
      
        <content type="html"><![CDATA[<p>认证是每个应用程序应该具备的基本功能之一。下面是如何使用Firebase Auth为您的Flutter应用添加认证的方法。</p><img src="/Email-Authentication-with-Flutter-Firebase/1.png" class="" title="示意图 width=400"><p>Firebase是Flutter应用程序的首选后端之一，因为它提供了许多免费的功能，以及与Flutter的良好整合。<br>Firebase提供的功能之一是认证。<br>因此，我们就可以在我们的应用程序中整合电子邮件、电话、谷歌、苹果和更多的认证。</p><span id="more"></span><img src="/Email-Authentication-with-Flutter-Firebase/2.png" class="" title="示意图 width=400"><p>为了让你快速了解文章的内容，我们将使用Firebase auth包进行Firebase认证。这篇文章是在Flutter 2.10版本上运行的一个例子中创建的!</p><p>那么，让我们开始进行基本的电子邮件/密码认证吧!</p><img src="/Email-Authentication-with-Flutter-Firebase/3.gif" class="" title="示意图 width=400"><h4 id="第0步：为auth创建一个私有包。"><a href="#第0步：为auth创建一个私有包。" class="headerlink" title="第0步：为auth创建一个私有包。"></a>第0步：为auth创建一个私有包。</h4><p><a href="https://docs.flutter.dev/development/packages-and-plugins/developing-packages">Flutter中的包</a>是可以在项目间共享的代码库，它独立于项目，开发者将其纳入并重用，使工作变得简单而不费时。</p><p>为Firebase Auth创建一个包是一个非常好的选择，从而减少包对我们主项目的依赖。</p><p>因此，为了创建一个包，我们必须首先在我们的项目中创建一个名为packages的文件夹。然后，在这个位置，运行下面的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flutter create <span class="token parameter variable">--template</span><span class="token operator">=</span>package auth_service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令将在packages中创建一个名为auth_service的文件夹。<br>当你在终端运行这个命令时，你会发现某些文件被创建。</p><img src="/Email-Authentication-with-Flutter-Firebase/4.png" class="" title="示意图 width=400"><p>一旦这些文件被创建，你会在软件包中发现一个名为auth_service的文件夹。</p><img src="/Email-Authentication-with-Flutter-Firebase/5.png" class="" title="示意图 width=400"><h4 id="第一步：从Firebase控制台启用认证功能并选择电子邮件-密码。"><a href="#第一步：从Firebase控制台启用认证功能并选择电子邮件-密码。" class="headerlink" title="第一步：从Firebase控制台启用认证功能并选择电子邮件/密码。"></a>第一步：从<a href="https://console.firebase.google.com/">Firebase控制台</a>启用认证功能并选择电子邮件/密码。</h4><p>一旦你把你的项目和应用程序添加到Firebase控制台，前提步骤是在控制台的右侧面板上启用认证功能，并从中启用电子邮件/密码。</p><p>当你点击认证时，你会得到一个欢迎屏幕，在那里你可以点击开始。</p><img src="/Email-Authentication-with-Flutter-Firebase/6.png" class="" title="示意图 width=400"><p>当你点击该按钮时，你将被转到登录方式列表。从那里你可以启用电子邮件/密码。</p><img src="/Email-Authentication-with-Flutter-Firebase/7.png" class="" title="示意图 width=400"><h4 id="第2步：为注册和登录创建一个简单的用户界面。"><a href="#第2步：为注册和登录创建一个简单的用户界面。" class="headerlink" title="第2步：为注册和登录创建一个简单的用户界面。"></a>第2步：为注册和登录创建一个简单的用户界面。</h4><p>你可以用2个TextFields创建一个简单的用户界面，一个是电子邮件地址，一个是密码，还有一个按钮用来提交。<br>注意：使用StatelessWidget而不是StatefulWidget是一个很好的做法，因为它的重建成本比StatefulWidget低。</p><p>下面是一个例子。</p><p>login_view.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_example/signup/view/signup_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_example/home/view/home_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _emailController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _passwordController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Login'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token function">_LoginEmail</span><span class="token punctuation">(</span>emailController<span class="token punctuation">:</span> _emailController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_LoginPassword</span><span class="token punctuation">(</span>passwordController<span class="token punctuation">:</span> _passwordController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_SubmitButton</span><span class="token punctuation">(</span>              email<span class="token punctuation">:</span> _emailController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>              password<span class="token punctuation">:</span> _passwordController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_CreateAccountButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _LoginEmail <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_LoginEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>emailController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> emailController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> emailController<span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Email'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _LoginPassword <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_LoginPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>passwordController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> passwordController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> passwordController<span class="token punctuation">,</span>        obscureText<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Password'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _SubmitButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> password<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'hello'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Login'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _CreateAccountButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function">_CreateAccountButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SignUpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>signup_view.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_example/home/view/home_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SignUpView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _emailController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _passwordController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token function">_CreateAccountEmail</span><span class="token punctuation">(</span>emailController<span class="token punctuation">:</span> _emailController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_CreateAccountPassword</span><span class="token punctuation">(</span>passwordController<span class="token punctuation">:</span> _passwordController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_SubmitButton</span><span class="token punctuation">(</span>              email<span class="token punctuation">:</span> _emailController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>              password<span class="token punctuation">:</span> _passwordController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _CreateAccountEmail <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_CreateAccountEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>emailController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> emailController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> emailController<span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Email'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _CreateAccountPassword <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_CreateAccountPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>passwordController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> passwordController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> passwordController<span class="token punctuation">,</span>        obscureText<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Password'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _SubmitButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> password<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'hello'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所看到的，这个用户界面是非常简单的。两个屏幕都有两个文本字段和一个按钮。当点击按钮时，我们只是添加了打印语句来打印用户提供的电子邮件和密码。</p><h4 id="第3步：创建后端代码，将凭证传递给你的Firebase。"><a href="#第3步：创建后端代码，将凭证传递给你的Firebase。" class="headerlink" title="第3步：创建后端代码，将凭证传递给你的Firebase。"></a>第3步：创建后端代码，将凭证传递给你的Firebase。</h4><p>你需要做的第一件事是在你的pubspec.yaml文件（你创建的auth包）中添加2个包；<a href="https://pub.flutter-io.cn/packages/firebase_core">firebase_core</a>和<a href="https://pub.flutter-io.cn/packages/firebase_auth">firebase_auth</a>。一旦完成，运行flutter pub get，这样Flutter框架就会将包的内容下载到你的本地系统。</p><p>现在，你需要在main.dart文件中的main()函数中初始化Firebase应用程序。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token class-name">Firebase</span><span class="token punctuation">.</span><span class="token function">initializeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第1行，WidgetsFlutterBinding.sureInitialized();确保在我们的初始化没有完成之前，用户界面不会被渲染。</p><p>现在，让我们创建一个文件来包含我们的认证相关函数和Firebase调用。让我们在我们的auth包中把它命名为firebase_auth_service.dart。<br>下一步是创建两个函数：登录和注册。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token class-name">String</span> email<span class="token punctuation">,</span>    required <span class="token class-name">String</span> password<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> userCredential <span class="token operator">=</span> <span class="token keyword">await</span> _firebaseAuth<span class="token punctuation">.</span><span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span>        email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> password<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">_mapFirebaseUser</span><span class="token punctuation">(</span>userCredential<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name"><span class="token namespace">auth<span class="token punctuation">.</span></span>FirebaseAuthException</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token function">_determineError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token class-name">String</span> email<span class="token punctuation">,</span>    required <span class="token class-name">String</span> password<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> userCredential <span class="token operator">=</span> <span class="token keyword">await</span> _firebaseAuth<span class="token punctuation">.</span><span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span>        email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> password<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">_mapFirebaseUser</span><span class="token punctuation">(</span>_firebaseAuth<span class="token punctuation">.</span>currentUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name"><span class="token namespace">auth<span class="token punctuation">.</span></span>FirebaseAuthException</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token function">_determineError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，由于我们使用Firebase进行认证，我们有预先建立的方法来登录和注册。<br>对于注册，我们可以使用createUserWithEmailAndPassword，它需要两个参数，即电子邮件和密码。<br>同样地，我们可以使用signInWithEmailAndPassword，它也需要两个参数，即电子邮件和密码。<br>在这里，我们创建了两个用户定义的方法来处理我们的Firebase调用。这些方法将电子邮件和密码作为参数，并将它们传递给Firebase函数。</p><p>在这里，如果你注意到，我们正在返回UserEntity。我们刚刚创建了一个简单的模型类，它看起来像这样:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>imageUrl<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> imageUrl<span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token class-name">UserEntity</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span>        id<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'id'</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        firstName<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'firstName'</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'lastName'</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        email<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'email'</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        imageUrl<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'imageUrl'</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token string-literal"><span class="token string">'id'</span></span><span class="token punctuation">:</span> id<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">'firstName'</span></span><span class="token punctuation">:</span> firstName<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">'lastName'</span></span><span class="token punctuation">:</span> lastName<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">'email'</span></span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">'imageUrl'</span></span><span class="token punctuation">:</span> imageUrl<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token class-name">UserEntity</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span>        id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        firstName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        email<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>        imageUrl<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>id<span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> imageUrl<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还创建了一个名为_determineError的方法，它可以确定哪个错误被抛出。<br>处理异常总是一个很好的做法，这样我们的代码才不会被破坏 下面是它的代码。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">AuthError</span> <span class="token function">_determineError</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">auth<span class="token punctuation">.</span></span>FirebaseAuthException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'invalid-email'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>invalidEmail<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'user-disabled'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>userDisabled<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'user-not-found'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>userNotFound<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'wrong-password'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>wrongPassword<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'email-already-in-use'</span></span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'account-exists-with-different-credential'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>emailAlreadyInUse<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'invalid-credential'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>invalidCredential<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'operation-not-allowed'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>operationNotAllowed<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'weak-password'</span></span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>weakPassword<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'ERROR_MISSING_GOOGLE_AUTH_TOKEN'</span></span><span class="token punctuation">:</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token class-name">AuthError</span><span class="token punctuation">.</span>error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，AuthError只是一个枚举。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">enum</span> <span class="token class-name">AuthError</span> <span class="token punctuation">{</span>  invalidEmail<span class="token punctuation">,</span>  userDisabled<span class="token punctuation">,</span>  userNotFound<span class="token punctuation">,</span>  wrongPassword<span class="token punctuation">,</span>  emailAlreadyInUse<span class="token punctuation">,</span>  invalidCredential<span class="token punctuation">,</span>  operationNotAllowed<span class="token punctuation">,</span>  weakPassword<span class="token punctuation">,</span>  error<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们从我们的用户界面中调用这些方法吧!</p><h4 id="第4步：从用户界面调用函数"><a href="#第4步：从用户界面调用函数" class="headerlink" title="第4步：从用户界面调用函数!"></a>第4步：从用户界面调用函数!</h4><p>下一步是在我们的用户界面中调用这些函数。<br>现在，要在我们的应用程序中使用我们创建的auth包，你可以把它添加到你的应用程序的pubspec.yaml中，然后在需要的地方导入它。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">auth</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> packages/auth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，对于我们的用户界面，目前我们只是在用户点击登录和注册的按钮时添加了打印语句。现在，是时候采取一些行动了!</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token keyword">await</span> _authService<span class="token punctuation">.</span><span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span>                    email<span class="token punctuation">:</span> _emailController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>                    password<span class="token punctuation">:</span> _passwordController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushReplacement</span><span class="token punctuation">(</span>                      <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">ScaffoldMessenger</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>                    <span class="token class-name">SnackBar</span><span class="token punctuation">(</span>                      content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，上面的代码是用于创建账户页面。在这里，我们调用了在auth_service.dart中创建的createUserWithEmailAndPassword，如果我们没有得到任何异常，我们就会导航到主屏幕，如果有任何错误就会显示SnackBar。<br>同样的方法，我们也可以对登录进行操作。<br>因此，你的最终代码将如下所示。</p><p>signup_view.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_example/home/view/home_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_service/auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:firebase_auth/firebase_auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SignUpView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _emailController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _passwordController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token function">_CreateAccountEmail</span><span class="token punctuation">(</span>emailController<span class="token punctuation">:</span> _emailController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_CreateAccountPassword</span><span class="token punctuation">(</span>passwordController<span class="token punctuation">:</span> _passwordController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_SubmitButton</span><span class="token punctuation">(</span>              email<span class="token punctuation">:</span> _emailController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>              password<span class="token punctuation">:</span> _passwordController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _CreateAccountEmail <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_CreateAccountEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>emailController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> emailController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> emailController<span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Email'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _CreateAccountPassword <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_CreateAccountPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>passwordController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> passwordController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> passwordController<span class="token punctuation">,</span>        obscureText<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Password'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _SubmitButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> password<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">AuthService</span> _authService <span class="token operator">=</span> <span class="token class-name">FirebaseAuthService</span><span class="token punctuation">(</span>    authService<span class="token punctuation">:</span> <span class="token class-name">FirebaseAuth</span><span class="token punctuation">.</span>instance<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> _authService<span class="token punctuation">.</span><span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span>            email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>            password<span class="token punctuation">:</span> password<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushReplacement</span><span class="token punctuation">(</span>            <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ScaffoldMessenger</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>            <span class="token class-name">SnackBar</span><span class="token punctuation">(</span>              content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Email-Authentication-with-Flutter-Firebase/8.gif" class="" title="示意图 width=400"><p>login_view.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_example/signup/view/signup_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_example/home/view/home_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_service/auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:firebase_auth/firebase_auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _emailController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> _passwordController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Login'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token function">_LoginEmail</span><span class="token punctuation">(</span>emailController<span class="token punctuation">:</span> _emailController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_LoginPassword</span><span class="token punctuation">(</span>passwordController<span class="token punctuation">:</span> _passwordController<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_SubmitButton</span><span class="token punctuation">(</span>              email<span class="token punctuation">:</span> _emailController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>              password<span class="token punctuation">:</span> _passwordController<span class="token punctuation">.</span>text<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">_CreateAccountButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _LoginEmail <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_LoginEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>emailController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> emailController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> emailController<span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Email'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _LoginPassword <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_LoginPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>passwordController<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> passwordController<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        controller<span class="token punctuation">:</span> passwordController<span class="token punctuation">,</span>        obscureText<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Password'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _SubmitButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> password<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">AuthService</span> _authService <span class="token operator">=</span> <span class="token class-name">FirebaseAuthService</span><span class="token punctuation">(</span>    authService<span class="token punctuation">:</span> <span class="token class-name">FirebaseAuth</span><span class="token punctuation">.</span>instance<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> _authService<span class="token punctuation">.</span><span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span>            email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>            password<span class="token punctuation">:</span> password<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">pushReplacement</span><span class="token punctuation">(</span><span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ScaffoldMessenger</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>            <span class="token class-name">SnackBar</span><span class="token punctuation">(</span>              content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Login'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> _CreateAccountButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function">_CreateAccountButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SignUpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Email-Authentication-with-Flutter-Firebase/9.gif" class="" title="示意图 width=400"><p>所以，现在这样，我们可以在任何我们想使用的项目中使用auth_service包。<br>如果在未来的任何时候，我们想把后端从Firebase改为其他服务，我们只需要更新这个包，我们的任务就完成了 这使我们能够使我们的应用程序更具可扩展性!</p><p>所以，总结一下步骤:</p><ul><li>在你的Firebase控制台中添加项目和应用程序。</li><li>从控制台启用认证和电子邮件/密码认证。</li><li>为认证服务创建一个包。</li><li>创建简单的用户界面来获取用户的电子邮件和密码。</li><li>从用户界面中调用这些函数<br>等等，你喜欢这篇文章吗？</li></ul><p>这是一个适合初学者的解决方案，您可以轻松地将Flutter - Firebase纳入并实现有效的电子邮件认证。<br>然而，为了创建一个更具可扩展性和强大的产品，有必要使用一个状态管理解决方案。</p><p>如果你有兴趣，我们将分享关于如何建立一个高质量产品的见解。<br>所以，请继续关注我们的下一篇文章😉!</p><!-- https://somniosoftware.com/post/email-authentication-with-firebase-flutter -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认证 </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Bloc进行电子邮件认证 - Flutter | Firebase</title>
      <link href="/Email-Authentication-with-Bloc-%E2%80%94-Flutter-Firebase.html"/>
      <url>/Email-Authentication-with-Bloc-%E2%80%94-Flutter-Firebase.html</url>
      
        <content type="html"><![CDATA[<p>将flutter_bloc整合到现有的电子邮件认证中，该认证以前是用Firebase认证做的。</p><img src="/Email-Authentication-with-Bloc-%E2%80%94-Flutter-Firebase/1.png" class="" title="示意图 width=400"><span id="more"></span><p>在<a href="https://pangz.fun/Email-Authentication-with-Flutter-Firebase.html">上一篇文章</a>中，我们看到了如何使用Firebase Auth将电子邮件认证整合到我们的Flutter应用中。<br>但是，这还没有结束!<br>在这篇文章中，我们将看到我们如何将flutter_bloc整合到我们现有的电子邮件认证中。</p><p>Bloc 是广泛使用的状态管理解决方案之一，因为它使我们能够控制大量的数据以及数据的传递方式。如果你对Bloc完全陌生，也可以随时查看我们关于flutter_bloc的文章。</p><p>所以在我们之前的文章中，我们集成了电子邮件认证，并使用了功能驱动架构，看起来有点像这样。</p><img src="/Email-Authentication-with-Bloc-%E2%80%94-Flutter-Firebase/2.png" class="" title="示意图 width=400"><p>现在，让我们在login文件夹内创建一个bloc文件夹，并创建3个文件：login_bloc.dart、login_event.dart和login_state.dart。</p><img src="/Email-Authentication-with-Bloc-%E2%80%94-Flutter-Firebase/3.png" class="" title="示意图 width=400"><p>现在是时候把我们的业务逻辑与UI层分开了！让我们根据我们的需要创建几个事件类。</p><p>让我们根据我们的需要创建一些事件类。我们将创建3个类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">LoginButtonPressedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">LoginEvent</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">LoginButtonPressedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>LoginEmailChangedEvent。这将被用于文本字段的onChanged方法。所以这个事件将保持电子邮件的最新值。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">LoginEmailChangedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">LoginEvent</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">LoginEmailChangedEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>LoginPasswordChangedEvent。这将以同样的方式用于密码。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">LoginPasswordChangedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">LoginEvent</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">LoginPasswordChangedEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>password<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们来创建状态类!</p><p>login_state.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'login_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">LoginStatus</span> <span class="token punctuation">{</span>  success<span class="token punctuation">,</span>  failure<span class="token punctuation">,</span>  loading<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LoginState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">LoginState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">LoginStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">LoginStatus</span> status<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  <span class="token class-name">LoginState</span> <span class="token function">copyWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token operator">?</span> email<span class="token punctuation">,</span>    <span class="token class-name">String</span><span class="token operator">?</span> password<span class="token punctuation">,</span>    <span class="token class-name">LoginStatus</span><span class="token operator">?</span> status<span class="token punctuation">,</span>    <span class="token class-name">String</span><span class="token operator">?</span> message<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">LoginState</span><span class="token punctuation">(</span>      email<span class="token punctuation">:</span> email <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> password <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>      status<span class="token punctuation">:</span> status <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>      message<span class="token punctuation">:</span> message <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>        message<span class="token punctuation">,</span>        status<span class="token punctuation">,</span>        email<span class="token punctuation">,</span>        password<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们创建了一个类，LoginState和enum LoginStatus。<br>同时，我们创建了一个copyWith方法，这基本上意味着我们将为所有的状态变异同一个状态变量。<br>这里的主要变化是，如果我们没有向copyWith方法提供任何值，它将使用我们在创建状态对象时提供的值。因此，状态对象将总是有一些值，我们可以在有最新值的时候更新这些值。</p><p>现在，是时候创建主块部分了!</p><p>login_bloc.dart</p><p>在bloc部分，我们需要处理我们创建的3个事件类。</p><p>1. </p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginButtonPressedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_handleLoginWithEmailAndPasswordEvent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handleLoginWithEmailAndPasswordEvent</span><span class="token punctuation">(</span>    <span class="token class-name">LoginButtonPressedEvent</span> event<span class="token punctuation">,</span>    <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> _authService<span class="token punctuation">.</span><span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span>        email<span class="token punctuation">:</span> state<span class="token punctuation">.</span>email<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> state<span class="token punctuation">.</span>password<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Success'</span></span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token class-name">LoginStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token class-name">LoginStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们只是从我们在上一篇文章中创建的auth包中调用登录方法。<br>如果我们获得了成功，我们就发出带有新的成功状态和消息的状态。<br>另一方面，如果我们得到任何异常或失败，我们将以失败的状态和异常的信息发出状态。</p><p>2. </p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginEmailChangedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_handleLoginEmailChangedEvent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handleLoginEmailChangedEvent</span><span class="token punctuation">(</span>    <span class="token class-name">LoginEmailChangedEvent</span> event<span class="token punctuation">,</span>    <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> event<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个事件中，我们只是用我们从用户那里得到的新邮件来更新状态。这样，每当我们访问时，我们将得到最新版本的电子邮件。</p><ol start="3"><li><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginPasswordChangedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_handleLoginPasswordChangedEvent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handleLoginPasswordChangedEvent</span><span class="token punctuation">(</span>    <span class="token class-name">LoginPasswordChangedEvent</span> event<span class="token punctuation">,</span>    <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>password<span class="token punctuation">:</span> event<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就像我们为电子邮件所做的那样，我们也要为密码发送状态。</p><p>是时候为注册功能创建Bloc文件了!</p><p>在signup文件夹中创建一个bloc文件夹，并在其中创建事件、状态和bloc文件。</p><img src="/Email-Authentication-with-Bloc-%E2%80%94-Flutter-Firebase/4.png" class="" title="示意图 width=400"><p>我们将采用与登录部分相同的方法。</p><p>所以，让我向你快速展示一下注册区的3个文件应该是什么样子的。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'signup_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token metadata function">@immutable</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SignupEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">SignupEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SignupButtonPressedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">SignupEvent</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">SignupButtonPressedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SignupEmailChangedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">SignupEvent</span> <span class="token punctuation">{</span>  <span class="token class-name">SignupEmailChangedEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SignupPasswordChangedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">SignupEvent</span> <span class="token punctuation">{</span>  <span class="token class-name">SignupPasswordChangedEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>password<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>signup_state.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'signup_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">SignupStatus</span> <span class="token punctuation">{</span>  success<span class="token punctuation">,</span>  failure<span class="token punctuation">,</span>  loading<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SignupState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token class-name">SignupState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">SignupStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">SignupStatus</span> status<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  <span class="token class-name">SignupState</span> <span class="token function">copyWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token operator">?</span> email<span class="token punctuation">,</span>    <span class="token class-name">String</span><span class="token operator">?</span> password<span class="token punctuation">,</span>    <span class="token class-name">SignupStatus</span><span class="token operator">?</span> status<span class="token punctuation">,</span>    <span class="token class-name">String</span><span class="token operator">?</span> message<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SignupState</span><span class="token punctuation">(</span>      email<span class="token punctuation">:</span> email <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> password <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>      status<span class="token punctuation">:</span> status <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>      message<span class="token punctuation">:</span> message <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>        message<span class="token punctuation">,</span>        status<span class="token punctuation">,</span>        email<span class="token punctuation">,</span>        password<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>signup_bloc.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_service/auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:bloc/bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:meta/meta.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'signup_event.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'signup_state.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SignupBloc</span> <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupEvent</span><span class="token punctuation">,</span> <span class="token class-name">SignupState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">SignupBloc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token class-name">AuthService</span> authService<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> _authService <span class="token operator">=</span> authService<span class="token punctuation">,</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">SignupState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupButtonPressedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_handleCreateAccountEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupEmailChangedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_handleSignupEmailChangedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupPasswordChangedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_handleSignupPasswordChangedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token class-name">AuthService</span> _authService<span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handleSignupEmailChangedEvent</span><span class="token punctuation">(</span>    <span class="token class-name">SignupEmailChangedEvent</span> event<span class="token punctuation">,</span>    <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> event<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handleSignupPasswordChangedEvent</span><span class="token punctuation">(</span>    <span class="token class-name">SignupPasswordChangedEvent</span> event<span class="token punctuation">,</span>    <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>password<span class="token punctuation">:</span> event<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handleCreateAccountEvent</span><span class="token punctuation">(</span>    <span class="token class-name">SignupButtonPressedEvent</span> event<span class="token punctuation">,</span>    <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> _authService<span class="token punctuation">.</span><span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span>        email<span class="token punctuation">:</span> state<span class="token punctuation">.</span>email<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> state<span class="token punctuation">.</span>password<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">SignupStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token class-name">SignupStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是这里的变化是，我们正在调用我们在Auth包中创建的注册方法!</p><p>现在，让我们在我们的用户界面中使用这个模块吧</p><p>首先，我们需要向我们的widget树提供这个bloc。</p><p>如果你注意到，我们的模块构造器将AuthService作为参数。所以，我们必须先把我们的FirebaseAuthService提供给widget树。要做到这一点，我们可以在main.dart中提供它</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span><span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>    title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Material App'</span></span><span class="token punctuation">,</span>    home<span class="token punctuation">:</span> <span class="token class-name">RepositoryProvider</span><span class="token punctuation">(</span>      create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">FirebaseAuthService</span><span class="token punctuation">(</span>        authService<span class="token punctuation">:</span> <span class="token class-name">FirebaseAuth</span><span class="token punctuation">.</span>instance<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们使用了RepositoryProvider，因为我们要把它作为一个参数注入到我们的Bloc类中</p><p>对于登录，让我们创建一个名为login_page.dart的新文件，它只是一个skeleton类，将为login_view.dart提供我们的LoginBloc</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_service/auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:firebase_auth_bloc_example/login/bloc/login_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:firebase_auth_bloc_example/login/view/login_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LoginPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocProvider</span><span class="token punctuation">(</span>      create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">LoginBloc</span><span class="token punctuation">(</span>        authService<span class="token punctuation">:</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FirebaseAuthService</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于注册，类似地，我们可以创建一个名为signup_page.dart的文件</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:firebase_auth_bloc_example/signup/bloc/signup_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:firebase_auth_bloc_example/signup/view/signup_view.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:auth_service/auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SignupPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">SignupPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocProvider</span><span class="token punctuation">(</span>      create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SignupBloc</span><span class="token punctuation">(</span>        authService<span class="token punctuation">:</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FirebaseAuthService</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">SignUpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们使用bloc库中作为上下文扩展的read方法访问FirebaseAuthService。<br>现在，让我们做一些真正的事情吧 让我们在我们的用户界面部分使用这个bloc!</p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>因此，我们创建了一个事件，它将保存我们最新版本的登录用电子邮件（LoginEmailChangedEvent）。我们可以在我们的TextField的onChanged方法中添加这个事件</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _LoginEmail <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_LoginEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">LoginEmailChangedEvent</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Email'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们从widget树上读取LoginBloc的实例，并添加LoginEmailChangedEvent与文本字段的最新值。</p><p>类似地，我们可以对密码这样做。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _LoginPassword <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_LoginPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          context              <span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">LoginPasswordChangedEvent</span><span class="token punctuation">(</span>password<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        obscureText<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Password'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们可以在按钮的onPressed方法中添加LoginButtonPressedEvent。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _SubmitButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>              <span class="token class-name">LoginButtonPressedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Login'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们需要用BlocListener来包装我们的表单，这样我们就可以监听我们的成功和失败状态。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">LoginView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginBloc</span><span class="token punctuation">,</span> <span class="token class-name">LoginState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      listener<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">LoginStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushReplacement</span><span class="token punctuation">(</span><span class="token class-name">Home</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">LoginStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ScaffoldMessenger</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>            <span class="token class-name">SnackBar</span><span class="token punctuation">(</span>              content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">_LoginForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h4><p>现在，我们也可以做完全相同的事情来创建一个账户!</p><p>电子邮件：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _CreateAccountEmail <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_CreateAccountEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> context            <span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SignupEmailChangedEvent</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Email'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密码：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _CreateAccountPassword <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_CreateAccountPassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>        obscureText<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Password'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> context            <span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SignupPasswordChangedEvent</span><span class="token punctuation">(</span>password<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交按钮：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> _SubmitButton <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token function">_SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>            <span class="token class-name">SignupButtonPressedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Create Account'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bloc Listener:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">SignUpView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SignupBloc</span><span class="token punctuation">,</span> <span class="token class-name">SignupState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      listener<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">SignupStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushReplacement</span><span class="token punctuation">(</span><span class="token class-name">Home</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">SignupStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ScaffoldMessenger</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>            <span class="token class-name">SnackBar</span><span class="token punctuation">(</span>              content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">_SignupForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是这样啦！</p><p>我们已经成功地将bloc集成到我们的电子邮件认证中。</p><p>我希望你今天能学到一些新的东西!</p><!-- https://medium.com/somnio-software-flutter-agency/email-authentication-with-bloc-flutter-firebase-ea99fd03bea6 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bloc </tag>
            
            <tag> 认证 </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用于Flutter的令人惊叹的票务小工具</title>
      <link href="/Stunning-Ticket-Widget-For-Flutter.html"/>
      <url>/Stunning-Ticket-Widget-For-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/Stunning-Ticket-Widget-For-Flutter/1.png" class="" title="示意图 width=400"><p>在您的flutter应用程序中添加漂亮的Ticket UI。</p><span id="more"></span><p>在这篇文章中，我们将创建一个看起来像票据的小部件。我们可以在我们的应用程序中的任何地方使用该部件，使我们的应用程序看起来很时尚。我们将使用CustomPainter来绘制票务UI小部件。</p><p>⚙️让我们创建一个基础小部件<br>我们将首先创建一个TicketUi小部件，我们将把它变成一个像票据一样的小部件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TicketUi</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">TicketUi</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">SafeArea</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>            height<span class="token punctuation">:</span> <span class="token number">220</span><span class="token punctuation">,</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍后，我们将为上述小组件添加一个CustomPainter。CustomPainter将把这个小部件变成一个漂亮的票据用户界面。</p><p>🎨 实现自定义绘画器<br>让我们创建一个CustomPainter根类，并将其命名为TicketPainter。我们将在TicketPainter类的构造函数中传递背景颜色和边界颜色。</p><p>我们还为类定义了一些变量。这将被用来绘制门票的用户界面。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TicketPainter</span> <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> borderColor<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> bgColor<span class="token punctuation">;</span>    <span class="token class-name">TicketPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>bgColor<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>borderColor<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> maxWidth <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">final</span> maxHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintBg <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>fill      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> bgColor<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintBorder <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> borderColor<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintDottedLine <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> borderColor<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token comment">// Since this Sky painter has no fields, it always paints</span>  <span class="token comment">// the same thing and semantics information is the same.</span>  <span class="token comment">// Therefore we return false here. If we had fields (set</span>  <span class="token comment">// from the constructor) then we would return true if any</span>  <span class="token comment">// of them differed from the same fields on the oldDelegate.</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRebuildSemantics</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绘制门票小部件-✍️"><a href="#绘制门票小部件-✍️" class="headerlink" title="绘制门票小部件 ✍️"></a>绘制门票小部件 ✍️</h4><p>现在我们将定义门票切口和半径的大小。你可以根据你的需要来改变这个。我们还将定义虚线的大小。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">TicketPainter</span> <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> borderColor<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> bgColor<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> _cornerGap <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cutoutRadius <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cutoutDiameter <span class="token operator">=</span> _cutoutRadius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token class-name">TicketPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>bgColor<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>borderColor<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> maxWidth <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">final</span> maxHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">final</span> cutoutStartPos <span class="token operator">=</span> maxHeight <span class="token operator">-</span> maxHeight <span class="token operator">*</span> <span class="token number">0.2</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> leftCutoutStartY <span class="token operator">=</span> cutoutStartPos<span class="token punctuation">;</span>    <span class="token keyword">final</span> rightCutoutStartY <span class="token operator">=</span> cutoutStartPos <span class="token operator">-</span> _cutoutDiameter<span class="token punctuation">;</span>    <span class="token keyword">final</span> dottedLineY <span class="token operator">=</span> cutoutStartPos <span class="token operator">-</span> _cutoutRadius<span class="token punctuation">;</span>    double dottedLineStartX <span class="token operator">=</span> _cutoutRadius<span class="token punctuation">;</span>    <span class="token keyword">final</span> double dottedLineEndX <span class="token operator">=</span> maxWidth <span class="token operator">-</span> _cutoutRadius<span class="token punctuation">;</span>    <span class="token keyword">const</span> double dashWidth <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> double dashSpace <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> paintBg <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>fill      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> bgColor<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintBorder <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> borderColor<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintDottedLine <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> borderColor<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRebuildSemantics</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们已经定义了不同UI组件的X、Y坐标。这个X、Y坐标将被用来在你的小部件中绘制切口和虚线的路径。</p><p>现在我们将实现绘制切口和角弧的方法。🖌</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">TicketPainter</span> <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> borderColor<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> bgColor<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> _cornerGap <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cutoutRadius <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cutoutDiameter <span class="token operator">=</span> _cutoutRadius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token class-name">TicketPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>bgColor<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>borderColor<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">///Removed code for redability</span>  <span class="token punctuation">}</span>  <span class="token function">_drawCutout</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> double startX<span class="token punctuation">,</span> double endY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    path<span class="token punctuation">.</span><span class="token function">arcToPoint</span><span class="token punctuation">(</span>      <span class="token class-name">Offset</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> endY<span class="token punctuation">)</span><span class="token punctuation">,</span>      radius<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span>_cutoutRadius<span class="token punctuation">)</span><span class="token punctuation">,</span>      clockwise<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">_drawCornerArc</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> double endPointX<span class="token punctuation">,</span> double endPointY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    path<span class="token punctuation">.</span><span class="token function">arcToPoint</span><span class="token punctuation">(</span>      <span class="token class-name">Offset</span><span class="token punctuation">(</span>endPointX<span class="token punctuation">,</span> endPointY<span class="token punctuation">)</span><span class="token punctuation">,</span>      radius<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span>_cornerGap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token metadata function">@override</span>  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRebuildSemantics</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，最后一步是添加路径，绘制出票据用户界面。🛣</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TicketPainter</span> <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> borderColor<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Color</span> bgColor<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cornerGap <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cutoutRadius <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> _cutoutDiameter <span class="token operator">=</span> _cutoutRadius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token class-name">TicketPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>bgColor<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>borderColor<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> maxWidth <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">final</span> maxHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">final</span> cutoutStartPos <span class="token operator">=</span> maxHeight <span class="token operator">-</span> maxHeight <span class="token operator">*</span> <span class="token number">0.2</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> leftCutoutStartY <span class="token operator">=</span> cutoutStartPos<span class="token punctuation">;</span>    <span class="token keyword">final</span> rightCutoutStartY <span class="token operator">=</span> cutoutStartPos <span class="token operator">-</span> _cutoutDiameter<span class="token punctuation">;</span>    <span class="token keyword">final</span> dottedLineY <span class="token operator">=</span> cutoutStartPos <span class="token operator">-</span> _cutoutRadius<span class="token punctuation">;</span>    double dottedLineStartX <span class="token operator">=</span> _cutoutRadius<span class="token punctuation">;</span>    <span class="token keyword">final</span> double dottedLineEndX <span class="token operator">=</span> maxWidth <span class="token operator">-</span> _cutoutRadius<span class="token punctuation">;</span>    <span class="token keyword">const</span> double dashWidth <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> double dashSpace <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> paintBg <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>fill      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> bgColor<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintBorder <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> borderColor<span class="token punctuation">;</span>    <span class="token keyword">final</span> paintDottedLine <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> borderColor<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>_cornerGap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> _cornerGap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_drawCornerArc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span> _cornerGap<span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">,</span> rightCutoutStartY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_drawCutout</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span> rightCutoutStartY <span class="token operator">+</span> _cutoutDiameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">,</span> maxHeight <span class="token operator">-</span> _cornerGap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_drawCornerArc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> maxWidth <span class="token operator">-</span> _cornerGap<span class="token punctuation">,</span> maxHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>_cornerGap<span class="token punctuation">,</span> maxHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_drawCornerArc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> maxHeight <span class="token operator">-</span> _cornerGap<span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> leftCutoutStartY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_drawCutout</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> leftCutoutStartY <span class="token operator">-</span> _cutoutDiameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _cornerGap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_drawCornerArc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> _cornerGap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paintBg<span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paintBorder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>dottedLineStartX <span class="token operator">&lt;</span> dottedLineEndX<span class="token punctuation">)</span> <span class="token punctuation">{</span>      canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>        <span class="token class-name">Offset</span><span class="token punctuation">(</span>dottedLineStartX<span class="token punctuation">,</span> dottedLineY<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Offset</span><span class="token punctuation">(</span>dottedLineStartX <span class="token operator">+</span> dashWidth<span class="token punctuation">,</span> dottedLineY<span class="token punctuation">)</span><span class="token punctuation">,</span>        paintDottedLine<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      dottedLineStartX <span class="token operator">+=</span> dashWidth <span class="token operator">+</span> dashSpace<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">_drawCutout</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> double startX<span class="token punctuation">,</span> double endY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    path<span class="token punctuation">.</span><span class="token function">arcToPoint</span><span class="token punctuation">(</span>      <span class="token class-name">Offset</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> endY<span class="token punctuation">)</span><span class="token punctuation">,</span>      radius<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span>_cutoutRadius<span class="token punctuation">)</span><span class="token punctuation">,</span>      clockwise<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">_drawCornerArc</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> double endPointX<span class="token punctuation">,</span> double endPointY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    path<span class="token punctuation">.</span><span class="token function">arcToPoint</span><span class="token punctuation">(</span>      <span class="token class-name">Offset</span><span class="token punctuation">(</span>endPointX<span class="token punctuation">,</span> endPointY<span class="token punctuation">)</span><span class="token punctuation">,</span>      radius<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span>_cornerGap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  bool <span class="token function">shouldRebuildSemantics</span><span class="token punctuation">(</span><span class="token class-name">TicketPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，在小工具上添加自定义绘画器<br>最后一步是把CustomPainter添加到我们的initialTicketUi小部件中。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:blogs/ticket_ui/ticket_painter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TicketUi</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">TicketUi</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">SafeArea</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>            height<span class="token punctuation">:</span> <span class="token number">220</span><span class="token punctuation">,</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>              painter<span class="token punctuation">:</span> <span class="token class-name">TicketPainter</span><span class="token punctuation">(</span>                borderColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">,</span>                bgColor<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFfed966</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🤩 我们已经创建了一个很棒的票据用户界面。</p><img src="/Stunning-Ticket-Widget-For-Flutter/3.png" class="" title="示意图 width=400"><p>最后的票据用户界面与一些自定义的用户界面。你可以根据你的需要创建你自己的用户界面🥳。</p><img src="/Stunning-Ticket-Widget-For-Flutter/4.png" class="" title="示意图 width=400"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:blogs/ticket_ui/horizontal_dotted_line.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:blogs/ticket_ui/ticket_painter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:google_fonts/google_fonts.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TicketUiScreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">TicketUiScreen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">SafeArea</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>          itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> __<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>              height<span class="token punctuation">:</span> <span class="token number">220</span><span class="token punctuation">,</span>              margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>                painter<span class="token punctuation">:</span> <span class="token class-name">TicketPainter</span><span class="token punctuation">(</span>                  borderColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">,</span>                  bgColor<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFfed966</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>                    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                      <span class="token class-name">Row</span><span class="token punctuation">(</span>                        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span>                        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'DEA-HYD'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w700<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'BH07'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w400<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'\$140'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w800<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token class-name">Row</span><span class="token punctuation">(</span>                        crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span>                        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'May 30, 2022'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w400<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token keyword">const</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>                            padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">fromLTRB</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            child<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>                              <span class="token class-name">Icons</span><span class="token punctuation">.</span>circle_outlined<span class="token punctuation">,</span>                              size<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Expanded</span><span class="token punctuation">(</span>                            child<span class="token punctuation">:</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>                              children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                                <span class="token class-name">Positioned</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>                                  child<span class="token punctuation">:</span> <span class="token class-name">Align</span><span class="token punctuation">(</span>                                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                                    child<span class="token punctuation">:</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>                                      painter<span class="token punctuation">:</span> <span class="token class-name">HorizontalDottedLinePainter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      size<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Size</span><span class="token punctuation">(</span>double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>                                  child<span class="token punctuation">:</span> <span class="token class-name">RotatedBox</span><span class="token punctuation">(</span>                                    quarterTurns<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    child<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>                                      <span class="token class-name">Icons</span><span class="token punctuation">.</span>airplanemode_on_rounded<span class="token punctuation">,</span>                                      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">,</span>                                      size<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span>                                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token keyword">const</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>                            padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">fromLTRB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            child<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>                              <span class="token class-name">Icons</span><span class="token punctuation">.</span>circle_outlined<span class="token punctuation">,</span>                              size<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'May 30, 2022'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w400<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token class-name">Row</span><span class="token punctuation">(</span>                        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span>                        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'10:40AM'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'1h 30m'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w400<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'12:50AM'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token class-name">Row</span><span class="token punctuation">(</span>                        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span>                        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                          <span class="token class-name">Text</span><span class="token punctuation">(</span>                            <span class="token string-literal"><span class="token string">'Indigo'</span></span><span class="token punctuation">,</span>                            style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                              fontSize<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>                              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">Container</span><span class="token punctuation">(</span>                            decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>                              borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              border<span class="token punctuation">:</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>                                color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                            child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>                              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>                                horizontal<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>                                vertical<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>                                <span class="token string-literal"><span class="token string">'Cheapest'</span></span><span class="token punctuation">,</span>                                style<span class="token punctuation">:</span> <span class="token class-name">GoogleFonts</span><span class="token punctuation">.</span><span class="token function">poppins</span><span class="token punctuation">(</span>                                  fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                                  fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w400<span class="token punctuation">,</span>                                <span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          itemCount<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Stunning-Ticket-Widget-For-Flutter/5.gif" class="" title="示意图 width=400"><p>谢谢你，我希望这篇文章在某种程度上帮助了你，祝你愉快！👋</p><!-- https://arkapp.medium.com/stunning-ticket-widget-for-flutter-f9851e135eb9 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
          <category> Widget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Widget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter高级BLoC和服务操作</title>
      <link href="/Flutter-Advanced-BLoC-and-Service-Operations.html"/>
      <url>/Flutter-Advanced-BLoC-and-Service-Operations.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这篇文章中，我将解释Bloc和Vexana库的使用，它是一个状态管理解决方案，处于高级水平。我在这个项目中也使用了Provider。我将在下一篇文章中对此进行解释。</p></blockquote><img src="/Flutter-Advanced-BLoC-and-Service-Operations/1.png" class="" title="示意图 width=400"><p>Vexana是一个由 Veli Bacık 基于Dio库之上编写的。它对服务操作非常有用。<br>与其他库不同。</p><span id="more"></span><p>我们创建模型类的方法如下：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:vexana/vexana.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QuoteModel</span> <span class="token keyword">extends</span> <span class="token class-name">INetworkModel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuoteModel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">String</span><span class="token operator">?</span> id<span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token operator">?</span> author<span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token operator">?</span> content<span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> tags<span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token operator">?</span> authorSlug<span class="token punctuation">;</span>  int<span class="token operator">?</span> length<span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token operator">?</span> dateAdded<span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token operator">?</span> dateModified<span class="token punctuation">;</span>  <span class="token class-name">QuoteModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>authorSlug<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dateAdded<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dateModified<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">QuoteModel</span> <span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">QuoteModel</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token class-name">QuoteModel</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">QuoteModel</span><span class="token punctuation">(</span>      id<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'_id'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span>      author<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'author'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span>      content<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'content'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span>      tags<span class="token punctuation">:</span> <span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'tags'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> e <span class="token operator">as</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      authorSlug<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'authorSlug'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span>      length<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'length'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> int<span class="token operator">?</span><span class="token punctuation">,</span>      dateAdded<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'dateAdded'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span>      dateModified<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'dateModified'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">_toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token string-literal"><span class="token string">'id'</span></span><span class="token punctuation">:</span> id<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'author'</span></span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'content'</span></span><span class="token punctuation">:</span> content<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'tags'</span></span><span class="token punctuation">:</span> tags<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'authorSlug'</span></span><span class="token punctuation">:</span> authorSlug<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'length'</span></span><span class="token punctuation">:</span> length<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'dateAdded'</span></span><span class="token punctuation">:</span> dateAdded<span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">'dateModified'</span></span><span class="token punctuation">:</span> dateModified<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里唯一的区别是一个从INetworkModel延伸出来的模型类。</p><p>你可以使用这个链接，它也支持Vexana的Json到Dart操作：<a href="https://dartj.web.app/#/">https://dartj.web.app/#/</a></p><p>现在我们可以开始编写服务操作了。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">VexanaManager</span> <span class="token keyword">extends</span> <span class="token class-name">NetworkManager</span> <span class="token punctuation">{</span>  <span class="token class-name">VexanaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>            options<span class="token punctuation">:</span> <span class="token class-name">BaseOptions</span><span class="token punctuation">(</span>              baseUrl<span class="token punctuation">:</span> <span class="token class-name">AppConstants</span><span class="token punctuation">.</span>baseUrl<span class="token punctuation">,</span>              followRedirects<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            isEnableLogger<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            isEnableTest<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就像在Dio库中一样，我们在这里定义NetworkManager类。它给了我们一些选择。我们以后将使用这个VexanaManager类。这是一个重要的定义。</p><p>让我们继续!</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">IQuoteService</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">INetworkManager</span> networkManager<span class="token punctuation">;</span>  <span class="token class-name">IQuoteService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>networkManager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuoteModel</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">QuoteService</span> <span class="token keyword">extends</span> <span class="token class-name">IQuoteService</span> <span class="token punctuation">{</span>  <span class="token class-name">QuoteService</span><span class="token punctuation">(</span><span class="token class-name">INetworkManager</span> networkManager<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>networkManager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuoteModel</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> networkManager<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>      <span class="token class-name">AppConstants</span><span class="token punctuation">.</span>baseUrl<span class="token punctuation">,</span>      parseModel<span class="token punctuation">:</span> <span class="token class-name">QuoteModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      method<span class="token punctuation">:</span> <span class="token class-name">RequestType</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在让我们仔细研究一下。<br>我们有一个名为IQuoteService的抽象类。<br>在命名时，抽象类通常以I开头，在这里我们将定义我们的方法。我们可以不创建这个抽象类而直接在一个具体的类上定义它，但这不是最佳做法。</p><p>无论如何，首先我们从INetworkManager中创建一个对象（就像从Dio库中创建一个对象）。INetworkManager类是Vexana库带给我们的一个类。</p><p>接下来，定义唯一的方法，这个应用程序的唯一服务是要从API中获取数据。</p><p>现在我们创建一个具体的类，在这个类中我们将定义这个方法，从刚才创建的IQuoteService抽象类中扩展这个类（请连同这些文字一起查看代码）。</p><p>这里我们使用send方法向API发送请求：networkManager.send()。<br>send()期望我们提供各种参数。<br>其中一个是发送请求的路径（AppConstants.baseUrl）。<br>另一个是我们将使用的模型（QuoteModel），以及请求类型。<br>我们使用GET方法是因为我们将为这个应用程序接收数据。如果可以发送一个数据，我们将使用POST等。</p><p>好了，服务过程的最后一步是存储过程。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">QuotesRepository</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> quoteService <span class="token operator">=</span> <span class="token class-name">QuoteService</span><span class="token punctuation">(</span><span class="token class-name">VexanaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuoteModel</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> quoteService<span class="token punctuation">.</span><span class="token function">getAllQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们创建一个类。这个类将在后面的BLoC结构中使用。<br>一个提示：你可以把Repository类想象成Bloc和服务之间的一个层。<br>我们在最开始创建的VexanaManager是一个定义Vexana的类。</p><p>不多说了，让我们看看我们的Bloc结构。</p><blockquote><p>我在这里的目的不是要深入研究Bloc的结构。我的目的是帮助那些已经有一些Bloc知识的人在高级水平上做到这一点。</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">QuoteEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">QuoteEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FetchQuotes</span> <span class="token keyword">extends</span> <span class="token class-name">QuoteEvent</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们先看一下我们的事件文件。在这个应用程序中只有一个事件，那就是从API中获取数据。提醒一下：事件是指用户的行为，状态是指他因这些行为而得到的状态。关键句子是：事件进入块结构，然后状态退出。</p><p>现在来检查一下状态文件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">QuoteState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">QuoteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">QuoteInitial</span> <span class="token keyword">extends</span> <span class="token class-name">QuoteState</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">QuoteLoading</span> <span class="token keyword">extends</span> <span class="token class-name">QuoteState</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">QuoteLoaded</span> <span class="token keyword">extends</span> <span class="token class-name">QuoteState</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">QuoteModel</span> quoteModel<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token class-name">QuoteLoaded</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>quoteModel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>quoteModel<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">QuoteError</span> <span class="token keyword">extends</span> <span class="token class-name">QuoteState</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token class-name">QuoteError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们想一想。我们的事件可能是什么？<br>首先，它可能处于初始状态。所以还没有什么。<br>然后用户按下按钮，想显示一个新的报价。<br>在这种情况下，从API获取数据的过程开始发挥作用，QuoteLoading()就从这里开始。我们从API中获取数据。<br>正如你所猜测的，这就是QuoteLoaded()发挥作用的地方。如果发生错误，则运行QuoteError状态。</p><p>提醒一下。在QuoteLoaded类中，我们定义了将从服务中获取的数据类型。我们将接收类型为QuoteModel的数据。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">QuoteBloc</span> <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuoteEvent</span><span class="token punctuation">,</span> <span class="token class-name">QuoteState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">QuoteBloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">QuoteInitial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">QuotesRepository</span> quotesRepository <span class="token operator">=</span> <span class="token class-name">QuotesRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FetchQuotes</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> emit<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">QuoteLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> quotesRepository<span class="token punctuation">.</span><span class="token function">getAllQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">QuoteLoaded</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">QuoteError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是的，由于上面所有的定义，你现在可以猜到这里发生了什么。<br>提醒一下：我们不要忘记在这里定义我们在服务操作中使用的资源库类 :)</p><p>然后我们把这个Bloc结构整合到接口编码中。</p><p>谢谢你的阅读。我希望它能对你有所帮助。保持健康!</p><!-- https://medium.com/@bedirhanssaglam/flutter-advanced-bloc-and-service-operations-c3cd4a1b400f -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> BLoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何设计一个有吸引力的GitHub简介</title>
      <link href="/How-to-Design-an-Attractive-GitHub-Profile-Readme.html"/>
      <url>/How-to-Design-an-Attractive-GitHub-Profile-Readme.html</url>
      
        <content type="html"><![CDATA[<img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/1.jpeg" class="" title="示意图 width=400"><p>如何创建一个具有视觉吸引力的GitHub配置文件自述。你们都知道会有这样的效果吧？<br>你们中的一些人可能会想：”唉，太好了，又是一篇关于如何制作一个令人印象深刻的GitHub简介的博客😑”。<br>嗯……是的。</p><span id="more"></span><p>但仅仅因为某些东西已经存在，并不意味着你不能创造自己独特的版本。<br>大多数人都会把他们的简介的自述写得很有趣，<br>但看起来不错的简介和有美感的简介之间是有差别的！</p><p>所以在这里，我将向你们展示如何设计一个明星级的GitHub简介自述，我将以我的简介为例。<br>我会提到我的简介所使用的所有资源，以及你如何根据你的风格来定制它。</p><p>但在我们进入简介的设计和风格之前，你们中的许多人可能会问 “这样做的原因是什么？”和 “有必要吗？”。<br>对此，我想说，没有必要为你的简介设计风格并使其独特。<br>不创建readme简介没有什么大的坏处，但肯定有很多好处。</p><p>每个人都把GitHub当作他们项目的储藏室，只是简单地使用它的设计，也就是源代码控制，以及与他人合作开展项目或为开源做贡献。<br>但在2020年，当GitHub发布了创建我们自己独特的readme profile的新功能时，它为开发者和艺术家提供了一种方式，在GitHub上以 “个人简历 “的形式专业地展示他们的工作。<br>这就是它的全部：一个特殊的 repo，作为一个视觉上令人印象深刻的组合，供其他开发者和雇主查看。<br>因此，请继续阅读一些关于GitHub简介风格的难以置信的提示吧</p><ol><li>最开始的步骤 🐤<br>要开始设计你的 GitHub 配置文件，我们首先要创建一个新的公共仓库。<br>点击右上方的 “+”图标，选择 “新仓库”。<br>之后就是关键的一步，确保仓库的名称与你的用户名相同。<br>请参考下面的例子：</li></ol><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/2.jpg" class="" title="示意图 width=400"><p>GitHub 会让你知道你找到了一个特殊的 repo，其 README.md 文件可以被定制。<br>我们希望保持这个 repo 的 “公开性”，以便它能显示在你的 GitHub 配置文件上。你可以提供该仓库的简要描述（例如 “我的 GitHub 配置文件”），不过这一步是可选的。<br>之后，勾选 “添加 README 文件”，并点击 “创建仓库”。接下来，我们将修改这个 README 文件并使其个性化。</p><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/3.jpg" class="" title="示意图 width=400"><ol start="2"><li>一个独特的标题 ❄️<br>你的资料标题是人们观察的第一件事，所以它必须从其他资料中脱颖而出。<br>我们希望最初的 “钩子 “能够吸引浏览者。<br>要做到这一点，我的建议是避免遵循常见的设计规范。<br>例如，许多开发者在他们的 “关于 “部分使用这种布局。</li></ol><pre class="line-numbers language-none"><code class="language-none">### Hi there 👋* 👂 My name is ...* 👩 Pronouns: ...* 🔭 I’m currently working on ...* 🌱 I’m currently learning ...* 🤝 I’m looking to collaborate on ...* 🤔 I’m looking for help with ...* 💬 Ask me about ...* 📫 How to reach me: ...* ❤️ I love ...* ⚡ Fun fact: ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这个模板是完全可以的，只要你改变你的个人资料的其他方面。<br>我从另一个方向来创建标题，然后在这之后添加 “关于我 “部分。<br>我将用我所用的资源来指导你。</p><p>你可以看到的第一件事就是那个带有 “嘿，大家好！”文字的动画标题。<br>我使用了<a href="https://github.com/kyechan99/capsule-render">capsule-render GitHub repo</a>来做这个。我在寻找装饰GitHub repo的方法时发现了这个伟大的资源。你可以在上面添加背景图片和文字，还有，谁不喜欢动画呢！它的使用非常简单，而且还能让你的网站变得更漂亮。它使用起来超级简单，而且在Repo上有很好的记录。下面是我对渲染器的配置。</p><pre class="line-numbers language-none"><code class="language-none">&lt;p align="center"&gt;  &lt;img src="https://capsule-render.vercel.app/api?text=Hey Everyone!🕹️&amp;animation=fadeIn&amp;type=waving&amp;color=gradient&amp;height=100"/&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在插入一个简单的标题后，提供我的各种账户的链接，如LinkedIn、Medium、Dev.to，我想用一种简约的、无文字的方式来做。<br>因此，我决定使用图标。<br>有许多在线工具可以提供成千上万的免费图标供使用:我使用了IconFinder，个人很喜欢它。<br>还有许多其他流行的选择，你可以使用，如Shields.io、markdown-badges、vector-logo-zone、simple-icons等等。</p><p>图标的png来源只需要导入到<img>标签中，如下图所示。</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="https://www.instagram.com/thepiyushmalhotra/"&gt;  &lt;img height="50" src="https://user-images.githubusercontent.com/46517096/166974368-9798f39f-1f46-499c-b14e-81f0a3f83a06.png"/&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在到了有趣的部分，添加了那个NIU B 的 GIF！<br>GIFS 使我们的个人资料更加动态和引人注目。<br>老实说，你可以放任何你想要的 GIF。它可以是流行的表情包、编程 gif、电影或电视节目中的标志性场景，或者告诉人们一些关于你的爱好的东西。<br>就我而言，这是动漫，所以我就是这么做的。 Giphy 和 Tenor 等流行的 gif 共享网站可用于提取您喜欢的任何 gif，其工作方式与添加图标相同，只需复制图像地址并将其粘贴到 <img> 标签的“src”属性中。</p><ol start="3"><li>关于我 “部分 👨💻<br>这是我前面谈到的部分，大多数开发者使用上面的模板。<br>如果你想让你的简介脱颖而出，那么我建议也改变这一部分的设计。我在编辑readme时，继续使用YAML格式，这样当你预览简介时，信息读起来就像代码。</li></ol><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/5.jpg" class="" title="示意图 width=400"><p>它增加了一丝专业性，而且作为奖励，看起来也很整洁! 要显示这种格式，只需将你的文本包起来，如下图所示，你就可以了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">* YOUR TEXT GOES HERE *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>工具和技术的东西 🧰<br>在这一部分，你可以展示你的技能，并列出你所熟悉的工具和技术。<br>我总是喜欢简约明快的设计选择，而不是杂乱无章的数据，所以这次我也采用了图标。<br>我们人类更喜欢通过视觉媒介获取信息，而不是其他东西，对吗？</li></ol><p>你可以使用我在第二步中提到的所有东西，如IconFinder、Shields.io、markdown-badges、vector-logo-zone、simple-icons等。但是对于这一部分，我个人推荐DevIcon。<br>与其他资源不同，DevIcon是专为提供与编程语言和开发工具有关的图标而建立的，这使它成为一个完美的选择。</p><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/4.png" class="" title="示意图 width=400"><p>只要从DevIcon的网站上复制SVG图像源，并将其粘贴在</p><p>标签内，就可以显示多个图标了!</p><pre class="line-numbers language-none"><code class="language-none">&lt;h2&gt; 🚀 &amp;nbsp;Some Tools I Have Used and Learned&lt;/h2&gt;&lt;p align="left"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/vscode/vscode-original.svg" alt="vscode" width="45" height="45"/&gt;&lt;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/bash/bash-original.svg" alt="bash" width="45" height="45"/&gt;&lt;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/php/php-original.svg" alt="php" width="45" height="45"/&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>你的 GitHub 历史 📈<br>最后，在你的简介README的结尾，你几乎可以包括任何东西。<br>有些开发者会在自己的Spotify简介中写上当前正在播放的音乐，有些会添加他们的GitHub统计数据，有些则会在你的GitHub贡献图上添加一个有趣的小蛇游戏.<br>就像我一样，我将向你们展示如何添加这些内容:</li></ol><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/6.jpg" class="" title="示意图 width=400"><p>我先用两张GitHub ReadMe统计卡。一张显示我的星星总数、提交和拉动请求等。<br>另一张则显示我最常用的编程语言的百分比。你们可以从流行的GitHub ReadMe Stats Repo中获得这些卡片，这些卡片最好的部分是它们可以通过不同的设置和主题进行完全定制。</p><p>接下来可能是我所有资料中最喜欢的东西了。把你的GitHub贡献图谱做成一个蛇形游戏。它的设置相当简单，当蛇吞噬你的提交图时，看起来非常令人满意。</p><p>为了给你的档案设置，我们将使用一个叫做GitHub Actions的东西。GitHub Actions是GitHub中的CI/CD工具，你可以启动工作流程，自动运行、部署和构建你的东西。</p><pre class="line-numbers language-none"><code class="language-none">![Snake animation](https://github.com/reasonpun/reasonpun/blob/output/github-contribution-grid-snake.svg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一步是复制上面这一行，并将其添加到你的个人资料的README中。确保把用户名改成你的，而不是我的。</li><li>现在我们需要创建一个GitHub工作流，这样蛇形动画中的贡献图就会根据我们将要设置的cronjob进行更新。</li><li>进入README仓库的 “行动 “标签，创建一个新的工作流。这将在你的版本库中生成一个新的文件夹，名为”.github/workflows”，之后，它将在其中生成一个新文件，名为 “main.yml”。</li></ul><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/8.jpg" class="" title="示意图 width=400"><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/9.jpg" class="" title="示意图 width=400"><p>删除新创建的main.yml文件中的所有内容，并在下面添加这段代码。</p><pre class="line-numbers language-none"><code class="language-none">name: Generate Datason:  schedule: # execute every 12 hours    - cron: "* */12 * * *"  workflow_dispatch:jobs:  build:    name: Jobs to update datas    runs-on: ubuntu-latest    steps:      # Snake Animation      - uses: Platane/snk@master        id: snake-gif        with:          github_user_name: thepiyushmalhotra          svg_out_path: dist/github-contribution-grid-snake.svg      - uses: crazy-max/ghaction-github-pages@v2.1.3        with:          target_branch: output          build_dir: dist        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请确保将我的用户名替换成你的。<br>我们在这里使用一个cronjob，每12小时更新一次，所以只要你有一个新的提交，它就会被添加到你的蛇形动画中。<br>最后一步是回到你的README文件的 “行动 “页面，点击新创建的工作流 “生成数据 “或你给它起的任何名字，并点击 “运行工作流 “按钮。</p><img src="/How-to-Design-an-Attractive-GitHub-Profile-Readme/10.png" class="" title="示意图 width=400"><p>哇！你的 “蛇 “GitHub贡献图谱现在已经激活了。<br>尽情欣赏那条蛇吃掉你的辛勤工作吧! </p><!-- https://bootcamp.uxdesign.cc/how-to-design-an-attractive-github-profile-readme-3618d6c53783 -->]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在移动应用开发中有效地使用敏捷技术</title>
      <link href="/Using-Agile-Effectively-In-Mobile-App-Development.html"/>
      <url>/Using-Agile-Effectively-In-Mobile-App-Development.html</url>
      
        <content type="html"><![CDATA[<img src="/Using-Agile-Effectively-In-Mobile-App-Development/1.png" class="" title="示意图 width=400"><p>移动应用开发是一个复杂的过程，涉及来自不同领域的多个专家，我们试图以最佳方式整合所有这些过程，以确保我们的产品符合标准。<br>要做到这一点，我们必须选择正确的模式，据观察，敏捷模式已经显示出移动应用开发的多种好处。<br>我们已经了解到，创建应用程序的过程涉及到团队内部和客户之间的不断沟通，以便他们能够概述他们想要从应用程序中获得什么。在整个过程中应始终咨询客户，因为这有助于开发高效的软件应用程序。</p><span id="more"></span><h4 id="敏捷方法论如何帮助移动应用程序的开发？"><a href="#敏捷方法论如何帮助移动应用程序的开发？" class="headerlink" title="敏捷方法论如何帮助移动应用程序的开发？"></a>敏捷方法论如何帮助移动应用程序的开发？</h4><p>敏捷方法论在移动应用开发中的作用很大，因为它让我们所有的利益相关者参与到整个软件应用开发周期的各个过程中。</p><p>移动应用程序的开发是一个非常繁琐的过程，涉及大量的工作。<br>敏捷移动应用开发就是这样一种方法，它帮助我们在给定的期限内解决所有的要求。它不仅促进了我们的客户、他们的商业伙伴和我们之间的健康关系，而且还确保了在整个过程中实施渐进式改进。</p><h4 id="什么是敏捷移动应用开发？"><a href="#什么是敏捷移动应用开发？" class="headerlink" title="什么是敏捷移动应用开发？"></a>什么是敏捷移动应用开发？</h4><p>敏捷移动应用开发是一种软件应用程序开发方法，它强调适应性规划，进化的开发和交付，有时间限制的迭代方法，并鼓励对变化作出快速和灵活的反应。<br>使用敏捷，我们依靠快速响应变化的能力，同时也鼓励团队成员和利益相关者之间不断沟通。<br>这就提供了灵活性，而不是依赖大量的文件，因为文件可能很快就会过时，或者像瀑布这样不灵活的方法，可能不允许在开发开始后进行更改。</p><h3 id="敏捷式移动应用开发的优势是什么？"><a href="#敏捷式移动应用开发的优势是什么？" class="headerlink" title="敏捷式移动应用开发的优势是什么？"></a>敏捷式移动应用开发的优势是什么？</h3><ol><li><p>降低了移动应用开发的风险<br>敏捷APP开发的目的是减少风险，为整个开发过程提供无缝的项目管理。这种方法帮助我们有效地管理项目，将其转化为多个单独的模块。</p></li><li><p>更好地理解移动应用程序的开发规划<br>了解客户设定的多方面要求并跟上他们的时间表是一项繁琐的任务。但话说回来，敏捷方法论为我们提供了一个更好的管理项目的方法，它将项目分割成多个组成部分，从而减少了不良规划的风险。</p></li><li><p>敏捷方法论为开发移动应用提供了灵活性<br>移动应用开发的敏捷方法是灵活的，它允许开发人员根据给定的要求和他们的选择来定制他们的开发时间表。它是一种组织软件和移动应用开发工作的适应性方法，重点在于渐进式改进。</p></li><li><p>更快地部署移动应用程序<br>这种APP开发方法使用子模块，鼓励团队在规定的期限内交付每个模块，这意味着更早地进入市场。<br>这是一种完美的移动应用开发方法，错误和缺陷的机会更少，质量保证的成果更好，并在更高的生产力水平下精简性能。</p></li></ol><h4 id="敏捷方法论是否真的能让移动应用变得更好？"><a href="#敏捷方法论是否真的能让移动应用变得更好？" class="headerlink" title="敏捷方法论是否真的能让移动应用变得更好？"></a>敏捷方法论是否真的能让移动应用变得更好？</h4><p>你已经准备好建立一个移动应用。<br>也许你已经有了一个好的想法，或者你正在寻找你的客户想要的东西。<br>但在你开始建设之前，重要的是决定使用哪种参与模式，以便在与科技公司互动时最好地利用。</p><p>敏捷方法帮助开发人员开发一个可管理、灵活和可扩展的软件应用程序。敏捷方法的主要目的是确保用户对其应用程序的性能感到满意。<br>敏捷使用自我组织的团队、跨功能的项目和时间框，以保持对客户问题和变化的持续关注。</p><p>敏捷方法是开发高质量和用户友好的移动应用程序的一个好方法。从规划到交付你的移动应用，它一直是开发高质量和用户友好的移动应用的好方法。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>与传统的软件应用程序开发方法相比，敏捷方法提供了关键的好处。</p><!-- https://blog.geekyants.com/using-agile-effectively-in-mobile-app-development-fc6c80f59642 -->]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
            <tag> software </tag>
            
            <tag> 敏捷开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot应用程序使用@valid来验证API请求</title>
      <link href="/Spring-Boot-Application-Use-valid-to-Validate-API-Request.html"/>
      <url>/Spring-Boot-Application-Use-valid-to-Validate-API-Request.html</url>
      
        <content type="html"><![CDATA[<p>使用@valid可以使你的Request验证更容易。</p><img src="/Spring-Boot-Application-Use-valid-to-Validate-API-Request/1.jpeg" class="" title="示意图 width=400"><p>当我们开发rest API时，我们认为每个人都需要验证接口输入参数的合法性。<br>一些初学者可能会使用许多if-else条件表达式进行验证。以一个新的用户注册为例。</p><span id="more"></span><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user/register"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserRegisterRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"username is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getpassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"password is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"email is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的代码可以达到参数验证的目的，但是细心的读者可能已经发现，如果我们想写很多这样的接口，就需要重复写很多验证代码，这显然不优雅。<br>我们可以使用@valid注解来帮助我们简化验证逻辑。</p><h4 id="使用-Valid"><a href="#使用-Valid" class="headerlink" title="使用@Valid"></a>使用@Valid</h4><p>hibernate-validator实现了@Valid。spring-boot-start-web已经包含这个库，所以不需要引入依赖关系。如果是非spring项目，需要使用两个Maven依赖项。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.0.14.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是与@valid相关的注解。在实体类的属性中添加不同的注解可以实现验证功能。</p><ul><li>@Null限制属性只能为空。</li><li>@NotNull限制属性不能为空。</li><li>@Max(value) 限制属性必须是一个不大于指定值的数字。</li><li>@Min(value)限制属性必须是一个不小于指定值的数字。</li><li>@Digits(integer, fraction) 限制属性必须是一个小数，而且整数部分的数字不能超过整数，小数部分的数字不能超过分数。</li><li>@过去限制属性必须是一个过去的日期。</li><li>@Future 限制属性必须是一个未来的日期。</li><li>@Pattern(value) 限制属性必须符合指定的正则表达式。</li><li>@Size(max, min) 限制字符长度必须在min和Max之间。</li><li>@NotEmpty有效属性值不能为空，字符串长度不能为0，集合大小不能为0。</li><li>@NotBlank 有效的属性值不是空的，并且在trim()之后，长度不是0。</li><li>@Email 验证属性值是一个电子邮件格式的字符串。</li></ul><p>使用@valid注解来完成参数验证是非常简单的。你只需要在实体类的属性中添加适当的注解。<br>上面是同一个新用户注册的例子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegisterRequest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"1[3-9]{1}[0-9]{9}"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"the user phone is illegal."</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"username is required."</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">225</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"username is too long."</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"password is required."</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"The new password is too short."</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">//If entity nesting exists, @valid annotation must be added</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> provice<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detailAddress<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user/register"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserRegisterRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看，就是这么简单。一些注释完成了复杂的验证逻辑。当对目标参数的验证失败时，系统会抛出一个MethodArgumentNotValidException异常。<br>然后，我们可以使用@ExceptionHandler来处理验证结果。</p><h4 id="使用-Exceptionhandler来统一处理验证结果"><a href="#使用-Exceptionhandler来统一处理验证结果" class="headerlink" title="使用@Exceptionhandler来统一处理验证结果"></a>使用@Exceptionhandler来统一处理验证结果</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorResult</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">long</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">ErrorResult</span> <span class="token function">parameterExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">BindingResult</span> exceptions <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> exceptions<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FieldError</span><span class="token punctuation">)</span> errors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>          <span class="token punctuation">}</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"argument valid failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里创建了一个全局异常处理类。我们使用parameterExceptionHandler方法来捕捉MethodArgumentNotValidException异常，最后，统一处理验证失败的结果。<br>这个方法将在每个字段的验证失败后得到错误信息。<br>这里，我使用ErrorResult类来返回错误信息。当我们启动服务时，我们使用postman来发起一个post请求（<a href="http://localhost:8080/user/register">http://localhost:8080/user/register</a> ），我们不输入任何参数并返回结果。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>      <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"the user phone is illegal."</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本文简要介绍了在spring boot中使用@valid来验证API请求。我希望这篇文章能够帮助你。谢谢你的阅读。</p><!-- https://medium.com/javarevisited/spring-boot-application-use-valid-to-validate-api-request-f9a328c1ee2c -->]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5个Flutter工具 助力创业公司起飞</title>
      <link href="/5-flutter-tools-to-built-startup-fast.html"/>
      <url>/5-flutter-tools-to-built-startup-fast.html</url>
      
        <content type="html"><![CDATA[<img src="/5-flutter-tools-to-built-startup-fast/1.png" class="" title="示意图 width=400"><p>Flutter是最有效的应用开发平台之一。Flutter是一个工具包，能够实现自动代码完成、调试和视觉支持。凭借快速的开发时间，Flutter让人们的工作变得更加轻松。</p><span id="more"></span><blockquote><p>90%的创业公司都是由于无法及时满足客户需求而导致失败的。<br>显然，他们不知道快速创建产品的创业工具。</p></blockquote><h3 id="对flutter的介绍。"><a href="#对flutter的介绍。" class="headerlink" title="对flutter的介绍。"></a>对flutter的介绍。</h3><p>Flutter是一个友好的开发者替代方案，用于所有跨平台开发的应用程序，是由谷歌推出的。Flutter允许用户在flutter上创建一个应用程序，然后为多个平台进行跨功能开发。</p><p>那些没有使用过flutter的初创企业开发者在了解到flutter的能力后都感到震惊。它是以更简化的方式为每个人提供移动应用开发。</p><p>有一些创业公司的工具可以在flutter中快速创建产品。但大多数初创企业主并不了解它。<br>了解它们将在创业过程中对你有很大的帮助。</p><p>下面列出了五种快速创建产品的创业工具。</p><ul><li>Appetize</li><li>TestMagic</li><li>Earth One</li><li>Revenue</li><li>Count.ly</li></ul><h3 id="Appetize"><a href="#Appetize" class="headerlink" title="Appetize"></a>Appetize</h3><p>关键属性：</p><ul><li>浏览器中更好的预览</li><li>客户支持</li><li>优秀的培训模块</li></ul><img src="/5-flutter-tools-to-built-startup-fast/2.png" class="" title="示意图 width=400"><p>Appetize是Appetize中最好的创业工具之一。<br>它促进了有效的客户支持，并有助于每一次测试、培训计划和整个开发过程。此外，Appetize允许本地应用程序在浏览器中运行。大多数用户使用Appetize的time frame，这使应用程序的启动速度更快。</p><h3 id="TestMagic"><a href="#TestMagic" class="headerlink" title="TestMagic"></a>TestMagic</h3><p>关键属性：</p><ul><li>它实现了CI/CD</li><li>与Codemagic集成。</li><li>开发人员来处理配置配置文件。</li></ul><img src="/5-flutter-tools-to-built-startup-fast/3.png" class="" title="示意图 width=400"><p>Test Magic是另一个初创的开发者工具。Test Magic为开发者和用户提供便利并简化测试，包括CI/CD部署和连接设备上的下载。<br>Test Magic协助收集上传屏幕截图和反馈，以开发他们的应用程序。</p><h3 id="Eartho-One"><a href="#Eartho-One" class="headerlink" title="Eartho One"></a>Eartho One</h3><p>主要特点：</p><ul><li>可适应任何通用的开发平台</li><li>你可以很容易地保持你的后端解决方案</li><li>自己的服务器/Firebase/Amplify，或者从我们这里获得无代码解决方案。</li><li>卓越的客户服务，免受跟踪保护</li><li>可以使用Flutter和其他任何平台。</li></ul><img src="/5-flutter-tools-to-built-startup-fast/4.png" class="" title="示意图 width=400"><p>一行代码就可以通过任何社交网络认证用户。</p><p>Eartho one是另一个最好的创业公司开发工具之一。就个人而言，它是我最喜欢的一个。它为会员和创作者提供了最大的便利。</p><p>你不需要阅读所有公司的文件，也不需要在那里开设账户。</p><p>Eartho one是第三层，为你抽象出复杂的东西，保护你的用户不被追踪。</p><h3 id="RevenueCat"><a href="#RevenueCat" class="headerlink" title="RevenueCat"></a>RevenueCat</h3><p>主要属性：</p><ul><li>Ideal for fluttering</li><li>您的 Flutter 开发环境现在包括 Flutter SDK。</li><li>考察 LTV、MRR 和流失率等指标</li></ul><img src="/5-flutter-tools-to-built-startup-fast/5.png" class="" title="示意图 width=400"><p>Revenue Cat是一个更复杂的初创企业开发工具。<br>它是Flutter中的最佳工具。<br>Revenue Cat提供了一个应用内订阅计费工具和购买管理。此外，它购买的SDK被安装在创作者的flutter账户中。收入可用于iOS、Stipe和Android设备。</p><h3 id="Count-ly"><a href="#Count-ly" class="headerlink" title="Count.ly"></a>Count.ly</h3><p>关键属性：</p><ul><li>复杂的仪表板是一个关键特征。</li><li>灵活的插件</li><li>一体化/云端部署</li><li>使用分析</li></ul><img src="/5-flutter-tools-to-built-startup-fast/6.png" class="" title="示意图 width=400"><p>Count.ly是任何产品分析解决方案的最佳应用，适用于你的应用程序。<br>通过计数，任何创作者都可以跟踪关键绩效指标，保证数据增长，并提高性能。所有这些指标的执行都是为了协助建立商业战略。<br>此外，你也可以购买付费版本，这将打开许多功能，如推送通知和其他重点功能。</p><h3 id="最后的观点"><a href="#最后的观点" class="headerlink" title="最后的观点"></a>最后的观点</h3><p>因此，如果你是开发应用程序和其他软件的新手，可以尝试使用这些最佳的创业工具来快速和轻松地创建产品。<br>你可以选择其中任何一个。</p><!-- https://medium.com/@emiliosmith100/5-flutter-tools-to-built-startup-fast-97ff7d9fc35b -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> startup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员的测试驱动开发(TDD)</title>
      <link href="/Test-Driven-Development-TDD-for-Java-Programmers.html"/>
      <url>/Test-Driven-Development-TDD-for-Java-Programmers.html</url>
      
        <content type="html"><![CDATA[<p>最常见但又被低估的做法之一是写代码而不实施测试，甚至大多数专业人士也是如此。<br>尽管一个明显的事实是，如果你理解了业务逻辑，你就可以直接深入到执行中去，但这并不意味着你遵循了被编程专家长期证明的最佳实践。<br>实现你的程序的最好方法之一是遵循TDD或测试驱动的开发。<br>在这篇文章中，我们将看看什么是TDD，以及如何使用TDD进行更好的编程。</p><p>什么是TDD？<br>TDD仅仅意味着我们使用测试来驱动代码的实现。但实际上，它是一个从红色到绿色到重构的工作流程。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/1.png" class="" title="示意图 width=400"><span id="more"></span><p>最初，一个新的测试将从红色状态开始，意味着它是一个失败的状态。<br>在初始状态下失败后，我们将纠正测试和逻辑，使其通过或达到绿色状态。一旦我们的测试通过了，我们就可以重构测试和业务逻辑的实现，使它们更有效率。如果重构导致测试回到红色状态，我们将修正测试以进入绿色状态，然后再次重构，从而形成一个循环。</p><h4 id="ISBN验证"><a href="#ISBN验证" class="headerlink" title="ISBN验证"></a>ISBN验证</h4><p>为了更详细地了解TDD，我们将看看我们如何在一个项目中使用TDD。在这个项目中，我们将研究如何验证一本书的ISBN号码。ISBN是国际标准书号的缩写，这些数字是你在任何书的条形码上面找到的。一个ISBN号码的有效性是基于以下简单的逻辑。</p><p>如果ISBN号码包含10个数字，并且它们都是数字，那么ISBN数字与数值10到1的乘积之和除以11应该是一个整数值。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/2.png" class="" title="示意图 width=400"><p>在上面的例子中，总和是132，当它被11除以时，我们得到12，一个整数值。因此，这是一个有效的ISBN号码。</p><p>如果ISBN号码包含9个数字，最后一个数字是字母’X’，那么ISBN数字的乘积的总和是10到1，考虑到’X’是10，除以11应该得到一个整数值。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/3.png" class="" title="示意图 width=400"><p>这里，产品的总和是209，当它被11除以时，我们得到19，这是一个整数值。</p><p>最后，如果ISBN号码包含13位数字，那么这些数字应该交替地乘以1和3。<br>之后，总和除以10应该得到一个整数值。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/4.png" class="" title="示意图 width=400"><p>这里，产品的总和是100，当它被10除以时，我们得到10，这是一个整数值。</p><h4 id="在IntelliJ设置项目"><a href="#在IntelliJ设置项目" class="headerlink" title="在IntelliJ设置项目"></a>在IntelliJ设置项目</h4><p>为此，我们将创建一个新的maven项目。<br>我们将使用IntelliJ IDEA创建一个新的maven项目，请进入文件→新建→项目，选择maven。然后将com.book作为组ID，将tdd作为工件ID。生成项目后，进入pom.xml文件，添加以下内容，将JUnit作为一个依赖项。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，到 src → main → java，创建一个新的包 com.book.tdd，并在其中添加一个名为 ValidateISBN.java 的新类。然后，转到 src → test → java，创建一个新的包 com.book.tdd，并在其中添加一个名为 ValidateISBNTests.class 的新类。加入上述配置后，你的项目应该是这样的。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/5.png" class="" title="示意图 width=400"><p>由于我们使用的是TDD，首先我们将进入ValidateISBNTest.java文件并创建我们的第一个测试。这是因为，在TDD中，代码的实现是由测试驱动的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"Not implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正如我们前面提到的，我们要从红色到绿色。<br>因此，最初我们的测试是失败的，得到了红色状态。<br>为了运行这个测试，我们将使用import org.junit.Test导入测试；通过import org.junit.Assert.*导入断言；这里，我们使用了静态方法导入，因为我们不想在代码中使用断言，如Assert.assertTrue()。而当你使用沟渠运行图标运行这个测试时，你会得到以下输出：</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/6.png" class="" title="示意图 width=400"><p>现在我们需要进入绿色状态，要做到这一点，我们可以删除第10行，fail(“Not Implemented”)；并添加我们期望的方法来检查有效性。为此，我们可以像这样调整我们的测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token number">0140441926</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以注意到，checkISBN(int isbn)方法还没有实现，我们不一定说参数类型应该是字符串或其他什么。我们假设它是int，因为它是一个数字。如果这个数字不是这个类型，我们可以在以后通过测试结果来验证它。</p><p>当我们运行这个程序时，我们得到以下错误，说整数太大。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/7.png" class="" title="示意图 width=400"><p>由于这个原因，我把变量改成了字符串，并再次检查。现在我得到了以下错误:</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/8.png" class="" title="示意图 width=400"><p>我知道这是因为我没有这个方法。<br>因此，我点击发红的方法，在Windows中按alt+enter或者在Mac中按option+enter来选择我所拥有的解决这个问题的选项，从下拉列表中我选择，在’ValidateISBN’中创建方法’checkISBN’，在我们的ValidateISBN.java文件中创建一个新方法。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/9.png" class="" title="示意图 width=400"><p>在ValidateISBN.java文件中创建checkISBN()方法，并返回false作为默认值后，我们可以再次运行测试。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/10.png" class="" title="示意图 width=400"><p>在这里，我们得到一个AssertonError，因为我们对一个假值断言为真。如果我们把第12行改为assertFalse(result)；测试将通过，因为我们断言的是假值。</p><p>现在让我们进入ValidateISBN.java文件，编写我们的实现。在这里，要记住的最重要的事情之一是编写只需要通过测试的代码。<br>在这里，为了通过我们的测试，我们可以把return false;改为return true;现在我们的代码处于绿色状态。</p><p>现在让我们说，我想验证一个无效的ISBN号码。那么我可以在ValidateISBNTests.java文件中写下以下测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkInvalidISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"0140441927"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，当我们运行这个方法时，它失败了，因为我们总是从checkISBN()方法返回true。<br>现在，由于我们处于红色状态，我们需要写一些代码来进入绿色状态。我们将首先写出我们需要为ISBN号码验证所做的第一个检查，我们在前面讨论过；如果数字的数量等于10，并且都是数字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        total <span class="token operator">+=</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们运行我们所写的测试，我们可以看到checkInvalidISBN()没有错误，但checkValidateISBN()却有错误，这是由于我们所检查的ISBN号码是无效的。我们可以用我们用来讨论ISBN号码背后的逻辑的那个号码来代替它，0140449116。</p><p>为了给checkValidateISBN()起一个更有意义的名字，我们可以把它的名字重构为checkValidISBN() 现在我们可以再次运行测试。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/11.png" class="" title="示意图 width=400"><p>而现在我们需要添加另一个测试来验证ISBN号码的长度。我们知道ISBN号码只能是长度为10或13的。所以我们将运行一个测试，证明ISBN的长度不能超过10或13。<br>要做到这一点，我们首先要写一个失败状态的测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNLengthTenOrThirteen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而如果我们将其调整为以下内容并运行测试，我们会得到一个StringIndexOutOfBoundsExceptions，因为这只包含9位数字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNLengthTenOrThirteen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"012345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然我们可以创建一个新的异常来处理这个问题，但我们可以使用Java的NumberFormatException来处理这个问题。由于我们知道这是不对的，而且我们在期待一个错误，所以我们可以将测试注解改为我们所期待的错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNLengthTenOrThirteen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"012345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Test-Driven-Development-TDD-for-Java-Programmers/12.png" class="" title="示意图 width=400"><p>但是测试说它得到了一个意外的异常，因为它之前得到的是StringOutOfBoundsException。那么我们怎样才能解决这个问题呢？为了解决这个问题，我们需要更新我们的checkISBN()方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            total <span class="token operator">+=</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，现在当我们运行测试时，我们得到了预期的结果。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/13.png" class="" title="示意图 width=400"><p>由于变量result是灰色的，这意味着，resultvariable是不必要的。因此，我们可以将这个方法重构为以下内容。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNLengthTenOrThirteen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"012345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们需要测试我们传递给checkISBN()的ISBN是否是数字值（虽然我们讨论过ISBN数字中的字母X）。为了检查它，我们将实现以下测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNNumeric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后，我们可以将其调整为以下代码。由于我们传递的是一个字符串，我们可以期待一个NumberFormatException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNNumeric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们运行这个，我们会得到一个错误。这是因为我们应该看的是数字而不是字母。为了解决这个问题，我们对checkISBN()的代码做了一些调整。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            total <span class="token operator">+=</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而现在，当我们运行测试时，它通过了。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/14.png" class="" title="示意图 width=400"><p>现在我们可以检查那些包含9位数字和字母’X’的ISBN号码。为了检查，我们可以创建一个新的方法，以fail();作为初始状态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkContainsX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以在测试中加入以下内容，当我们运行它时，我们会得到一个NumberFormatException，这要感谢我们之前做的测试和代码修正。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkContainsX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"080442957X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Test-Driven-Development-TDD-for-Java-Programmers/15.png" class="" title="示意图 width=400"><p>现在，为了解决这个问题，我们可以改变我们的checkISBN()方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//do nothing</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            total <span class="token operator">+=</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以看到，如果(i==9 &amp;&amp; isbn.charAt(i)==’X’)我们什么都不做，否则我们就抛出一个异常。而如果我们运行这个，我们会得到一个错误，说我们的断言是错误的。<br>这是因为我们需要将10乘以1加到总数中。所以我们可以通过在添加注释的地方添加total+=10;来解决这个问题（或者什么都不做），并在total += isbn.charAt(i) * (10 - i); 处添加一个else块来解决我们的正常流程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    total <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                total <span class="token operator">+=</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而现在，当我们运行这个测试时，我们得到的仍然是一个错误。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/16.png" class="" title="示意图 width=400"><p>为了理解这一点，我们将在checkISBN()方法的第21行和第23行添加调试指针，并对测试进行调试。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/17.png" class="" title="示意图 width=400"><p>而当我们调试时，我们得到的总数是2801，这是不可能的，因为我们知道总数是209（我们之前讨论的例子）。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/18.png" class="" title="示意图 width=400"><p>那么，为什么会出现这种情况呢？这是因为第11行的isbn.charAt()方法返回了ASCII值，而这个值被乘以了。我们可以使用 Characters.getNumericValue() 方法来解决这个问题。<br>在这之后，checkISBN()方法看起来像这样:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    total <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而现在，当我们运行checkContainsX()测试时，它被通过了。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/19.png" class="" title="示意图 width=400"><p>现在，我们已经实现了我们对10位数的ISBN号码和9位数的ISBN号码以及’X’的代码。所以现在我们唯一需要完成的部分是13位数的ISBN数字。为了实现这一点，我们将首先创建一个测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkValidThirteenDigitISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以调整我们的测试用例，对13位数的数字进行检查。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkValidThirteenDigitISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"9780306406157"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道这是一个ISBN号码，因为这是我们用来讨论业务逻辑的号码。但是当我们运行这个时，我们得到一个错误。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/20.png" class="" title="示意图 width=400"><p>这是因为我们还没有实现这方面的业务逻辑。要做到这一点，我们可以将checkISBN()方法改为以下代码片断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        total <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">11</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在改变checkISBN()方法并运行测试后，它得到了通过。</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/21.png" class="" title="示意图 width=400"><p>虽然我们的代码checkISBN()工作正常，但看起来很乱。为了清理它，我们进行了重构。这是通过创建常量和方法来完成的。重构代码后，它看起来像这样。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>tdd</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateISBN</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ISBN_SHORT</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ISBN_LONG</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ISBN_SHORT_VALIDATOR</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ISBN_LONG_VALIDATOR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ISBN_SHORT</span> <span class="token operator">||</span> isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ISBN_LONG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ISBN_LONG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">checkISBNThirteenDigits</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">checkISBNTenDigits</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN number should have length of 10 or 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkISBNTenDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">ISBN_SHORT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    total <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">ISBN_SHORT</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token constant">ISBN_SHORT_VALIDATOR</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkISBNThirteenDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">ISBN_LONG</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    total <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>isbn<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"ISBN numbers can only have digits."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token constant">ISBN_LONG_VALIDATOR</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们运行测试套件，我们得到以下结果:</p><img src="/Test-Driven-Development-TDD-for-Java-Programmers/22.png" class="" title="示意图 width=400"><p>但是看一下我们的测试文件，我们可以看到我们正在反复使用变量validateISBN。为了避免这一点，我们可以使用 @Before 注解。<br>在使用方法的注解后，我们得到以下的最终测试套件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>tdd</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateISBNTests</span> <span class="token punctuation">{</span>    <span class="token class-name">ValidateISBN</span> validateISBN<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        validateISBN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkValidISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"0140449116"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkInvalidISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"0140441927"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertFalse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNLengthTenOrThirteen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"012345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkISBNNumeric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkContainsX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"080442957X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkValidThirteenDigitISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> validateISBN<span class="token punctuation">.</span><span class="token function">checkISBN</span><span class="token punctuation">(</span><span class="token string">"9780306406157"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后说明"><a href="#最后说明" class="headerlink" title="最后说明"></a>最后说明</h4><p>你可以看到，通过使用TDD，我们可以构建无错误的、高效的代码。这也是大多数公司将TDD作为最佳实践的主要原因。</p><p>虽然我们在这里只使用了JUnit，但在做TDD时，几乎不可能只依赖JUnit。我们必须使用多个测试库来测试我们的代码，这取决于我们的实现。但所有这些都是为了在我们的实现过程中使用TDD。我希望你们已经学会了如何使用TDD进行高效的实现。</p><!-- https://medium.com/javarevisited/test-driven-development-tdd-for-java-programmers-cb73878afdde -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> TDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hibernate搜索构建带有全文搜索的Spring Boot REST API</title>
      <link href="/Build-a-Spring-Boot-REST-API-with-Full-Text-Search-using-Hibernate-Search.html"/>
      <url>/Build-a-Spring-Boot-REST-API-with-Full-Text-Search-using-Hibernate-Search.html</url>
      
        <content type="html"><![CDATA[<img src="/Build-a-Spring-Boot-REST-API-with-Full-Text-Search-using-Hibernate-Search/1.png" class="" title="示意图 width=400"><p>搜索是网络的支柱之一，而全文搜索是每个网站都需要的强制性功能之一。但是实现这样的功能是很复杂的，很多熟练的工程师已经对这个问题进行了认真的思考。所以，我们不要重新发明轮子，而要使用久经考验的Hibernate搜索库。</p><span id="more"></span><p>在这篇博文中，我们将学习如何在Spring boot中建立一个简单的REST API，并使用Hibernate Search进行全文搜索。我们将只介绍基础知识，但Hibernate Search是一个功能丰富的库，它的许多功能远远超过我们在这篇文章中所看到的。你可以在官方文档中查看它所提供的一切，<a href="https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#gettingstarted-framework%E3%80%82">https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#gettingstarted-framework。</a></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>第一步是生成spring boot项目。<br>在本教程中，我们通过SDKman使用spring CLI，但也可以通过Web UI <a href="https://start.spring.io/">https://start.spring.io/</a> 或直接通过IDEA <a href="https://www.jetbrains.com/help/idea/spring-boot.html">https://www.jetbrains.com/help/idea/spring-boot.html</a> 轻松完成。</p><p>要想了解如何在自己的机器上设置CLI，请按照这个指南<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli.sdkman">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli.sdkman</a>。一旦你安装了CLI，执行这个命令就可以生成具有必要依赖性的项目。</p><pre class="line-numbers language-none"><code class="language-none">spring init --dependencies=web,data-jpa,h2,lombok,validation spring-boot-hibernate-search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们打包了以下依赖项:</p><ul><li>用于REST API的web依赖。</li><li>用于数据访问层的spring data JPA，它使用hibernate作为默认的对象关系映射工具。</li><li>h2库，提供一个易于使用的内存嵌入式数据库。这种类型的数据库适合于像本项目这样的小型玩具项目，但它不应该被用于任何将在某个时候运往生产的正式项目。</li><li>Lombok通过注释生成代码片段，避免任何模板代码</li><li>validation是Hibernate对遵循JSR380规范的验证API的实现。它允许，除其他外，使用注释来验证Bean。</li></ul><h3 id="Hibernate搜索设置"><a href="#Hibernate搜索设置" class="headerlink" title="Hibernate搜索设置"></a>Hibernate搜索设置</h3><p>与许多库一样，Spring Boot提供了一种简单的方法来集成Hibernate Search。我们只需要在pom.xml文件中添加所需的依赖项。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate.search.version</span><span class="token punctuation">&gt;</span></span>6.1.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate.search.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-search-mapper-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${hibernate.search.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-search-backend-lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${hibernate.search.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用的是hibernate search 6，这是迄今为止的最新版本，使用Lucene作为后台。Lucene是一个开源的索引和搜索引擎库，也是Hibernate Search使用的默认实现。<br>我们也可以使用不同的实现，如ElasticSearch或OpenSearch。</p><h3 id="定义数据模型"><a href="#定义数据模型" class="headerlink" title="定义数据模型"></a>定义数据模型</h3><p>第一步是定义要进行搜索的实体的模型。</p><p>作为一个例子，我们将使用一个植物实体，包含植物的俗名、学名、科和创建日期。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NaturalId</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>definition<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">FullTextField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>definition<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Indexed</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Indexed</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"plant"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plant</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>createdAt <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> scientificName<span class="token punctuation">,</span> <span class="token class-name">String</span> family<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scientificName <span class="token operator">=</span> scientificName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>family <span class="token operator">=</span> family<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>createdAt <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FullTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NaturalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FullTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NaturalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> scientificName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FullTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> family<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Instant</span> createdAt <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们忽略JPA和Lombok注解，专注于Hibernate Search相关的注解。</p><p>首先，@Index注解向Hibernate Search表明，我们要对这个实体进行索引，以便对它进行搜索操作。</p><p>其次，我们用@FullTextField注解来注释我们想要搜索的字段。这个注解只适用于字符串字段，但其他字段也存在于不同类型的字段。</p><p>然后……这就是了! 对于我们这样一个简单的案例来说，就是这么简单</p><p>但是你可以用库提供的东西做得更多，比如使用条件性索引或调整索引协调。SO，如果你想了解更多，请查看官方文档。</p><h3 id="定义数据层"><a href="#定义数据层" class="headerlink" title="定义数据层"></a>定义数据层</h3><p>我们现在需要定义我们的数据层，处理与数据库的交互。</p><p>我们使用Spring Data资源库，它围绕Hibernate的JPA实现建立了一个抽象。它在之前添加的spring-boot-starter-data-jpa依赖项中提供。</p><p>对于只需要CRUD操作的基本用例，我们可以为植物实体定义一个简单的资源库，并直接扩展JpaRepository接口。</p><p>但这对于全文搜索来说是不够的。在我们的案例中，我们希望将搜索功能添加到我们定义的所有资源库中。为此，我们需要向JpaRepository接口，或任何扩展基础Repository接口的接口添加自定义方法。</p><p>这样，我们只需声明一次这些方法，并使它们对我们项目的每个实体的每个仓库都可用。</p><p>让我们看看如何做这样的事情。</p><p>首先，我们需要创建一个新的通用接口来扩展JpaRepository接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchBy</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们声明将用于全文搜索操作的 searchBy 函数。</p><p>@NoRepositoryBean 注解告诉spring，这个资源库接口不应该像其他带有@Repository 注解的bean一样被实例化。</p><p>我们使用这个注解是因为这个接口的目的不是直接使用，而是由其他资源库来实现。</p><p>我们还需要为这个接口创建实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">SimpleJpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span>        <span class="token keyword">implements</span> <span class="token class-name">SearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> domainClass<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>domainClass<span class="token punctuation">,</span> entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager <span class="token operator">=</span> entityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token punctuation">(</span>            <span class="token class-name">JpaEntityInformation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> entityInformation<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>entityInformation<span class="token punctuation">,</span> entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager <span class="token operator">=</span> entityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchBy</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">getSearchResult</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">hits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSearchResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SearchSession</span> searchSession <span class="token operator">=</span> <span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span>                searchSession                        <span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token function">getDomainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fuzzy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>searchBy方法的实现是使用Hibernate搜索的地方。</p><p>以下参数被传递。</p><ul><li>text: 要搜索的文本</li><li>limit：要搜索的元素的最大数量</li><li>fields：要搜索的所有字段的名称。</li></ul><p>我们利用java的varargs来传递我们要搜索的所有字段。</p><p>在这里，我们使用一个简单的模糊算法作为全文匹配算法，但我们可以很容易地使用自定义分析器进行更复杂的搜索。</p><p>从现在开始，需要全文搜索的资源库只需要实现SearchRepository接口，而不是Spring提供的标准JpaRepository接口。</p><p>而这正是我们为植物实体所做的事情。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Plant</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlantRepository</span> <span class="token keyword">extends</span> <span class="token class-name">SearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所看到的，所有的实现都已经完成了，我们只需要实现之前创建的SearchRepository接口就可以访问SearchRepositoryImpl类中定义的实现。</p><p>最后一步是向Spring指明使用SearchRepositoryImpl作为基类来检测Jpa仓库。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">SearchRepositoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">EnableJpaRepositories</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>repositoryBaseClass <span class="token operator">=</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，由于我们没有指定任何基础包来搜索，Spring将使用定义了该配置的包作为基础包。</p><h3 id="定义业务层"><a href="#定义业务层" class="headerlink" title="定义业务层"></a>定义业务层</h3><p>现在让我们使用我们刚刚定义的数据层，通过声明一个服务来创建业务代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Plant</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">PlantRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlantService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PlantRepository</span> plantRepository<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SEARCHABLE_FIELDS</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"scientificName"</span><span class="token punctuation">,</span><span class="token string">"family"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PlantService</span><span class="token punctuation">(</span><span class="token class-name">PlantRepository</span> plantRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>plantRepository <span class="token operator">=</span> plantRepository<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPlants</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldsToSearchBy <span class="token operator">=</span> fields<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">SEARCHABLE_FIELDS</span> <span class="token operator">:</span> fields<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> containsInvalidField <span class="token operator">=</span> fieldsToSearchBy<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">anyMatch</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token constant">SEARCHABLE_FIELDS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>containsInvalidField<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> plantRepository<span class="token punctuation">.</span><span class="token function">searchBy</span><span class="token punctuation">(</span>                text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> fieldsToSearchBy<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们告诉Spring，这个Bean是应用程序业务层的一部分。</p><p>它包含一个searchPlant函数，转发对SearchRepository的searchBy函数的调用。</p><p>在转发调用之前，它验证了所提供的字段。</p><p>这些字段被列入白名单，以检查搜索将只针对所需的字段，也就是我们之前用@FullTextField注解标注的字段。</p><p>如果提供的字段之一不在白名单中，我们会抛出一个IllegalArgumentException。为了简单起见，我们没有处理这个异常，但应该使用spring提供的许多处理异常的方法中的一种来正确处理它。</p><h3 id="定义网络层"><a href="#定义网络层" class="headerlink" title="定义网络层"></a>定义网络层</h3><p>下一步是定义REST API来接收来自客户端应用程序的HTTP请求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Plant</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">SearchRequestDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">PlantService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/plant"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlantController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PlantService</span> plantService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PlantController</span><span class="token punctuation">(</span><span class="token class-name">PlantService</span> plantService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>plantService <span class="token operator">=</span> plantService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPlants</span><span class="token punctuation">(</span><span class="token class-name">SearchRequestDTO</span> searchRequestDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Request for plant search received with data : "</span> <span class="token operator">+</span> searchRequestDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plantService<span class="token punctuation">.</span><span class="token function">searchPlants</span><span class="token punctuation">(</span>searchRequestDTO<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> searchRequestDTO<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> searchRequestDTO<span class="token punctuation">.</span><span class="token function">getLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用一个基本的Rest控制器和一个单一的GET映射。在将调用转发到业务层之前，我们记录事件以追踪请求的接收情况，以方便对应用程序的监控。<br>它使用一个SearchRequestDTO来接收搜索请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchRequestDTO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是一个简单的POJO，包含用于搜索的参数。我们再次使用Javax Bean Validation注解来确保请求的有效性，以及Lombok @Data注解来生成模板代码（Getters, Setters, toString(), …）。</p><p>请注意，通过使用POJO作为REST API端点的单一参数，我们希望客户端在HTTP请求中把这些参数作为Request Parameter发送。</p><h3 id="对数据进行索引"><a href="#对数据进行索引" class="headerlink" title="对数据进行索引"></a>对数据进行索引</h3><p>最后，为了让Lucene能够在数据中进行搜索，它需要被编制索引。</p><p>在运行时，索引由Hibernate自动管理，在每次通过Hibernate ORM执行操作（如创建或删除一个实体）时应用变化。然而，我们仍然需要为已经存储在数据库中的数据初始化索引，如果有的话。</p><p>为了这个目的，我们需要在application.yml文件中添加一些配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>mydb        <span class="token key atrule">username</span><span class="token punctuation">:</span> mozen        <span class="token key atrule">password</span><span class="token punctuation">:</span> password    <span class="token key atrule">jpa</span><span class="token punctuation">:</span>        <span class="token key atrule">open-in-view</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">properties</span><span class="token punctuation">:</span>            <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>                <span class="token key atrule">search</span><span class="token punctuation">:</span>                    <span class="token key atrule">backend</span><span class="token punctuation">:</span>                        <span class="token key atrule">type</span><span class="token punctuation">:</span> lucene                        <span class="token key atrule">directory.root</span><span class="token punctuation">:</span> ./data/index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们指出存储Lucene索引的根目录。在这里，我们选择直接把它放在项目文件夹中，但在生产中运行时，这个目录应该仔细选择，这取决于你的应用程序被部署在哪里。</p><p>我们还创建了一个组件来包装所有与Lucene索引有关的操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>index</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>orm<span class="token punctuation">.</span></span><span class="token class-name">Search</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>massindexing<span class="token punctuation">.</span></span><span class="token class-name">MassIndexer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SearchSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">EntityManager</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Indexer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THREAD_NUMBER</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Indexer</span><span class="token punctuation">(</span><span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager <span class="token operator">=</span> entityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">indexPersistedData</span><span class="token punctuation">(</span><span class="token class-name">String</span> indexClassName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IndexException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">SearchSession</span> searchSession <span class="token operator">=</span> <span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> classToIndex <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>indexClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MassIndexer</span> indexer <span class="token operator">=</span>                    searchSession                            <span class="token punctuation">.</span><span class="token function">massIndexer</span><span class="token punctuation">(</span>classToIndex<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">threadsToLoadObjects</span><span class="token punctuation">(</span><span class="token constant">THREAD_NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            indexer<span class="token punctuation">.</span><span class="token function">startAndWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexException</span><span class="token punctuation">(</span><span class="token string">"Invalid class "</span> <span class="token operator">+</span> indexClassName<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexException</span><span class="token punctuation">(</span><span class="token string">"Index Interrupted"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于我们的简单演示应用程序，我们只声明了一个函数，该函数在过程中使用指定数量的线程为给定的Class建立索引。</p><p>我们现在需要通过先前定义的Plant类作为参数调用该函数。</p><p>为此，我们还可以创建一个新的REST控制器，包含一个端点，通过HTTP请求来触发索引，以便能够随意重建索引。</p><p>但在本文中，我们只是要使用一个ApplicationRunner，它将在每次启动时被调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">buildIndex</span><span class="token punctuation">(</span><span class="token class-name">Indexer</span> indexer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>indexer<span class="token punctuation">.</span><span class="token function">indexPersistedData</span><span class="token punctuation">(</span><span class="token string">"com.mozen.springboothibernatesearch.model.Plant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在主应用程序类中直接定义Bean。</p><p>buildIndex方法通过依赖注入将索引器作为一个参数。该方法在应用程序启动时执行（就在上下文初始化之后和spring boot应用程序启动之前）。</p><h3 id="把它们放在一起"><a href="#把它们放在一起" class="headerlink" title="把它们放在一起"></a>把它们放在一起</h3><p>让我们首先初始化样本数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">Indexer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Plant</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springboothibernatesearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">PlantRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">initializeData</span><span class="token punctuation">(</span><span class="token class-name">PlantRepository</span> plantRepository<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> plants <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"subalpine fir"</span><span class="token punctuation">,</span> <span class="token string">"abies lasiocarpa"</span><span class="token punctuation">,</span> <span class="token string">"pinaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"sour cherry"</span><span class="token punctuation">,</span> <span class="token string">"prunus cerasus"</span><span class="token punctuation">,</span> <span class="token string">"rosaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"asian pear"</span><span class="token punctuation">,</span> <span class="token string">"pyrus pyrifolia"</span><span class="token punctuation">,</span> <span class="token string">"rosaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"chinese witch hazel"</span><span class="token punctuation">,</span> <span class="token string">"hamamelis mollis"</span><span class="token punctuation">,</span> <span class="token string">"hamamelidaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"silver maple"</span><span class="token punctuation">,</span> <span class="token string">"acer saccharinum"</span><span class="token punctuation">,</span> <span class="token string">"sapindaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"cucumber tree"</span><span class="token punctuation">,</span> <span class="token string">"magnolia acuminata"</span><span class="token punctuation">,</span> <span class="token string">"magnoliaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"korean rhododendron"</span><span class="token punctuation">,</span> <span class="token string">"rhododendron mucronulatum"</span><span class="token punctuation">,</span> <span class="token string">"ericaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"water lettuce"</span><span class="token punctuation">,</span> <span class="token string">"pistia"</span><span class="token punctuation">,</span> <span class="token string">"araceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"sessile oak"</span><span class="token punctuation">,</span> <span class="token string">"quercus petraea"</span><span class="token punctuation">,</span> <span class="token string">"fagaceae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token string">"common fig"</span><span class="token punctuation">,</span> <span class="token string">"ficus carica"</span><span class="token punctuation">,</span> <span class="token string">"moraceae"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plantRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>plants<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">buildIndex</span><span class="token punctuation">(</span><span class="token class-name">Indexer</span> indexer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>indexer<span class="token punctuation">.</span><span class="token function">indexPersistedData</span><span class="token punctuation">(</span><span class="token string">"com.mozen.springboothibernatesearch.model.Plant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们用第二个Bean声明来扩展主应用程序类。它将以与第一个相同的方式在应用程序启动时运行。</p><p>请注意，我们没有在任何地方声明数据SQL模式。因为我们的数据库是嵌入式数据库，spring.jpa.hibernate.ddl-auto属性默认设置为creative-drop，我们的数据库模式是自动生成的，这对于像这样的简单应用来说是很好的。</p><p>现在，让我们测试一下，首先启动我们的应用程序。</p><pre class="line-numbers language-none"><code class="language-none">mvn spring-boot:run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有多种方法来测试搜索端点。</p><p>我们可以使用API平台的Postman。</p><img src="/Build-a-Spring-Boot-REST-API-with-Full-Text-Search-using-Hibernate-Search/2.png" class="" title="示意图 width=400"><p>或者我们可以使用一个简单的cUrl命令，加上所需的参数。</p><pre class="line-numbers language-none"><code class="language-none">// Search in all fieldscurl -X GET 'http://localhost:9000/plant/search?text=cherry&amp;limit=5'// Search only in specified fieldscurl -X GET 'http://localhost:9000/plant/search?text=sian p&amp;limit=5&amp;fields=name&amp;fields=scientificName'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就这样了! 我们现在已经通过HTTP端点实现了全文搜索。</p><p>正如我在这篇博客中多次提到的，Hibernate搜索提供了更多的功能，而我们在这里只是浅尝辄止而已。</p><!-- https://gauthier-cassany.com/posts/spring-boot-hibernate-search -->]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hibernate建立一个带有分页的全文搜索的Spring Boot REST API</title>
      <link href="/Build-a-Spring-Boot-REST-API-with-Paginated-Full-Text-Search-using-Hibernate-Search.html"/>
      <url>/Build-a-Spring-Boot-REST-API-with-Paginated-Full-Text-Search-using-Hibernate-Search.html</url>
      
        <content type="html"><![CDATA[<img src="/Build-a-Spring-Boot-REST-API-with-Paginated-Full-Text-Search-using-Hibernate-Search/1.png" class="" title="示意图 width=400"><p>在<a href="https://pangz.fun/Build-a-Spring-Boot-REST-API-with-Full-Text-Search-using-Hibernate-Search.html">之前的文章</a>中，我们学习了如何使用Hibernate Search为Spring Boot Rest API添加全文搜索。</p><p>在这篇文章中，我们将在此基础上，学习如何向现有的REST API添加分页搜索。</p><span id="more"></span><h3 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h3><p>你可以查看之前的博文，以获得关于如何使用Spring Initializer设置项目的详细攻略。</p><h3 id="扩展数据模型"><a href="#扩展数据模型" class="headerlink" title="扩展数据模型"></a>扩展数据模型</h3><p>首先要解决的是找到一种方法来接收添加分页所需的新数据。</p><p>为此，我们可以扩展SearchRequestDTO。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageableSearchRequestDTO</span> <span class="token keyword">extends</span> <span class="token class-name">SearchRequestDTO</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageOffset<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只需要定义一个新字段，pageOffset。这个字段是用来控制我们要查询的页面的索引。</p><p>我们还定义了一个新的PageDTO。这个数据结构用来保存我们分页搜索的结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展数据层"><a href="#扩展数据层" class="headerlink" title="扩展数据层"></a>扩展数据层</h3><p>我们在SearchRepository接口中声明一个新的searchPageBy函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">NoRepositoryBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchBy</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPageBy</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个签名与现有的 searchBy 函数非常相似。我们只是添加了新的偏移量参数，表示要查询的页面。</p><p>我们把这个变化复制到SearchRepositoryImpl类中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>search<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">SearchResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>orm<span class="token punctuation">.</span></span><span class="token class-name">Search</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>search<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SearchSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">JpaEntityInformation</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">SimpleJpaRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">EntityManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">SimpleJpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span>        <span class="token keyword">implements</span> <span class="token class-name">SearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> domainClass<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>domainClass<span class="token punctuation">,</span> entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager <span class="token operator">=</span> entityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">SearchRepositoryImpl</span><span class="token punctuation">(</span>            <span class="token class-name">JpaEntityInformation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> entityInformation<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>entityInformation<span class="token punctuation">,</span> entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager <span class="token operator">=</span> entityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchBy</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">getSearchResult</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">hits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPageBy</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">getSearchResult</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSearchResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SearchSession</span> searchSession <span class="token operator">=</span> <span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span>                searchSession                        <span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token function">getDomainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fuzzy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过添加一个新的 “offset “参数来重新使用现有的 getSearchResult 方法。然后我们在Hibernate Search fetch()方法中使用这个参数，该方法已经提供了一个签名，接受offset参数用于分页的目的。</p><p>PageDTO是使用搜索查询的结果建立的。</p><h3 id="扩展业务层"><a href="#扩展业务层" class="headerlink" title="扩展业务层"></a>扩展业务层</h3><p>我们可以在现有逻辑的基础上，提取处理字段的部分进行搜索，以避免重复，然后根据我们使用searchPlant()方法或searchPlantPage()方法，在有或没有分页的情况下调用资源库函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Plant</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">PlantRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlantService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PlantRepository</span> plantRepository<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SEARCHABLE_FIELDS</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"scientificName"</span><span class="token punctuation">,</span><span class="token string">"family"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PlantService</span><span class="token punctuation">(</span><span class="token class-name">PlantRepository</span> plantRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>plantRepository <span class="token operator">=</span> plantRepository<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPlants</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldsToSearchBy <span class="token operator">=</span> <span class="token function">getFieldsToSearchBy</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plantRepository<span class="token punctuation">.</span><span class="token function">searchBy</span><span class="token punctuation">(</span>                text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> fieldsToSearchBy<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPlantPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> pageOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldsToSearchBy <span class="token operator">=</span> <span class="token function">getFieldsToSearchBy</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plantRepository<span class="token punctuation">.</span><span class="token function">searchPageBy</span><span class="token punctuation">(</span>                text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> pageOffset<span class="token punctuation">,</span> fieldsToSearchBy<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// We extract the common logic in a separate function</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFieldsToSearchBy</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldsToSearchBy <span class="token operator">=</span> fields<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">SEARCHABLE_FIELDS</span> <span class="token operator">:</span> fields<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> containsInvalidField <span class="token operator">=</span> fieldsToSearchBy<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">anyMatch</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token constant">SEARCHABLE_FIELDS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>containsInvalidField<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fieldsToSearchBy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展网络层"><a href="#扩展网络层" class="headerlink" title="扩展网络层"></a>扩展网络层</h3><p>在这里面没有什么可做的。</p><p>我们只需要一个新的端点，通过使用我们新的PageableSearchRequestDTO来接收分页的搜索请求，并返回一个PageDTO。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PageableSearchRequestDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Plant</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">SearchRequestDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mozen<span class="token punctuation">.</span>springbootpaginatedsearch<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">PlantService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/plant"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlantController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PlantService</span> plantService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PlantController</span><span class="token punctuation">(</span><span class="token class-name">PlantService</span> plantService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>plantService <span class="token operator">=</span> plantService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPlants</span><span class="token punctuation">(</span><span class="token class-name">SearchRequestDTO</span> searchRequestDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Request for plant search received with data : "</span> <span class="token operator">+</span> searchRequestDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plantService<span class="token punctuation">.</span><span class="token function">searchPlants</span><span class="token punctuation">(</span>searchRequestDTO<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> searchRequestDTO<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> searchRequestDTO<span class="token punctuation">.</span><span class="token function">getLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/search/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Plant</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPlantPage</span><span class="token punctuation">(</span><span class="token class-name">PageableSearchRequestDTO</span> pageableSearchRequestDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Request for plant page search received with data : "</span> <span class="token operator">+</span> pageableSearchRequestDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plantService<span class="token punctuation">.</span><span class="token function">searchPlantPage</span><span class="token punctuation">(</span>pageableSearchRequestDTO<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageableSearchRequestDTO<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageableSearchRequestDTO<span class="token punctuation">.</span><span class="token function">getLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageableSearchRequestDTO<span class="token punctuation">.</span><span class="token function">getPageOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们记录收到的请求数据并调用我们在PlantService中定义的新函数。</p><h3 id="把它们放在一起"><a href="#把它们放在一起" class="headerlink" title="把它们放在一起"></a>把它们放在一起</h3><p>是时候测试我们的代码了!</p><p>我们可以用命令行启动我们的应用程序。</p><pre class="line-numbers language-none"><code class="language-none">mvn spring-boot:run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与第一篇文章类似，我们可以使用Postman …</p><p>或者我们可以使用一个简单的cUrl命令。</p><pre class="line-numbers language-none"><code class="language-none">// Request page 1 with 2 items per page on all fields curl -X GET 'http://localhost:9000/plant/search?text=cherry&amp;limit=2&amp;pageOffset=1' // Request page 2 with 3 items per page on scientificName field curl -X GET 'http://localhost:9000/plant/search?text=asian&amp;limit=3&amp;fields=name&amp;fields=scientificName&amp;pageOffset=2'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们已经完成了! 我们的全文搜索实现现在支持分页了。</p><!-- https://medium.com/javarevisited/build-a-spring-boot-rest-api-with-paginated-full-text-search-using-hibernate-search-1143438b6a1d -->]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Flutter中实现订阅的应用内购买</title>
      <link href="/How-to-Implement-Subscriptions-In-App-Purchase-in-Flutter.html"/>
      <url>/How-to-Implement-Subscriptions-In-App-Purchase-in-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/How-to-Implement-Subscriptions-In-App-Purchase-in-Flutter/1.jpeg" class="" title="示意图 width=400"><p>我们以这种或那种方式建立我们的应用程序，期望着从中赚钱。<br>有时我们出售广告并要求用户升级以获得更好的体验，而有时我们有只针对付费用户的优质内容。</p><span id="more"></span><p>为了添加高级用户功能，我们需要在我们的应用程序中添加一个支付网关。配置支付网关是一件很麻烦的事情。<br>所以，集成支付网关的最简单方法是在你的应用程序中添加应用内购买。</p><p>在我们开始之前，我想给你提个醒，这篇文章会有点长。<br>在处理支付相关的事情之前，我们应该了解每一个细节。所以，在你开始深入了解Flutter中的应用内订阅购买之前，先给自己拿杯咖啡，边喝边慢慢往下看。</p><p>在我们进入编码部分之前，让我们多谈谈应用内购买以及它在两个平台上的不同之处。</p><p>两个平台上的应用内购买产品都有些许的区别，让我们看看它们是什么：</p><h4 id="安卓系统中的产品"><a href="#安卓系统中的产品" class="headerlink" title="安卓系统中的产品"></a>安卓系统中的产品</h4><ul><li>消耗性产品：像游戏中的货币一样的产品是可消耗的产品。一旦用户消耗了它们，用户就可以再次购买它。</li><li>非消耗性产品：这些产品只能购买一次，它提供了一个永久性的好处。</li><li>订阅产品：这些产品在有限的时间内给用户带来好处。你可以将Netflix、Medium、Spotify的订阅与这些产品进行比较。订阅会自动更新，直到被取消。</li></ul><h4 id="iOS中的产品"><a href="#iOS中的产品" class="headerlink" title="iOS中的产品"></a>iOS中的产品</h4><ul><li>可消费产品，和安卓一样。</li><li>非消费性产品和安卓一样。</li><li>自动更新的订阅与安卓系统的订阅相同。</li><li>非续订产品：它几乎与自动续订相似，唯一的区别是它不会自动更新。</li></ul><blockquote><p>对于iOS和Android，你不能在订阅到期前重新购买。</p></blockquote><p>根据实际情况，你必须在Google Play Console和App Store Connect上创建对应的产品。<br>这两个平台都提供了诸如宽限期、试用期、升级或降级订阅等功能。</p><p>在这篇文章中，我们将看到如何在Flutter应用程序中添加订阅。为了测试应用内购买，你的应用必须在安卓中有一个alpha版本。</p><h3 id="第1步：创建一个产品"><a href="#第1步：创建一个产品" class="headerlink" title="第1步：创建一个产品"></a>第1步：创建一个产品</h3><h4 id="为安卓系统创建一个产品"><a href="#为安卓系统创建一个产品" class="headerlink" title="为安卓系统创建一个产品"></a>为安卓系统创建一个产品</h4><ol><li>进入Google Play控制台。</li><li>选择你想创建订阅的应用程序。</li><li>在货币化&gt;产品下的菜单内选择订阅。</li><li>在表格中填写所需信息，这里产品ID是最重要的字段，产品ID是用来唯一地识别每个产品。</li></ol><blockquote><p>不要忘记激活新创建的订阅。</p></blockquote><h4 id="为iOS创建一个产品"><a href="#为iOS创建一个产品" class="headerlink" title="为iOS创建一个产品"></a>为iOS创建一个产品</h4><ol><li>进入App Store Connect。</li><li>选择你想创建订阅的应用程序。</li><li>在应用内购买下的侧面菜单中，部分选择管理选项。</li><li>点击加号来添加新产品，并选择你想要的订阅类型。(在本教程中，我们将选择自动续订）。</li><li>输入产品名称和产品ID。这里的产品ID与android相同。</li><li>选择一个订阅组或创建一个新的组。</li><li>填写每一个强制性的细节。如果产品缺少任何细节，那么该产品的状态将是缺少元数据。填写每个细节，直到状态变为 “准备提交”。</li></ol><blockquote><p>为了简单起见，两个平台上的相同产品使用相同的产品ID。<br>用户可以在一个订阅组中激活任何一个产品，用户可以在该组中升级和降级他们的订阅。</p></blockquote><p>耶! 你已经成功地为两个平台创建了一个产品。</p><p>现在让我们进入第二步。</p><h3 id="第2步：设置测试账户"><a href="#第2步：设置测试账户" class="headerlink" title="第2步：设置测试账户"></a>第2步：设置测试账户</h3><p>在发布到稳定版之前，你一定需要测试应用内购买流程。</p><p>你不希望在测试应用内购买流程时，每次购买产品都要付费。为此，你必须为Android和iOS设置一个测试者账户。</p><h4 id="为安卓设置测试账户"><a href="#为安卓设置测试账户" class="headerlink" title="为安卓设置测试账户"></a>为安卓设置测试账户</h4><p>为安卓设置测试账户非常容易。只要遵循以下两个步骤，你就可以进行测试了。</p><ol><li>在应用程序的许可测试者中添加测试者的电子邮件地址。</li><li>在应用程序的测试者列表中添加相同的电子邮件地址。</li></ol><h4 id="为iOS设置测试账户"><a href="#为iOS设置测试账户" class="headerlink" title="为iOS设置测试账户"></a>为iOS设置测试账户</h4><p>为iOS设置沙盒测试账户不像Android那样简单：</p><ol><li>转到应用程序商店连接</li><li>转到用户和访问</li><li>在左侧，你会发现沙盒下的测试者选项。点击它。</li><li>点击加号，添加一个沙盒测试者。</li></ol><p>添加一个沙盒测试者就像创建一个新的苹果ID。你不能使用现有的苹果ID作为沙盒测试者的电子邮件地址。你必须创建一个新的电子邮件地址用于测试。</p><blockquote><p>提示：你可以使用临时电子邮件地址服务来创建一个新的沙盒测试员账户。</p></blockquote><p>在iOS中处理应用内购买时，用这个账户登录。</p><p>在我们真正开始编码之前，我们需要了解应用内购买在安卓和iOS上是如何运作的。让我们来看看。</p><h3 id="第3步：了解购买订阅的工作方式"><a href="#第3步：了解购买订阅的工作方式" class="headerlink" title="第3步：了解购买订阅的工作方式"></a>第3步：了解购买订阅的工作方式</h3><img src="/How-to-Implement-Subscriptions-In-App-Purchase-in-Flutter/2.png" class="" title="示意图 width=400"><p>两个平台的购买流程或多或少有些类似。</p><p>在应用程序开始时，你启动与谷歌/苹果计费服务器的连接。<br>如果计费SDK不支持特定的操作系统版本，连接初始化可能会失败。</p><p>连接初始化后，你的应用程序会订阅计费服务器的PurchaseUpdateStream。计费服务器通过PurchaseUpdateStream通知你当前用户的每次购买状态（通过应用内部或外部从Play Store/App Store获取）。</p><p>在你的应用程序成功订阅PurchaseUpdateStream后，你为用户加载一个所有可用产品的列表。</p><p>用户从列表中选择任何产品并进一步购买该产品。现在会发生以下事件：</p><ol><li>应用程序通知计费服务器，当前用户想要购买这个产品ID的产品。</li><li>计费服务器进行购买并返回响应。</li><li>响应通过PurchaseUpdateStream到达应用程序。</li><li>你的应用程序检查购买的状态并采取相应的行动。</li><li>如果购买成功，你的应用程序将通知你的应用程序的后端，这个用户已经成功购买了一个产品，这是我从计费服务器得到的购买令牌。在最终确认前，应用程序的后端将与计费服务器核实购买情况。验证成功后，你的应用程序的后端将把当前用户标记为高级用户并响应你的应用程序。</li><li>现在你的应用程序必须完成与计费服务器的交易。交易的完成是告诉计费服务器你已经成功地将产品交付给用户的一种方式。</li></ol><blockquote><p>交易的完成对于安卓和iOS是不同的<br>在安卓系统中，你只需要完成成功的交易即可。<br>在iOS中，你必须完成每一笔交易，无论交易的状态如何。</p></blockquote><p>交易完成是非常重要的，因为如果你在安卓系统中没有完成交易，谷歌将退还购买的金额，认为购买失败了。<br>在交易过程中，如果应用程序崩溃或发生网络问题，当用户再次打开应用程序时，你的应用程序将通过PurchaseUpdateStream收到所有未完成交易的通知。<br>因此，你可以继续购买产品的过程。<br>根据从应用程序的后端得到的响应，你将向用户展示一个特定的提示信息。<br>现在让我们进入最后一步，也是最重要的一步，在Flutter中实际整合应用内购买。</p><h3 id="第4步：将应用内购买与Flutter结合起来"><a href="#第4步：将应用内购买与Flutter结合起来" class="headerlink" title="第4步：将应用内购买与Flutter结合起来"></a>第4步：将应用内购买与Flutter结合起来</h3><p>这是所有步骤中最重要的一步。你必须处理购买和付款的相关细节。你必须处理在购买产品时可能发生的每一个例外。</p><p>如果你已经了解了购买订阅的流程，那么这一步对你来说就会更有意义。</p><p>好哒，让我们来编写代码！</p><p>我在我的应用内购买项目中使用了flutter_inapp_purchase插件。原因是我发现这个插件有很好的文档，而且很容易理解。</p><p>为了管理我们的代码，我们将创建一个名为payment_service.dart的新文件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>  <span class="token comment">/// We want singelton object of ``PaymentService`` so create private constructor</span>  <span class="token comment">/// </span>  <span class="token comment">/// Use PaymentService as ``PaymentService.instance``</span>  <span class="token class-name">PaymentService</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PaymentService</span> instance <span class="token operator">=</span> <span class="token class-name">PaymentService</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们创建一些变量来存储数据和流来监听所有购买的最新状态。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>  <span class="token comment">/// We want singelton object of ``PaymentService`` so create private constructor</span>  <span class="token comment">/// </span>  <span class="token comment">/// Use PaymentService as ``PaymentService.instance``</span>  <span class="token class-name">PaymentService</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PaymentService</span> instance <span class="token operator">=</span> <span class="token class-name">PaymentService</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/// To listen the status of connection between app and the billing server </span>  <span class="token class-name">StreamSubscription</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionResult</span><span class="token punctuation">&gt;</span></span> _connectionSubscription<span class="token punctuation">;</span>  <span class="token comment">/// To listen the status of the purchase made inside or outside of the app (App Store / Play Store)</span>  <span class="token comment">/// </span>  <span class="token comment">/// If status is not error then app will be notied by this stream</span>  <span class="token class-name">StreamSubscription</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchasedItem</span><span class="token punctuation">&gt;</span></span> _purchaseUpdatedSubscription<span class="token punctuation">;</span>  <span class="token comment">/// To listen the errors of the purchase</span>  <span class="token class-name">StreamSubscription</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseResult</span><span class="token punctuation">&gt;</span></span> _purchaseErrorSubscription<span class="token punctuation">;</span>  <span class="token comment">/// List of product ids you want to fetch</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> _productIds <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">'monthly_subscription'</span></span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/// All available products will be store in this list</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IAPItem</span><span class="token punctuation">&gt;</span></span> _products<span class="token punctuation">;</span>  <span class="token comment">/// All past purchases will be store in this list</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchasedItem</span><span class="token punctuation">&gt;</span></span> _pastPurchases<span class="token punctuation">;</span>  <span class="token comment">/// view of the app will subscribe to this to get notified </span>  <span class="token comment">/// when premium status of the user changes</span>  <span class="token class-name">ObserverList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Function</span><span class="token punctuation">&gt;</span></span> _proStatusChangedListeners <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ObserverList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Function</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/// view of the app will subscribe to this to get errors of the purchase</span>  <span class="token class-name">ObserverList</span><span class="token operator">&lt;</span><span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> _errorListeners <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ObserverList</span><span class="token operator">&lt;</span><span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/// logged in user's premium status</span>  bool _isProUser <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isProUser <span class="token operator">=</span><span class="token operator">&gt;</span> _isProUser<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果视图（UI）想获得最新的更新，那么它可以通过以下方法订阅，也可以取消订阅。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/// view can subscribe to _proStatusChangedListeners using this method</span>  <span class="token function">addToProStatusChangedListeners</span><span class="token punctuation">(</span><span class="token class-name">Function</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _proStatusChangedListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// view can cancel to _proStatusChangedListeners using this method</span>  <span class="token function">removeFromProStatusChangedListeners</span><span class="token punctuation">(</span><span class="token class-name">Function</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _proStatusChangedListeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// view can subscribe to _errorListeners using this method</span>  <span class="token function">addToErrorListeners</span><span class="token punctuation">(</span><span class="token class-name">Function</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _errorListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// view can cancel to _errorListeners using this method</span>  <span class="token function">removeFromErrorListeners</span><span class="token punctuation">(</span><span class="token class-name">Function</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _errorListeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PaymentService将使用以下方法来通知所有监听器。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/// Call this method to notify all the subsctibers of _proStatusChangedListeners</span>  <span class="token keyword">void</span> <span class="token function">_callProStatusChangedListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _proStatusChangedListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Function</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// Call this method to notify all the subsctibers of _errorListeners</span>  <span class="token keyword">void</span> <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span><span class="token class-name">String</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _errorListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Function</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在PaymentService内部创建initConnection和dispose方法。不要忘记在你的应用程序启动时调用initConnection方法。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/// Call this method at the startup of you app to initialize connection </span>  <span class="token comment">/// with billing server and get all the necessary data</span>  <span class="token keyword">void</span> <span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>initConnection<span class="token punctuation">;</span>    _connectionSubscription <span class="token operator">=</span>        <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>connectionUpdated<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _purchaseUpdatedSubscription <span class="token operator">=</span>        <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>purchaseUpdated<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>_handlePurchaseUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>    _purchaseErrorSubscription <span class="token operator">=</span>        <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>purchaseError<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>_handlePurchaseError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_getPastPurchases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// call when user close the app</span>  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _connectionSubscription<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _purchaseErrorSubscription<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _purchaseUpdatedSubscription<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>endConnection<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用以下方法处理购买错误。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">_handlePurchaseError</span><span class="token punctuation">(</span><span class="token class-name">PurchaseResult</span> purchaseError<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span>purchaseError<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在让我们看看如何处理购买更新。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/// Called when new updates arrives at ``purchaseUpdated`` stream</span>  <span class="token keyword">void</span> <span class="token function">_handlePurchaseUpdate</span><span class="token punctuation">(</span><span class="token class-name">PurchasedItem</span> productItem<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token function">_handlePurchaseUpdateAndroid</span><span class="token punctuation">(</span>productItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token function">_handlePurchaseUpdateIOS</span><span class="token punctuation">(</span>productItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为Android和iOS创建两个独立的方法来处理购买更新。<br>在iOS中，每一种情况都调用finishTransaction。<br>在Android中，只有当状态为购买时才调用finishTransaction。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handlePurchaseUpdateIOS</span><span class="token punctuation">(</span><span class="token class-name">PurchasedItem</span> purchasedItem<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>purchasedItem<span class="token punctuation">.</span>transactionStateIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token class-name">TransactionState</span><span class="token punctuation">.</span><span class="token keyword">deferred</span><span class="token punctuation">:</span>        <span class="token comment">// Edit: This was a bug that was pointed out here : https://github.com/dooboolab/flutter_inapp_purchase/issues/234</span>        <span class="token comment">// FlutterInappPurchase.instance.finishTransaction(purchasedItem);</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token class-name">TransactionState</span><span class="token punctuation">.</span>failed<span class="token punctuation">:</span>        <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Transaction Failed"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">finishTransaction</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token class-name">TransactionState</span><span class="token punctuation">.</span>purchased<span class="token punctuation">:</span>        <span class="token keyword">await</span> <span class="token function">_verifyAndFinishTransaction</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token class-name">TransactionState</span><span class="token punctuation">.</span>purchasing<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token class-name">TransactionState</span><span class="token punctuation">.</span>restored<span class="token punctuation">:</span>        <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">finishTransaction</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/// three purchase state https://developer.android.com/reference/com/android/billingclient/api/Purchase.PurchaseState</span>  <span class="token comment">/// 0 : UNSPECIFIED_STATE</span>  <span class="token comment">/// 1 : PURCHASED</span>  <span class="token comment">/// 2 : PENDING</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_handlePurchaseUpdateAndroid</span><span class="token punctuation">(</span><span class="token class-name">PurchasedItem</span> purchasedItem<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>purchasedItem<span class="token punctuation">.</span>purchaseStateAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>purchasedItem<span class="token punctuation">.</span>isAcknowledgedAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> <span class="token function">_verifyAndFinishTransaction</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Something went wrong"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在让我们来验证一下购买的状态是否是成功的。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/// Call this method when status of purchase is success</span>  <span class="token comment">/// Call API of your back end to verify the reciept</span>  <span class="token comment">/// back end has to call billing server's API to verify the purchase token</span>  <span class="token function">_verifyAndFinishTransaction</span><span class="token punctuation">(</span><span class="token class-name">PurchasedItem</span> purchasedItem<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    bool isValid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// Call API</span>      isValid <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_verifyPurchase</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">NoInternetException</span> <span class="token punctuation">{</span>      <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"No Internet"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Something went wrong"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">finishTransaction</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>      _isProUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment">// save in sharedPreference here</span>      <span class="token function">_callProStatusChangedListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">_callErrorListeners</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Varification failed"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在_verifyPurchase中调用你后端的API来验证购买，并根据响应来处理用户界面。</p><p>为了获得所有可用的产品，在initConnection()中调用_getItems()。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">IAPItem</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> products <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>_products <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">_getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> _products<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IAPItem</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span>      <span class="token keyword">await</span> <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">getSubscriptions</span><span class="token punctuation">(</span>_productIds<span class="token punctuation">)</span><span class="token punctuation">;</span>  _products <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_products<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你已经注意到，在initConnection中我们正在调用_getPastPurchases()方法。<br>在iOS中，这个方法会返回过去所有的购买行为（只限于已完成的）。<br>这个方法在iOS中的另一个用途是当用户更换设备时，你想让用户恢复他/她的购买行为，那么就调用这个方法。在Android中，这个方法只返回活跃的订阅（完成的和未完成的都有）。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">_getPastPurchases</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token comment">// remove this if you want to restore past purchases in iOS</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchasedItem</span><span class="token punctuation">&gt;</span></span> purchasedItems <span class="token operator">=</span>        <span class="token keyword">await</span> <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">getAvailablePurchases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> purchasedItem <span class="token keyword">in</span> purchasedItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bool isValid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">.</span>transactionReceipt<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// if your app missed finishTransaction due to network or crash issue</span>          <span class="token comment">// finish transactins</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'acknowledged'</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          isValid <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_verifyPurchase</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">finishTransaction</span><span class="token punctuation">(</span>purchasedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>            _isProUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">_callProStatusChangedListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          _isProUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token function">_callProStatusChangedListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    _pastPurchases <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _pastPurchases<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>purchasedItems<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要购买该产品，请调用以下方法。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Null</span><span class="token punctuation">&gt;</span></span> <span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token class-name">IAPItem</span> item<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token class-name">FlutterInappPurchase</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">requestSubscription</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在iOS的交易过程中发生任何错误，那么下一次当用户打开应用程序时，相同的购买项目将传到PurchaseUpdateStream。在Android中，你将通过_pastPurchases获得未完成的交易。</p><p>现在你所要做的就是在你的应用程序启动时调用initConnection方法。从PaymentService中获取所有项目到用户界面并展示你的产品。<br>当用户选择一个产品并点击购买按钮时，调用所选产品的buyProduct()方法。使用_proStatusChangedListeners和_errorListeners来处理所有的情况。</p><p>这样就做完了！</p><p>要阅读更多关于应用内购买的信息，请阅读这些官方博客。</p><p>安卓：<a href="https://developer.android.com/google/play/billing/integrate">https://developer.android.com/google/play/billing/integrate</a></p><p>iOS: <a href="https://developer.apple.com/documentation/storekit/in-app_purchase">https://developer.apple.com/documentation/storekit/in-app_purchase</a></p><!-- https://medium.com/bosc-tech-labs-private-limited/how-to-implement-subscriptions-in-app-purchase-in-flutter-7ce8906e608a -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> In-App Purchase </tag>
            
            <tag> Subscriptions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Riverpod + Flutter Hooks：状态管理的最佳组合</title>
      <link href="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management.html"/>
      <url>/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management.html</url>
      
        <content type="html"><![CDATA[<img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/1.png" class="" title="示意图 width=400"><p>我编写flutter的代码已经有些年头了。<br>当我发现riverpod与flutter钩子的简单性相结合时的强大，我爱上了它，爱了，爱了！<br>现在几乎所有的项目中，我都使用它来进行状态管理。<br>我将向你解释为什么，并告诉你为什么你可以用这两个天使轻松地赋予你的项目。</p><span id="more"></span><ol><li>Flutter 钩子的简单性<br>每个Flutter开发者都是从使用StatefulWidget开始的，这是一个基础，我们必须通过它。<br>但是想象一下，你必须创建一个大的项目，重复使用StatefulWidget会变得很痛苦。<br>这就是flutter钩子出现的地方，flutter钩子帮助flutter开发者通过创建钩子来重用代码，然后，我们就可以快速推进项目，这里有一些例子。</li></ol><ul><li>减少代码量</li></ul><img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/2.png" class="" title="示意图 width=400"><p>这个类，我们都是为StatefulWidget创建的，但大多数时候，我们从来没有使用过它，有了flutter钩子，一个widget的所有状态都在一个单一的类中处理，性能和StatefulWidget一样。</p><img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/3.png" class="" title="示意图 width=400"><p>在一个StatefulWidget中，对于许多控制器，如AnimationController或TextEditingController，我们需要处理所有的生命周期，初始化，处置，didUpdateWidget，甚至添加TickerProviderStateMixin到状态类中，在每个StatefulWidget中我们都要使用这些控制器。</p><p>在flutter钩子中，我们只需要创建一个钩子来处理控制器的生命周期，然后我们在每个HookWidget中重复使用同一个钩子。<br>然后，代码就可以从这个样子：</p><img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/4.png" class="" title="示意图 width=400"><p>变成这个样子：</p><img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/5.png" class="" title="示意图 width=400"><p>所以，现在，我们知道用flutter钩子编码是多么容易，以及它对特别大的项目是多么有用。我不会在一个我将创建少于十个部件的应用程序中使用它，但在一个我需要创建更多部件的应用程序中，我不会错过使用flutter挂钩。</p><ol start="2"><li>钩子：Riverpod</li></ol><p>状态管理的简单重要性在于：在所有的应用程序或多个widget之间共享一个或多个变量，每一个变量的变化都必须触发监听该变量的widget的重建。</p><p>如果你试图创建一个全局变量并改变它，这将不会触发小部件的重建。<br>为了解决这个问题，riverpod提供了创建一个全局提供者的可能性，它主要携带一个变量，但提供者可以携带一个stream，一个future，一个ChangeNotifier，…。</p><p>提供者可以很容易地在应用程序的每个部件中被访问，我们只需要把MyApp()部件包装成ProviderScrope。</p><img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/6.png" class="" title="示意图 width=400"><p>在hooks_riverpod的新版本中，有一个叫做HookConsumerWidget的新部件，我们必须在我们的项目部件中扩展它。<br>HookConsumerWidget在构建时带有其他参数，WidgetRef（注意ref是简称），ref让我们有机会读取和观察提供者。</p><ul><li>读取提供者：一次性读取值，在值改变时不会触发重建。</li><li>观察提供者：每一个变化都会触发小部件或小部件的一部分的重建，该小部件正在收听提供者。</li></ul> <img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/7.png" class="" title="示意图 width=400"><p> 在整个应用程序中观看相同的Firebase流</p>  <img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/8.png" class="" title="示意图 width=400"><p>纵观整个应用程序，我们可以跟踪并且修改provider。</p>  <img src="/Riverpod-Flutter-Hooks-The-Best-Duo-for-State-Management/9.png" class="" title="示意图 width=400"><p>以上就是设置flutter_hooks和hooks_riverpod是整个过程。<br>也许有复杂的概念和许多方法来做同样的事情，但在你的应用程序中的大部分状态管理，你可能只使用这些概念。</p><p>关于riverpod的更多细节可以在这里找到<a href="https://riverpod.dev/docs/getting_started">https://riverpod.dev/docs/getting_started</a>。</p><p>我希望我可以说服你使用riverpod和flutter_hooks，它是如此简单，如此容易使用和实现!</p><!-- https://omasuaku.medium.com/riverpod-flutter-hooks-the-best-duo-for-state-management-9429728d632b -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Riverpod </tag>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Mobx在Flutter中管理状态</title>
      <link href="/How-to-manage-state-in-Flutter-with-Mobx.html"/>
      <url>/How-to-manage-state-in-Flutter-with-Mobx.html</url>
      
        <content type="html"><![CDATA[<img src="/How-to-manage-state-in-Flutter-with-Mobx/1.jpeg" class="" title="示意图 width=400"><p>在这个由三部分组成的系列中，我将对Flutter中最广泛使用的状态管理器进行并列比较。<br>现在有很多工具，但往往缺乏对它们的明确比较。<br>这是一个遗憾，因为选择了错误的状态管理器，当你开始构建时就不容易恢复了。</p><span id="more"></span><p>本系列全部文章：</p><p>Part 1 ：<a href="https://pangz.fun/How-To-Manage-State-in-Flutter-With-Provider.html">How-To-Manage-State-in-Flutter-With-Provider.html</a><br>Part 2 ：<a href="https://pangz.fun/Should-You-Use-BLoC-to-Manage-State-in-Flutter.html">Should-You-Use-BLoC-to-Manage-State-in-Flutter.html</a><br>Part 3 ：<a href="https://pangz.fun/How-to-manage-state-in-Flutter-with-Mobx.html">How-to-manage-state-in-Flutter-with-Mobx.html</a></p><p>因此，我为你提供一个简短的指导手册。<br>在第一次使用前请仔细阅读!<br>在这个系列的前两部分–下面的链接–我讨论了状态管理的强大功能：Provider和Flutter Bloc。<br>Mobx在规模上要小得多，但拥有强大的工具，Mobx是其更大的兄弟的一个重要竞争者。<br>Mobx到底是什么？你应该在你的项目中实施它吗？</p><h4 id="什么是Mobx？"><a href="#什么是Mobx？" class="headerlink" title="什么是Mobx？"></a>什么是Mobx？</h4><p>Mobx的基础是由三个核心概念形成的。</p><ul><li>Observables：状态在观察物中被存储和变异。</li><li>Actions：行动导致可观察的状态改变。</li><li>Reactions：当其相关的可观察对象的状态发生变化时，反应会被触发。这个触发器是你的应用程序中想要的副作用的开始，例如一个UI变化。</li></ul><p>整个流程被敏锐地显示在下面的三角形中，它是如此简单，你不会迷失在其中！</p><img src="/How-to-manage-state-in-Flutter-with-Mobx/2.png" class="" title="示意图 width=400"><h4 id="臭名昭著的计数器"><a href="#臭名昭著的计数器" class="headerlink" title="臭名昭著的计数器"></a>臭名昭著的计数器</h4><p>那么实际情况是怎样的呢？Mobx中臭名昭著的递增式计数器看起来如下:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mobx/mobx.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'counter.g.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token operator">=</span> <span class="token class-name">CounterBase</span> <span class="token keyword">with</span> _$<span class="token class-name">Counter</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CounterBase</span> <span class="token keyword">with</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>  <span class="token metadata function">@observable</span>  int value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token metadata function">@action</span>  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的要点中，观察者和行动可以通过它们的装饰器清楚地识别出来–前缀为”@”。这些装饰器不仅仅是为了展示。它们作为指令被一个叫做 “Mobx_codegen “的包读取，随后在相关的文件 counter.g.dart 中为你生成完整的功能代码。因此，装饰器允许你的代码保持简单和可读，而繁重的工作在后台为你完成。</p><p>对状态变化的反应可以通过三种不同的方式进行，在下面的例子中显示:</p><ul><li>自动运行：这个反应里面的函数在初始化时自动运行。之后，在它所追踪的可观察对象的每一个状态变化之后，它都会运行。因此，在我们的例子中，计数器的初始值0将被打印出来，同时还将打印任何后续的增量。</li><li>常规反应：这种类型的反应需要两个函数作为参数。第一个函数返回一个从要跟踪的观察物中得到的值。第二个函数是在第一个值的返回值发生变化时需要运行的效果。所以在这个例子中，只要counter.value发生变化，就会打印出counterValue。</li><li>有条件的反应：这个反应，就像它的名字所暗示的那样，只在满足条件的情况下运行。条件在函数的第一个参数中提供，反应在第二个参数中。此外，该反应只运行一次，之后就会自动处理掉。因此，当我们的计数器值达到 “6 “时，将打印出一个一次性的信息。</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// init the counter class</span><span class="token keyword">final</span> _counter <span class="token operator">=</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Auto run</span><span class="token keyword">final</span> dispose <span class="token operator">=</span> <span class="token function">autorun</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>_counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Regular reaction</span><span class="token keyword">final</span> dispose <span class="token operator">=</span> <span class="token function">reaction</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> counter<span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token punctuation">(</span>counterValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>counterValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Conditional reaction</span><span class="token keyword">final</span> dispose <span class="token operator">=</span> <span class="token function">when</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> counter<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Bigger than 5!'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述三种反应的基础上，Mobx还提供了一个观察者小组件。这个小组件跟踪一个观察者，并在其值发生变化时重建用户界面。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Observer</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">_counter<span class="token punctuation">.</span>value</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了观察者小组件作为蛋糕上的糖衣，Mobx烤出了一个优秀的反应糕点。对状态变化的反应是通过简单的技术完成的，而不会牺牲灵活性。</p><h4 id="你应该使用Mobx吗？"><a href="#你应该使用Mobx吗？" class="headerlink" title="你应该使用Mobx吗？"></a>你应该使用Mobx吗？</h4><p>不再多说，您是否应该在您的flutter项目中使用Mobx？</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>Mobx在简单性方面表现出色。该软件包易于学习，易于掌握。通过装饰器将模板最小化，对状态的反应在简洁的函数和部件中完成。</li><li>该软件包被广泛使用。起源于Javascript的状态管理器，后来加入了Flutter，文档和最佳实践都已经到位了。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>Mobx缺乏基于事件的状态管理。这意味着你只知道状态发生了变化，但不知道引起变化的确切事件。在更复杂的应用程序中，这种可追溯性的缺乏可能会造成问题，因为它使调试和管理状态变化更加模糊。</li><li>Mobx生成器在增加简单性方面是很好的，但同时也增加了另一个抽象的层次。它们使人们更难真正看到和理解引擎盖下发生了什么。</li></ul><p>总之，我认为Mobx是所有可以不使用基于事件的状态管理的应用程序的明智选择。<br>它的独特卖点是简单，Mobx在你的开发团队中的适应性将是非常顺利的。<br>出于这个原因，在我看来，Mobx胜过其直接竞争对手。<br>不过，对于基于事件的状态管理，Flutter Bloc仍然是最合适的方式。</p><!-- https://medium.com/better-programming/how-to-manage-state-in-flutter-with-mobx-cf5be8e8e50e -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Mobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Provider管理Flutter中的状态</title>
      <link href="/How-To-Manage-State-in-Flutter-With-Provider.html"/>
      <url>/How-To-Manage-State-in-Flutter-With-Provider.html</url>
      
        <content type="html"><![CDATA[<img src="/How-To-Manage-State-in-Flutter-With-Provider/1.jpeg" class="" title="示意图 width=400"><p>可以认为Flutter是一个正在茁壮成长的孩子。</p><span id="more"></span><p>本系列全部文章：</p><p>Part 1 ：<a href="https://pangz.fun/How-To-Manage-State-in-Flutter-With-Provider.html">How-To-Manage-State-in-Flutter-With-Provider.html</a><br>Part 2 ：<a href="https://pangz.fun/Should-You-Use-BLoC-to-Manage-State-in-Flutter.html">Should-You-Use-BLoC-to-Manage-State-in-Flutter.html</a><br>Part 3 ：<a href="https://pangz.fun/How-to-manage-state-in-Flutter-with-Mobx.html">How-to-manage-state-in-Flutter-with-Mobx.html</a></p><p>谷歌的UI工具包使你能够从一个代码库中构建原生和高性能的移动和网络应用。<br>最重要的是，大量可用的小工具使你获得了快速和愉快的开发体验。</p><p>在摆弄新玩具的时候，一般来说，阅读说明书是个好主意。由于Flutter是在几年前才开始流行起来的，它的说明书还在不断完善中。</p><p>清晰而简明的指南会让我的Flutter项目变得更好。尤其是为状态管理选择合适的工具，这绝不是一件容易的事。选项很多，但往往缺乏对它们的清晰比较。</p><p>在我看来，状态管理器之间的比较是非常需要的。一旦你的应用程序的状态与一个状态管理器纠缠在一起，切换到另一个工具并不是一件容易的事。因此，为了帮助你第一次就能做好，我将在一个由三部分组成的系列中比较Flutter最受欢迎的状态管理器。</p><p>第一部分：你是否需要一个状态管理器和用Provider管理状态</p><h4 id="你需要一个状态管理人吗？"><a href="#你需要一个状态管理人吗？" class="headerlink" title="你需要一个状态管理人吗？"></a>你需要一个状态管理人吗？</h4><p>在你开始比较无数的状态管理器选项之前，你应该问自己。</p><blockquote><p>“我真的需要一个状态管理器吗？”</p></blockquote><p>如果你的应用程序在设计上是非常扁平的，而且状态很少在widget树的上下一层移动，那么通过属性和回调来传递状态可能会给你节省很多模板。</p><p>在下面的例子中，子程序从父程序中传递了一个回调，以跟踪TextButton被点击的次数。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ParentState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Parent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  int clicked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">updateClickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      clicked <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token class-name">Child</span><span class="token punctuation">(</span>onClickedCallBack<span class="token punctuation">:</span> updateClickCount<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'I was clicked </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">clicked</span></span><span class="token string"> times!'</span></span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickedCallBack <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> onClickedCallBack<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>onPressed<span class="token punctuation">:</span> onClickedCallBack<span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Click me!'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，如果你发现自己通过部件树的多个层次传递回调，这种方式管理状态很快就会变得麻烦和混乱。在这种情况下，你可以肯定你需要一种更强大的方式来管理状态。<br>但是，什么是适合这项工作的工具呢？</p><h4 id="用Provider管理状态"><a href="#用Provider管理状态" class="headerlink" title="用Provider管理状态"></a>用Provider管理状态</h4><p>在Flutter应用程序中，有很多选择来管理你的状态。Provider是最受欢迎的状态管理器之一。这个社区创建的工具依赖于三个核心概念:</p><ul><li>ChangeNotifier：您的状态的存储，状态从这里被更新，消耗状态的部件被通知。</li><li>ChangeNotifierProvider：这个部件使ChangeNotifier可以被树中的底层部件访问。</li><li>Consumer：一个听从状态变化并相应地更新用户界面的部件。</li></ul><p>下面是一个使用Provider模式更新点击数的例子:</p><ul><li>状态是由DataProvider类存储和处理的，它存储了_count。</li><li>通过在点击按钮时调用IncrementCount，_count从子部件中被更新。</li><li>NotifyListeners()确保通过消费者访问状态的父小组件得到相应的更新。</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">DataProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>  int _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  int <span class="token keyword">get</span> count <span class="token operator">=</span><span class="token operator">&gt;</span> _count<span class="token punctuation">;</span>   <span class="token class-name">DataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    _count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">(</span>      create<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">DataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataProvider</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> dataProvider<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'I was clicked </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">dataProvider<span class="token punctuation">.</span>_count</span><span class="token punctuation">}</span></span><span class="token string">. times!'</span></span><span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DataProvider</span> _data <span class="token operator">=</span> <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataProvider</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _data<span class="token punctuation">.</span><span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Click me!'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，你认为Provider是状态管理的最佳工具吗？</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>维护良好，经得起考验的软件包。</li><li>单向状态管理的完整工具箱。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>总共有九个不同的提供者，对提供者的正确理解并不容易获得。</li><li>不必要的重建也不容易避免。默认情况下，Consumer会更新其所有的子部件，即使状态中不相关的部分已经被更新。</li><li>Provider依赖于Flutter SDK，这使得你的业务逻辑和框架不可分割。这在架构设计中被认为是一种不好的做法。</li><li>状态更新不是基于事件的。所以在上面的例子中，我们知道_count已经被更新了，但我们只能猜测变化的来源。这使得跟踪和理解你的应用程序中的状态变化变得复杂。</li></ul><p>综上所述，我认为Provider对于有经验的Flutter开发者来说是一个不错的选择，他们正在构建一个有简单状态需求的应用程序。Provider很容易学习，但很难掌握。<br>此外，它缺乏更复杂的应用程序所需的基于事件的状态跟踪。</p><!-- https://betterprogramming.pub/how-to-manage-state-in-flutter-with-provider-661ff322dd22 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Provider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你应该使用BLoC来管理Flutter中的状态吗？</title>
      <link href="/Should-You-Use-BLoC-to-Manage-State-in-Flutter.html"/>
      <url>/Should-You-Use-BLoC-to-Manage-State-in-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/Should-You-Use-BLoC-to-Manage-State-in-Flutter/1.jpeg" class="" title="示意图 width=400"><p>我将对Flutter中最广泛使用的状态管理器进行并列比较。</p><p>现在有很多工具，但往往缺乏对它们的明确比较。这是一个遗憾，因为选择了错误的状态管理器，当你开始构建时就不容易挽回了。</p><span id="more"></span><p>本系列全部文章：</p><p>Part 1 ：<a href="https://pangz.fun/How-To-Manage-State-in-Flutter-With-Provider.html">How-To-Manage-State-in-Flutter-With-Provider.html</a><br>Part 2 ：<a href="https://pangz.fun/Should-You-Use-BLoC-to-Manage-State-in-Flutter.html">Should-You-Use-BLoC-to-Manage-State-in-Flutter.html</a><br>Part 3 ：<a href="https://pangz.fun/How-to-manage-state-in-Flutter-with-Mobx.html">How-to-manage-state-in-Flutter-with-Mobx.html</a></p><p>因此，我为你提供一个简短的指导手册。在第一次使用前请仔细阅读!<br>第二个最流行的状态管理器，称为Flutter bloc，是本博客的主题。第一部分的链接见下文。</p><p><a href="">如何用Provider管理Flutter中的状态</a></p><h4 id="什么是Flutter-bloc？"><a href="#什么是Flutter-bloc？" class="headerlink" title="什么是Flutter bloc？"></a>什么是Flutter bloc？</h4><p>Flutter bloc 包的名字来自于 BLoC 设计模式。BLoC 是 “业务逻辑组件 “的缩写，与大多数状态管理器一样，旨在将业务逻辑与视图解耦。</p><p>Flutter bloc包为您提供了在您的应用程序中实现BLoC模式的所有工具。该包的核心是围绕 “Cubits “和 “Blocs “这两个主要概念，我将简要地解释。</p><h4 id="用Cubit管理状态"><a href="#用Cubit管理状态" class="headerlink" title="用Cubit管理状态"></a>用Cubit管理状态</h4><img src="/Should-You-Use-BLoC-to-Manage-State-in-Flutter/2.png" class="" title="示意图 width=400"><p>用Cubit管理一个状态，对于以前使用过状态管理器的人来说，可能会觉得很熟悉。</p><ul><li>状态被存储和处理在一个Cubit类中。此外，Cubit暴露了一个状态变化的流。</li><li>BlocProvider使Cubit能够被视图访问。</li><li>BlocBuilder监听变化的状态并相应地渲染用户界面。</li></ul><p>因此，管理一个递增的计数器的状态，将看起来如下:</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CounterCubit</span> <span class="token keyword">extends</span> <span class="token class-name">Cubit</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">CounterCubit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">emit</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">CounterApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CounterApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      home<span class="token punctuation">:</span> <span class="token class-name">BlocProvider</span><span class="token punctuation">(</span>        create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">CounterCubit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">CounterPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CounterPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Counter'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">BlocBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CounterCubit</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">count</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      floatingActionButton<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>        crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span>        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>          <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span>            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CounterCubit</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种模式与我在本系列第一部分描述的用Provider进行的状态管理非常相似。<br>因此，Flutter Bloc的真正价值不在于Cubit，而在于实际Bloc本身。</p><h4 id="用Bloc管理状态"><a href="#用Bloc管理状态" class="headerlink" title="用Bloc管理状态"></a>用Bloc管理状态</h4><img src="/Should-You-Use-BLoC-to-Manage-State-in-Flutter/3.png" class="" title="示意图 width=400"><p>Bloc的独特卖点是事件。一个Cubit只是发送状态更新，而不提供关于变化的根本原因的额外信息。</p><p>只要你的状态是简单的，比如在计数器的例子中，这不会是一个问题。但假设你的计数器可以以10种不同的方式递增。你将如何调试意外的状态更新或根据变化的原因区分你的应用程序的行为？一言以蔽之，缺乏可追溯性带来了一个真正的问题。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// A Bloc transition</span><span class="token class-name">Transition</span> <span class="token punctuation">{</span>  currentState<span class="token punctuation">:</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  event<span class="token punctuation">:</span> <span class="token class-name">Increment</span><span class="token punctuation">,</span>  nextState<span class="token punctuation">:</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">Transition</span> <span class="token punctuation">{</span>  currentState<span class="token punctuation">:</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  nextState<span class="token punctuation">:</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bloc通过引入事件解决了这个问题。事件提供了关于状态改变的原因的信息。<br>事件让你完全控制你的应用程序的状态流。对于那些不只做计数器增量的应用程序来说，这是很理想的。</p><p>但每个伟大的礼物都是有代价的。Blocs比Cubits更啰嗦。额外的模板–在下面的例子中显示–需要用于状态和事件。但是，在我看来，这是一个值得付出的代价。<br>从长远来看，可追溯性是你的应用程序可管理性的先决条件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'Counter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token comment">// Counter state</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CounterState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> int duration<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token class-name">CounterState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>duration<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CounterInitial</span> <span class="token keyword">extends</span> <span class="token class-name">CounterState</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CounterInitial</span><span class="token punctuation">(</span>int count<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">'CounterInitial { count: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">count</span></span><span class="token string"> }'</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CounterIncremented</span> <span class="token keyword">extends</span> <span class="token class-name">CounterState</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CounterIncremented</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Counter events</span><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'Counter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CounterEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CounterEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CounterIncremented</span> <span class="token keyword">extends</span> <span class="token class-name">CounterEvent</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CounterIncremented</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> int increment<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>谁应该使用Flutter BLoC<br>那么，现在您已经掌握了Flutter bloc软件包，您是否应该真正使用它？</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>作为第二大最受欢迎的状态管理器，该包得到了很好的维护，并且已经证明了它的价值。</li><li>提供非事件基础的Cubits和基于事件的Bloc，该包可以适应您的应用需求。</li><li>有很多方法可以防止用户界面的冗余更新。例如，Bloc的状态就使用了equatable。Equatable将旧的状态与新的状态进行比较，并在状态未变时防止更新。此外，BlocListener有一个listenWhen属性，它就像一个看门人，只允许访问理想的更新。综上所述，该包提供了关注你的应用程序性能的工具。</li><li>该文档非常出色，阐述的内容远远超过了核心的内部结构。有大量的例子、方法的优点和缺点、最佳和坏的做法、以及关于包的核心概念的背景信息。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>Flutter Bloc包的巨大规模使其难以学习。当面对一个庞大的高质量工具箱时，可能很难选择合适的工具来完成工作。对于不熟悉流和基于事件的状态管理的开发者来说，学习曲线尤其陡峭。</li><li>在所有的状态管理中，该包有一个可疑的荣誉，即需要最多的模板。特别是基于事件的组块是相当冗长的。要设置前面提到的基本的计数器组，你需要三个独立的文件：一个用于计数器的状态，一个用于计数器的事件，一个用于实际的计数器组。虽然有很好的扩展来自动创建模板，但你的代码库仍然会像一个吃饱了的小孩一样成长。</li></ul><p>最后，在我看来，Flutter bloc是大多数Flutter应用程序的出路。它克服了Provider缺乏基于事件的状态管理的问题。此外，它的工具集很广泛，使它可以用于更简单和更复杂的应用。<br>这些优势使其陡峭的学习曲线值得一试。</p><!-- https://betterprogramming.pub/should-you-use-bloc-to-manage-state-in-flutter-4f504ebc8711 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> BLoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现在就开始提升你的Flutter生产力吧!</title>
      <link href="/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away.html"/>
      <url>/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away.html</url>
      
        <content type="html"><![CDATA[<img src="/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away/1.png" class="" title="示意图 width=400"><p>今天，我将向您介绍3个技巧，这些技巧将使您的Flutter开发更上一层楼<br>如果您喜欢这个内容，请给点个赞呗！<br>让我们马上开始吧!</p><span id="more"></span><h3 id="修复所有错误"><a href="#修复所有错误" class="headerlink" title="修复所有错误"></a>修复所有错误</h3><p>在VSCode中看到这个消息是不是非常令人恼怒呢？</p><p>通常是不需要的导入，缺少const关键词等等。但是，难道没有一些方法可以在几秒钟内修复整个项目中的这些错误吗？是的，有的，而且比你想象的要容易得多。只要在终端导航到你的项目，输入</p><pre class="line-numbers language-none"><code class="language-none">dart fix --apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一切就都解决了；)</p><h3 id="更好的错误屏幕"><a href="#更好的错误屏幕" class="headerlink" title="更好的错误屏幕"></a>更好的错误屏幕</h3><p>每个人，真的是每个人都讨厌这个错误屏幕。</p><img src="/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away/2.png" class="" title="示意图 width=400"><p>但是，如果我告诉你，你可以用几行代码让这个屏幕变得更好呢？<br>来，来，来，我将向你展示如何做到这一点。</p><ol><li>在你的主函数中，添加以下内容。<img src="/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away/3.png" class="" title="示意图 width=400"></li></ol><p>现在你可以在material widget中创建你自己的屏幕。这可以看起来像这样：</p><img src="/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away/4.png" class="" title="示意图 width=400"><p>但是，等等，我现在是怎么把错误信息显示在屏幕上的呢？<br>嗯，很简单，通过调用 </p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">details<span class="token punctuation">.</span>exception<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看你所有的依赖性"><a href="#查看你所有的依赖性" class="headerlink" title="查看你所有的依赖性"></a>查看你所有的依赖性</h3><p>您想知道您的 Flutter 项目中的所有依赖项吗？为此，有一个命令：</p><pre class="line-numbers language-none"><code class="language-none">flutter pub deps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在您会得到一个看起来像这样的树</p><img src="/3-Tips-to-hack-your-Flutter-productivity-that-you-can-use-right-away/5.png" class="" title="示意图 width=400"><p>谢谢你的阅读，别忘了给我点赞哟!</p><!-- https://tomicriedel.medium.com/3-tips-to-hack-your-flutter-productivity-that-you-can-use-right-away-d809812d7079 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> hack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter控件 ： permission_handler v9.2.0</title>
      <link href="/permission-handler-9-2-0.html"/>
      <url>/permission-handler-9-2-0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>用于 Flutter 的权限插件。这个插件提供了一个跨平台（iOS，Android）的API来请求和检查权限。</p></blockquote><p>在大多数操作系统中，权限并不是在安装时授予应用程序的。相反，开发者必须在应用运行时向用户请求权限。</p><p>这个插件提供了一个跨平台（iOS、Android）的API来请求权限并检查其状态。你也可以打开设备的应用设置，这样用户就可以授予一个权限。<br>在Android上，你可以显示请求权限的理由。</p><span id="more"></span><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>虽然权限是在运行时被请求的，但你仍然需要告诉操作系统你的应用程序可能会使用哪些权限。这需要在Android和iOS的特定文件中添加权限配置。</p><p>安卓<br> <strong>升级1.12之前的安卓项目</strong></p><p>自4.4.0版本以来，该插件使用Flutter 1.12 Android插件API实现。不幸的是，这意味着应用程序开发人员也需要迁移他们的应用程序，以支持新的Android基础设施。你可以按照升级1.12版之前的安卓项目迁移指南来做。如果不这样做，可能会导致意外的行为。最常见的错误是permission_handler在调用权限的.request()方法后没有返回。</p><h4 id="AndroidX"><a href="#AndroidX" class="headerlink" title="AndroidX"></a>AndroidX</h4><p>从3.1.0版本开始，permission_handler插件切换到AndroidX版本的Android支持库。这意味着你需要确保你的安卓项目也被升级到支持AndroidX。</p><ol><li>在你的 “gradle.properties “文件中添加以下内容。</li></ol><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">android<span class="token punctuation">.</span>useAndroidX<span class="token operator">=</span><span class="token boolean">true</span>android<span class="token punctuation">.</span>enableJetifier<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>确保你在 “android/app/build.gradle “文件中把compileSdkVersion设置为31</li></ol><pre class="line-numbers language-none"><code class="language-none">android {  compileSdkVersion 31  ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>确保你将所有的android.依赖关系替换为AndroidX的对应关系</li></ol><p>在你的AndroidManifest.xml文件中添加权限。有一个debug, main and profile，它们的选择取决于你如何启动你的应用程序。一般来说，只在主版本中添加权限即可。下面是一个AndroidManifest.xml的例子，其中有一个所有可能的权限的完整列表。</p><p>iOS<br>在你的Info.plist文件中添加权限。下面是一个Info.plist的例子，其中有一个所有可能的权限的完整列表。</p><blockquote><p>这是因为permission_handler插件涉及到所有不同的SDK，而且静态代码分析器（Apple在提交应用程序时运行）会检测到这一点，如果它在Info.plist中找不到匹配的权限选项，就会发生断言。</p></blockquote><p>permission_handler插件使用宏来控制一个权限是否被启用。</p><p>你必须列出你想在你的应用程序中使用的权限。</p><ol><li>在你的Podfile文件中加入以下内容：</li></ol><pre class="line-numbers language-pod" data-language="pod"><code class="language-pod">post_install do |installer|  installer.pods_project.targets.each do |target|    target.build_configurations.each do |config|      ... # Here are some configurations automatically generated by flutter      # You can enable the permissions needed here. For example to enable camera      # permission, just remove the `#` character in front so it looks like this:      #      # ## dart: PermissionGroup.camera      # 'PERMISSION_CAMERA=1'      #      #  Preprocessor definitions can be found in: https://github.com/Baseflow/flutter-permission-handler/blob/master/permission_handler/ios/Classes/PermissionHandlerEnums.h      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [        '$(inherited)',        ## dart: PermissionGroup.calendar        # 'PERMISSION_EVENTS=1',        ## dart: PermissionGroup.reminders        # 'PERMISSION_REMINDERS=1',        ## dart: PermissionGroup.contacts        # 'PERMISSION_CONTACTS=1',        ## dart: PermissionGroup.camera        # 'PERMISSION_CAMERA=1',        ## dart: PermissionGroup.microphone        # 'PERMISSION_MICROPHONE=1',        ## dart: PermissionGroup.speech        # 'PERMISSION_SPEECH_RECOGNIZER=1',        ## dart: PermissionGroup.photos        # 'PERMISSION_PHOTOS=1',        ## dart: [PermissionGroup.location, PermissionGroup.locationAlways, PermissionGroup.locationWhenInUse]        # 'PERMISSION_LOCATION=1',        ## dart: PermissionGroup.notification        # 'PERMISSION_NOTIFICATIONS=1',        ## dart: PermissionGroup.mediaLibrary        # 'PERMISSION_MEDIA_LIBRARY=1',        ## dart: PermissionGroup.sensors        # 'PERMISSION_SENSORS=1',           ## dart: PermissionGroup.bluetooth        # 'PERMISSION_BLUETOOTH=1',        ## dart: PermissionGroup.appTrackingTransparency        # 'PERMISSION_APP_TRACKING_TRANSPARENCY=1',        ## dart: PermissionGroup.criticalAlerts        # 'PERMISSION_CRITICAL_ALERTS=1'      ]    end  endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>移除你想使用的权限前面的#字符。例如，如果你需要访问日历，确保代码看起来像这样。</li></ol><pre class="line-numbers language-pod" data-language="pod"><code class="language-pod">## dart: PermissionGroup.calendar        'PERMISSION_EVENTS=1',<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>删除Info.plist中相应的权限描述，例如，当你不需要相机权限时，只需删除’NSCameraUsageDescription’。</p></li><li><p>Clean &amp; Rebuild</p></li></ol><h3 id="咋用捏"><a href="#咋用捏" class="headerlink" title="咋用捏"></a>咋用捏</h3><p>有许多权限。你可以得到一个权限的状态：它分别是授予的、拒绝的、限制的或永久拒绝。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Permission</span><span class="token punctuation">.</span>camera<span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span>isDenied<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// We didn't ask for permission yet or the permission has been denied before but not permanently.</span><span class="token punctuation">}</span><span class="token comment">// You can can also directly ask the permission about its status.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token class-name">Permission</span><span class="token punctuation">.</span>location<span class="token punctuation">.</span>isRestricted<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// The OS restricts access, for example because of parental controls.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行权限调用 request() 来请求它。如果它之前已经被授予，则不会发生任何事情。<br>request() 返回该权限的新状态。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token class-name">Permission</span><span class="token punctuation">.</span>contacts<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isGranted<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Either the permission was already granted before or the user just granted it.</span><span class="token punctuation">}</span><span class="token comment">// You can request multiple permissions at once.</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Permission</span><span class="token punctuation">,</span> <span class="token class-name">PermissionStatus</span><span class="token punctuation">&gt;</span></span> statuses <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">[</span>  <span class="token class-name">Permission</span><span class="token punctuation">.</span>location<span class="token punctuation">,</span>  <span class="token class-name">Permission</span><span class="token punctuation">.</span>storage<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>statuses<span class="token punctuation">[</span><span class="token class-name">Permission</span><span class="token punctuation">.</span>location<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对有些权限，例如位置或加速度传感器的权限，有一个相关的服务，可以启用或禁用。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token class-name">Permission</span><span class="token punctuation">.</span>locationWhenInUse<span class="token punctuation">.</span>serviceStatus<span class="token punctuation">.</span>isEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Use location.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你也可以打开应用程序的设置。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token class-name">Permission</span><span class="token punctuation">.</span>speech<span class="token punctuation">.</span>isPermanentlyDenied<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// The user opted to never again see the permission request dialog for this</span>  <span class="token comment">// app. The only way to change the permission's status now is to let the</span>  <span class="token comment">// user manually enable it in the system settings.</span>  <span class="token function">openAppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在安卓系统上，你可以显示使用权限的理由。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">bool isShown <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Permission</span><span class="token punctuation">.</span>contacts<span class="token punctuation">.</span>shouldShowRequestRationale<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有些权限不会显示要求用户允许或拒绝所请求的权限的对话框。<br>这是因为应用程序的操作系统设置正在为相应的权限进行检索。<br>设置的状态将决定该权限是被授予还是被拒绝。</p><p>以下权限将不显示对话框:</p><ul><li>通知</li><li>蓝牙</li></ul><p>以下权限将不显示对话框，但会打开相应的设置意图让用户改变权限状态:</p><ul><li>manageExternalStorage</li><li>systemAlertWindow</li><li>requestInstallPackages</li><li>accessNotificationPolicy</li></ul><p>locationAlways权限不能直接申请，用户必须先申请locationWhenInUse权限。通过点击 “Allow While Using App “接受这个权限，用户就有可能申请locationAlways权限。<br>然后会弹出另一个权限窗口，要求你保留 “仅在使用时 “或 “更改为始终允许”。</p><p>以上所有源代码，您可以移步：<a href="https://github.com/reasonpun/my_100_goals/tree/main/goals_04">https://github.com/reasonpun/my_100_goals/tree/main/goals_04</a></p><!-- https://pub.flutter-io.cn/packages/permission_handler -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Permissions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中的请求权限服务的实现</title>
      <link href="/Request-Permissions-in-Flutter-as-a-Consumable-Service.html"/>
      <url>/Request-Permissions-in-Flutter-as-a-Consumable-Service.html</url>
      
        <content type="html"><![CDATA[<img src="/Request-Permissions-in-Flutter-as-a-Consumable-Service/1.jpeg" class="" title="示意图 width=400"><p>当你想在用户使用过程中获取很多很多权限的时候，请求权限通常会成为一个混乱的任务。<br>为了开始清理所有的权限代码，我们将把它包装在一个带有专门权限请求功能的服务中。</p><span id="more"></span><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>在本教程中，我们将使用permissions_handler包来请求我们的权限，所以让我们把它添加到pubspec中。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Permission checking</span><span class="token key atrule">permission_handler</span><span class="token punctuation">:</span> ^9.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们将创建函数来请求两种类型的权限：我们将获取位置以及联系人权限。<br>首先，我们需要告诉操作系统，我们的应用程序将使用这些权限。</p><h4 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h4><p>在AndroidManifest中，为这两个功能添加uses-permission标签。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.READ_CONTACTS<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.WRITE_CONTACTS<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.ACCESS_FINE_LOCATION<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>在info.plist文件中添加密钥和你的信息</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">&gt;</span></span>NSContactsUsageDescription<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>This app requires contacts access to function.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">&gt;</span></span>NSLocationWhenInUseUsageDescription<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>This app requires access to your location when in use to show relevan information.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">&gt;</span></span>NSLocationAlwaysUsageDescription<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>This app requires always on access to to your location to notifiy you when are near a store.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h4><p>PermissionsService上将有一个专门的函数来处理你所需要的权限。<br>这样，当用户想使用需要的功能时，就可以调用它。<br>通过提供回调，它也将很容易为每个函数（组）编写自定义逻辑。<br>创建一个名为permissions_service.dart的新文件，在其中，我们要做一个类，它有一个来自包的PermissionHandler的实例。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:permission_handler/permission_handler.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PermissionsService</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">PermissionHandler</span> _permissionHandler <span class="token operator">=</span> <span class="token class-name">PermissionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们可以添加一个通用函数，接收一个PermissionGroup来请求我们想要的权限。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">_requestPermission</span><span class="token punctuation">(</span><span class="token class-name">PermissionGroup</span> permission<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> _permissionHandler<span class="token punctuation">.</span><span class="token function">requestPermissions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>permission<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>permission<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">PermissionStatus</span><span class="token punctuation">.</span>granted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而使用这个函数，我们可以为每个权限创建特定的函数。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">/// Requests the users permission to read their contacts.</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">requestContactsPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_requestPermission</span><span class="token punctuation">(</span><span class="token class-name">PermissionGroup</span><span class="token punctuation">.</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// Requests the users permission to read their location when the app is in use</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">requestLocationPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_requestPermission</span><span class="token punctuation">(</span><span class="token class-name">PermissionGroup</span><span class="token punctuation">.</span>locationWhenInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义许可逻辑"><a href="#自定义许可逻辑" class="headerlink" title="自定义许可逻辑"></a>自定义许可逻辑</h4><p>很多时候，当涉及到权限的时候，我们想做一些自定义的事情，或者想再次提示用户允许我们的权限。因为我们有专门的功能，我们现在可以用自定义的方式处理每个权限请求。<br>比方说，应用程序需要访问联系人才能工作，类似于WhatsApp。我们可以提供一个函数，当权限被拒绝时就会被调用，这样我们就可以在外面显示一个对话框。</p><p>我们将传入一个onPermissionDenied函数，当用户拒绝许可时，该函数将被调用。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/// Requests the users permission to read their contacts.</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">requestContactsPermission</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Function</span> onPermissionDenied<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> granted <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_requestPermission</span><span class="token punctuation">(</span><span class="token class-name">PermissionGroup</span><span class="token punctuation">.</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>granted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onPermissionDenied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> granted<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在在外面，你可以传入你的函数，当它被拒绝时显示你的对话框，然后如果用户选择再次请求它 :)</p><h4 id="拥有权限"><a href="#拥有权限" class="headerlink" title="拥有权限"></a>拥有权限</h4><p>另一件事是检查应用程序是否已经拥有权限。<br>我们将创建同样的设置，一个通用的函数接收一个PermissionGroup，然后为特定的权限使用专用函数。<br>你不必这样做，我只是觉得这样做更容易维护，而且它使外部代码对PermissionHandler包的依赖性降低。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">hasContactsPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token class-name">PermissionGroup</span><span class="token punctuation">.</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token class-name">PermissionGroup</span> permission<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> permissionStatus <span class="token operator">=</span>        <span class="token keyword">await</span> _permissionHandler<span class="token punctuation">.</span><span class="token function">checkPermissionStatus</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> permissionStatus <span class="token operator">==</span> <span class="token class-name">PermissionStatus</span><span class="token punctuation">.</span>granted<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>在代码中，我们现在可以像这样使用服务来请求权限。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Flutter Demo'</span></span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>        body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token class-name">MaterialButton</span><span class="token punctuation">(</span>            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>yellow<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Request contacts permission'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">PermissionsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestContactsPermission</span><span class="token punctuation">(</span>                  onPermissionDenied<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Permission has been denied'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务应该被注入或定位，如图所示，只使用提供者或像这样的架构中的提供者和get_it。<br>将你的功能包装在一个服务中，可以消除你的代码和第三方实现细节之间的任何关系，所以对我来说，这一直是一个首选解决方案。</p><!-- https://medium.com/flutter-community/request-permissions-in-flutter-as-a-consumable-service-e6cd243f882f -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Permissions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>客厅的木制卡座桌</title>
      <link href="/Wooden-Cassette-Table-for-the-Living-Room.html"/>
      <url>/Wooden-Cassette-Table-for-the-Living-Room.html</url>
      
        <content type="html"><![CDATA[<img src="/Wooden-Cassette-Table-for-the-Living-Room/1.jpg" class="" title="示意图 width=400"><p>当我搬进我的公寓时，我成为了一个伟大的完全磨损的宜家桌子的主人。<br>带着沉重的心情，我不得不去寻找一张新桌子。<br>不幸的是，没有一张桌子能满足我对设计和价格的期望。<br>因此，我制定了一个计划来创造我自己的新桌子。<br>我画了几张图纸，开始了建造…</p><span id="more"></span><h4 id="用品"><a href="#用品" class="headerlink" title="用品"></a>用品</h4><p>工具：</p><ul><li>钻孔机</li><li>曲线锯</li><li>钻头用的孔锯</li><li>手锯</li><li>锉刀</li><li>磨刀机</li><li>带锯</li><li>螺丝夹子</li><li>砂纸</li></ul><p>材料：</p><ul><li>60cm x 100cm 木质复式板（宽度2x 1cm；1x 3cm）。</li><li>400cm x 12cm 地面木条 </li><li>10cm x 10cm 木块</li><li>各种废旧木材</li><li>钢制桌腿</li><li>木制螺丝</li><li>棕色油漆</li><li>清漆</li></ul><h4 id="第1步：绘制和切割单个零件"><a href="#第1步：绘制和切割单个零件" class="headerlink" title="第1步：绘制和切割单个零件"></a>第1步：绘制和切割单个零件</h4><img src="/Wooden-Cassette-Table-for-the-Living-Room/2.jpg" class="" title="示意图 width=400"><img src="/Wooden-Cassette-Table-for-the-Living-Room/3.jpg" class="" title="示意图 width=400"><p>我开始把木板切割成合适的尺寸，然后我画出各个部分以尽可能地节省材料。<br>为了创造出3D效果，我对这几个单独的部分铣削、铣削、铣削、再铣削。<br>我用一个坚固的带锯锯出了木角的半径。</p><p>最初，我曾考虑用曲线锯锯出孔，但不幸的是，切割的效果非常不令人满意。<br>因此，我自己买了能找到的最大尺寸的孔锯。<br>你必须非常小心，如果钻头卡住的话将会是非常危险的。</p><p>当我把不同的部件放在一起时，我对已经做完的这几个部分还是非常满意滴……</p><h4 id="第2步：胶合和夹紧"><a href="#第2步：胶合和夹紧" class="headerlink" title="第2步：胶合和夹紧"></a>第2步：胶合和夹紧</h4><img src="/Wooden-Cassette-Table-for-the-Living-Room/4.jpg" class="" title="示意图 width=400"><img src="/Wooden-Cassette-Table-for-the-Living-Room/5.jpg" class="" title="示意图 width=400"><img src="/Wooden-Cassette-Table-for-the-Living-Room/6.jpg" class="" title="示意图 width=400"><p>我开始把角块粘在底板上，然后我把侧板调整了几毫米，并把它们粘上。<br>干着，干着，你会发现：你永远都不会有足够的螺丝夹子😂。</p><h4 id="第3步：制作录音带外形"><a href="#第3步：制作录音带外形" class="headerlink" title="第3步：制作录音带外形"></a>第3步：制作录音带外形</h4><img src="/Wooden-Cassette-Table-for-the-Living-Room/7.jpg" class="" title="示意图 width=400"><img src="/Wooden-Cassette-Table-for-the-Living-Room/8.jpg" class="" title="示意图 width=400"><img src="/Wooden-Cassette-Table-for-the-Living-Room/9.jpg" class="" title="示意图 width=400"><p>对于盒式磁带的外形，我想了很久，应该如何制作。<br>经过长时间的考虑，最简单的方法是把几块板子放在彼此的上面，每次都钻上适当的孔。不幸的是，这消耗了大量的材料，但是，你却可以拥有了一个非常大的桌子(<em>/ω＼</em>)。</p><p>对于 “齿轮齿”，我只是用一个小孔锯锯出了个别的圆柱体。</p><p>我把这些东西简单地粘在一起，我还为胶带凿出来了一个凹槽。</p><p>接下来是上漆</p><p>我给一块切割好的细长的木头上漆，然后把它粘到凹槽里。<br>对于音圈，我切了一块有近似半径的木头 — 这是为了模拟卷起的胶带。<br>最后，我用砂纸磨平了所有的轮廓，然后涂上清漆。</p><p>这样就做完了，你如果感兴趣的话，要不也试试~</p><!-- https://www.instructables.com/Wooden-Cassette-Table-for-the-Living-Room/?utm_source=newsletter&utm_medium=email -->]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手工 </tag>
            
            <tag> 乌七八糟 </tag>
            
            <tag> handwork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中带有图像剪裁器的相机插件</title>
      <link href="/Camera-Plugin-with-Image-Cropper-In-Flutter.html"/>
      <url>/Camera-Plugin-with-Image-Cropper-In-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/Camera-Plugin-with-Image-Cropper-In-Flutter/1.png" class="" title="示意图 width=400"><p>在不同的应用程序中使用摄像头是很正常的。<br>但在实现它时，你可能会面临各种问题：<br>例如，如果你在一个电子商务的应用程序中，需要管理不同的东西，需要选择不同的项目，也需要用图片发布我们的回应，那时我们就需要编写一个单一的代码库，从那里我们可以在整个应用程序的不同位置管理摄像头。</p><span id="more"></span><blockquote><p>因此，让我们来看看它的实现，从那里我们会看到我们是如何做到的</p></blockquote><p>代码实现：<br>为了实现这个功能，我们需要添加一些依赖性</p><pre class="line-numbers language-none"><code class="language-none">camera: image_cropper:image_picker:path_provider: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：image_cropper需要在manifest.xml文件中添加一些东西。你可以在imageCropper插件中找到这些需要注意的地方。</p></blockquote><p>比如：<br>还需要在Android平台中添加如下代码：<br>AndroidManifest.xml文件中</p><pre class="line-numbers language-none"><code class="language-none">&lt;activity  android:name="com.yalantis.ucrop.UCropActivity"  android:screenOrientation="portrait"  android:theme="@style/Theme.AppCompat.Light.NoActionBar"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>camera插件用于访问相机，image_cropper用于编辑点击或挑选的图像，path_provider用于寻找文件系统上的常用位置，image_picker用于挑选图像。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:io'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:image_cropper/image_cropper.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:image_picker/image_picker.dart'</span></span><span class="token punctuation">;</span><span class="token function">onImageButtonPressed</span><span class="token punctuation">(</span><span class="token class-name">ImageSource</span> source<span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> capturedImageFile<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">ImagePicker</span> _picker <span class="token operator">=</span> <span class="token class-name">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">File</span> val<span class="token punctuation">;</span>  <span class="token keyword">final</span> pickedFile <span class="token operator">=</span> <span class="token keyword">await</span> _picker<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>    source<span class="token punctuation">:</span> source<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  val <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">ImageCropper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cropImage</span><span class="token punctuation">(</span>    sourcePath<span class="token punctuation">:</span> pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">,</span>    aspectRatio<span class="token punctuation">:</span> <span class="token class-name">CropAspectRatio</span><span class="token punctuation">(</span>ratioX<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> ratioY<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    compressQuality<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    maxHeight<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>    maxWidth<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>    compressFormat<span class="token punctuation">:</span> <span class="token class-name">ImageCompressFormat</span><span class="token punctuation">.</span>jpg<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"cropper </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">val<span class="token punctuation">.</span>runtimeType</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">capturedImageFile</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">typedef</span> <span class="token class-name">CapturedImageFile</span> <span class="token operator">=</span> <span class="token class-name">String</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token class-name">OnPickImageCallback</span><span class="token punctuation">(</span>    double maxWidth<span class="token punctuation">,</span> double maxHeight<span class="token punctuation">,</span> int quality<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，你可以很容易地看到这个方法通过一个回调函数返回一个字符串文件，这个回调函数就是CaptureImageFile函数，通过这个函数我们将收到一个被点击或被选中的图片。</p><blockquote><p>在这个方法中，我们已经创建了一个图像采集器的实例变量……<br>final ImagePicker _picker = ImagePicker()。</p></blockquote><p>并通过使用这个变量，我们将通过内置的getImage方法获得图像文件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">final</span> pickedFile <span class="token operator">=</span> <span class="token keyword">await</span> _picker<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>  source<span class="token punctuation">:</span> source<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，我们在pickFile变量中拥有一个文件，我们需要像下面的图片所示那样裁剪一个文件</p><img src="/Camera-Plugin-with-Image-Cropper-In-Flutter/2.png" class="" title="示意图 width=400"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">val <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">ImageCropper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cropImage</span><span class="token punctuation">(</span>  sourcePath<span class="token punctuation">:</span> pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">,</span>  aspectRatio<span class="token punctuation">:</span> <span class="token class-name">CropAspectRatio</span><span class="token punctuation">(</span>ratioX<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> ratioY<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  compressQuality<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  maxHeight<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>  maxWidth<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>  compressFormat<span class="token punctuation">:</span> <span class="token class-name">ImageCompressFormat</span><span class="token punctuation">.</span>jpg<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个方法中，ImageCropper.crop Image()需要不同的参数，你需要提供你的文件路径，你可以提供你想最小化图片的比例和图片的尺寸，你也可以设置你想接收图片的格式。</p><p>在编辑完所选的图片后，我们需要返回文件，我们通过向回调函数提供图片来完成同样的工作，就像这样……</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">capturedImageFile</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在该方法以字符串格式返回图片。</p><p>在下面的图片中，你可以看到我们有两个不同的按钮，我们通过它们调用两个不同的方法，一个用于相机，另一个用于相册。</p><img src="/Camera-Plugin-with-Image-Cropper-In-Flutter/3.png" class="" title="示意图 width=400"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">onImageButtonPressed</span><span class="token punctuation">(</span>  <span class="token class-name">ImageSource</span><span class="token punctuation">.</span>camera<span class="token punctuation">,</span>  context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>  capturedImageFile<span class="token punctuation">:</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _imageFile <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当按钮被按下时，我们调用这个方法。在这里，我们要发送不同的参数，其中最重要的一个是参数，通过这个参数，该方法可以知道哪个动作要发生。</p><blockquote><p>对于相机，我们使用ImageSource.camera；对于相册，使用ImageSource.gallery。</p></blockquote><blockquote><p>CaputuredImageFile是一个回调函数，我们通过它接收文件并根据我们的需要使用它。</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/cupertino.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_camera_demo/camera_gallary_image_picker.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:image_picker/image_picker.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyHomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  _MyHomePageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MyHomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _MyHomePageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> _imageFile<span class="token punctuation">;</span>  <span class="token keyword">var</span> _width<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _width <span class="token operator">=</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">_previewImage</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      floatingActionButton<span class="token punctuation">:</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token class-name">Container</span><span class="token punctuation">(</span>            width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">.</span><span class="token function">extended</span><span class="token punctuation">(</span>              label<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Camera"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>              shape<span class="token punctuation">:</span> <span class="token class-name">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onImageButtonPressed</span><span class="token punctuation">(</span>                  <span class="token class-name">ImageSource</span><span class="token punctuation">.</span>camera<span class="token punctuation">,</span>                  context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>                  capturedImageFile<span class="token punctuation">:</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      _imageFile <span class="token operator">=</span> s<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">Container</span><span class="token punctuation">(</span>            width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">.</span><span class="token function">extended</span><span class="token punctuation">(</span>              label<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gallery"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>              shape<span class="token punctuation">:</span> <span class="token class-name">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onImageButtonPressed</span><span class="token punctuation">(</span>                  <span class="token class-name">ImageSource</span><span class="token punctuation">.</span>gallery<span class="token punctuation">,</span> context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>                  capturedImageFile<span class="token punctuation">:</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"file path  </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">s</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      _imageFile <span class="token operator">=</span> s<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// This trailing comma makes auto-formatting nicer for build methods.</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Widget</span> <span class="token function">_previewImage</span><span class="token punctuation">(</span>    <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    _width <span class="token operator">=</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_imageFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        height<span class="token punctuation">:</span> _width <span class="token operator">*</span> <span class="token number">0.34</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>          borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>            <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">ClipRRect</span><span class="token punctuation">(</span>          borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>            <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">_imageFile</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> _width <span class="token operator">*</span> <span class="token number">0.34</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> _width<span class="token punctuation">,</span>            alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>            fit<span class="token punctuation">:</span> <span class="token class-name">BoxFit</span><span class="token punctuation">.</span>fitWidth<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        height<span class="token punctuation">:</span> _width <span class="token operator">*</span> <span class="token number">0.34</span><span class="token punctuation">,</span>        decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>          borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>            <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>            <span class="token string-literal"><span class="token string">'assets/images/wishlists/cam-img.png'</span></span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>事实上，有不同的方法来访问相机和从图片库中挑选图片，但最重要的是以最简单的方式定义事物，并轻松地工作。<br>在这个例子中，我以最简单的方式展示了这些东西，如果你想尝试，你只需要复制这些代码文件并添加这些依赖性，它就会开始工作啦，要不你试试捏！</p><!-- https://medium.flutterdevs.com/camera-plugin-with-image-cropper-flutter-97b76105857e -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 图像剪裁器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中如何使用Bottom Sheet</title>
      <link href="/Modal-Bottom-Sheet-In-Flutter.html"/>
      <url>/Modal-Bottom-Sheet-In-Flutter.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是菜单或对话框的替代品，并阻止用户与应用程序的其他部分进行互动</p></blockquote><img src="/Modal-Bottom-Sheet-In-Flutter/1.png" class="" title="示意图 width=400"><p>在这篇博客中，我们将探讨Flutter中的Modal Bottom Sheet Widget。<br>我们还将实现一个模态底部工作表小部件的演示，并描述它的属性，以及如何在您的flutter应用程序中使用它们。</p><span id="more"></span><h3 id="Modal-Bottom-Sheet"><a href="#Modal-Bottom-Sheet" class="headerlink" title="Modal Bottom Sheet :"></a>Modal Bottom Sheet :</h3><p>Bottom Sheet是设计上给予的一个非常好的组件。<br>它就像一个从底部打开的对话框。当我们必须为用户显示一些选项来进行时，我们就会使用下面的表单。在这里你可以根据你的要求使用任何小部件。</p><p>Bottom Sheet两个必要属性 :</p><ul><li><p>BuildContext: 特定小组件的构建上下文可以随着时间改变位置。因为它可以帮助创建方法确定它要拉动的小部件，也可以帮助确定要拉动的小部件在小部件树中的位置。</p></li><li><p>WidgetBuilder: 构建器小部件需要传递一个小部件，但只有一个返回小部件的函数。</p></li></ul><p>Bottom Sheet的一些可选属性 :</p><ul><li>shape: 使用形状属性，我们可以根据自己的情况给出一个圆形的边框和边框的颜色。</li><li>background:使用形状属性，我们可以给一个圆形的边框，边框的颜色根据我们自己的情况而定。</li><li>elevation: 仰角属性用于提高底片的阴影，它是一个可选的属性。</li></ul><p>演示模块:</p><img src="/Modal-Bottom-Sheet-In-Flutter/2.gif" class="" title="示意图 width=400"><p>代码开始：</p><blockquote><p>在lib文件夹中创建一个新的dart文件，名为modal_bottom_sheet.dart。</p></blockquote><p>首先，我们将在模式化的底层表页屏幕上创建一个按钮。而我们将在点击时打开Sheet。</p><img src="/Modal-Bottom-Sheet-In-Flutter/3.png" class="" title="示意图 width=400"><p>现在，在点击一个按钮时，我们将显示Bottom Sheet，在Bottom Sheet内采取了列，并在列部件内使用了List Tile部件，在其中显示了一些图像和标题。</p><blockquote><p>让我们看看源代码是不是可以更深入的了解了解。</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">showModalBottomSheet</span><span class="token punctuation">(</span>    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>        mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>photo<span class="token punctuation">)</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Photo'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>music_note<span class="token punctuation">)</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Music'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Video'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>share<span class="token punctuation">)</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Share'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们运行该应用程序时，我们应该得到像下面的屏幕截图一样的屏幕输出。</p><img src="/Modal-Bottom-Sheet-In-Flutter/4.png" class="" title="示意图 width=400"><p>代码如下：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ModalBottomSheet</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  _ModalBottomSheetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_ModalBottomSheetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _ModalBottomSheetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ModalBottomSheet</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>          <span class="token string-literal"><span class="token string">'Modal Bottom Sheet'</span></span><span class="token punctuation">,</span>          style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>              <span class="token string-literal"><span class="token string">"MODAL BOTTOM SHEET EXAMPLE"</span></span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                  fontStyle<span class="token punctuation">:</span> <span class="token class-name">FontStyle</span><span class="token punctuation">.</span>italic<span class="token punctuation">,</span>                  letterSpacing<span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>                  fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>              height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              shape<span class="token punctuation">:</span> <span class="token class-name">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">showModalBottomSheet</span><span class="token punctuation">(</span>                    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>                    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>                        mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>                        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>                          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>                            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>photo<span class="token punctuation">)</span><span class="token punctuation">,</span>                            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Photo'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>                            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>music_note<span class="token punctuation">)</span><span class="token punctuation">,</span>                            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Music'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>                            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">,</span>                            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Video'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>                            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>share<span class="token punctuation">)</span><span class="token punctuation">,</span>                            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Share'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              padding<span class="token punctuation">:</span>                  <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>                <span class="token string-literal"><span class="token string">'Click Me'</span></span><span class="token punctuation">,</span>                style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span>                    fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">,</span>                    letterSpacing<span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h4><p>在这篇文章中，我已经解释了一个模态底层表单的演示，你可以根据自己的情况进行修改和实验。这个小小的介绍是来自于我们这边的 “模式化底层表单 “的widget。<br>我希望这篇博客能够为您提供足够的信息，让您在您的flutter项目中尝试使用Modal Bottom Sheet Widget。<br>我们将向您展示Modal Bottom Sheet是什么，并在您的flutter应用程序中使用它，所以赶紧的去试试吧！</p><!-- https://medium.flutterdevs.com/modal-bottom-sheet-in-flutter-dae05debbed2 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Bottom Sheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web3是自我认证的</title>
      <link href="/Web3-is-Self-Certifying.html"/>
      <url>/Web3-is-Self-Certifying.html</url>
      
        <content type="html"><![CDATA[<img src="/Web3-is-Self-Certifying/1.png" class="" title="示意图 width=400"><p>最近有很多关于Web3是什么和不是什么的讨论。<br>以下是我的定义:<br>Web3是用户生成的权威，由自我认证的网络协议实现。<br>这些是包括区块链在内的技术的超集，但不限于此。这就是其他人认为的 “Web3”吗？也许不是，但听我说完。</p><span id="more"></span><p>网络上的权威确定了谁最终拥有对内容的控制权。<br>在网络的最早阶段，“用户”和网络主机之间通常并不存在分开的状态，谁托管了一个网站，谁就把内容放在那里。</p><p>在被称为 “Web 2.0”的转变中，网站开始流行，给用户提供创建内容的账户，但网站主办方仍有最终决定权，可以单方面改变他们想要的东西。<br>这是网络现在的运作方式。</p><p>在我们称之为Web3的网络演进中，用户可以通过密码学方式确认自己的身份，并发布可验证的内容，而托管内容的网站没有权力改变它，因为信任的根源在于数据本身，而不是在哪里找到它。</p><p>回顾一下：</p><ul><li><p>网络1.0–主机产生的内容，主机产生的说了算。想在网络上发布信息的人必须运行自己的服务器来托管网站。网站主要是只读的，并提供很少的界面供用户创建内容或互动。</p></li><li><p>Web 2.0 - 用户产生的内容，还是主机说了算。<br>这些网站让人们创建用户账户，这样用户发布内容就可以不用自己的服务器了。这从而促使了更多的用户生成互动内容。<br>但这些网站已经发展成为强大的平台，而用户最终不能控制他们的账户和内容的事实也显现出来了。</p></li><li><p>Web 3.0 - 用户产生的内容，用户说了算。一种模式正在出现，人们不必托管服务器或在别人的数据库中创建一个用户账户来创建内容。<br> 服务器可以选择是否托管某人的账户或内容，但他们对其没有最终的权力。实现这一点的技术是 “自我认证协议”，基于加密签名和哈希值。</p></li></ul><p>简而言之，这三个阶段是 “托管网络、发布网络和签名网络”。</p><p>什么是“自我认证的协议”？<br>这是我用来描述具有加密用户标识符和内容寻址数据的协议的一个通用术语。</p><p>“加密用户标识符”将用户与公钥联系起来。用相应的私钥签名的方法证明某人控制账户的信任根基，而不是跟踪用户登录的数据库中的一个条目。<br>“内容寻址数据”意味着内容是通过其加密哈希值来引用的–这是一块数据的唯一数字 “指纹”。<br>把这两块放在一起，由用户密钥签署的内容哈希值可以证明用户授权其创建，而不需要中间人。<br>自我认证的数据使信任存在于数据本身，而不是在你发现它的地方，允许应用程序从客户端-服务器架构中转移出来。这创造了 “用户生成即权威”。</p><p>如果我们把它定义为自我认证的协议，那么区块链在Web3中的作用是什么？</p><p>区块链是自证协议，对全球状态形成共识，模拟集中式数据库，没有任何一方控制。<br>区块链上的 “用户账户”是加密的密钥对，用于签署交易。<br>“内容是”捆绑在区块中的交易的哈希值，这些哈希值本身也被串联在一起。交易是用用户的密钥对签署的。<br>比特币（第一个区块链）引入了一种新的共识机制，让互不信任的各方就发生的交易达成一致–这对没有中间人的数字货币非常重要。</p><p>还有哪些协议具有自我认证的特性，而不是区块链？<br>Git、PGP、BitTorrent和Tahoe-LAFs在比特币之前。<br>在当前一代非区块链自证协议中，IPFS、Hypercore、SSB、Pergos和Spritely都有用户密钥和内容寻址。<br>在这些非区块链自证协议中，你可以证明一个用户 “拥有 “内容，即可以验证他们发布的内容。区块链通过拥有一个每个人都同意的有时间戳的全球账本，引入了一个更严格的所有权概念。<br>这让你可以断言全局排序和唯一性等属性，所以你可以证明在同一时间只有一个人“拥有”一个比特币或一个NFT。<br>从架构上看，区块链可以被认为是Web3中的一种数据存储，对某些应用有用，对其他应用则很麻烦。<br>但在财政和社会方面，他们已经将注意力和资源倾注到这个空间。由区块链而建立的Web3基础设施的重要部分包括：将密钥对放到数百万用户手中的钱包和应用程序，以及新的加密基元的工具，如释放无数可能性的零知识证明。<br>可以理解的是，为什么它们目前盖过了对其他事物的讨论，但如果要实现完整的Web3愿景，就必须开发其他类型的自我认证协议。</p><p>如果一个自我认证的协议是一个允许通过用户密钥和内容寻址直接证明内容的作者身份的协议，那么一个自我认证的网络协议就是一个也有内容链接和发现的协议。<br>能够发现内容的算法是我们现在使用网络的一个基本部分，如果“Web3”要提供良好的用户体验，它需要在这方面发展得更加成熟。</p><p>我们认为缺失或不成熟的东西：社交图谱、用户档案、身份和声誉证明、内容聚合、索引和发现、策划和管理方法。应用于区块链技术的Web3一词的一个令人困惑的部分是，它现在是很多不相干的部分，缺少很多我们从网络上期待的功能。</p><p>希望Web3有一个更广泛的定义，包括所有自我认证的协议，其中所有区块链都是一个子集。<br>但是，与其关注这些术语，不如尝试将我们的精力集中在互联网发展过程中哪些属性和特征是重要的。<br>希望有一个更以用户为中心的网络，人们可以产生自己的权力来创造内容，而不把自己锁定在一个中心化的服务中。<br>如果你同意这一点，但由于某种原因不想使用“Web3”这个术语，建议使用“自我认证的网络协议”，简称SCWP，作为这些技术的一个更具体和技术描述性的术语。</p><!-- https://jaygraber.medium.com/web3-is-self-certifying-9dad77fd8d81 -->]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web3 </tag>
            
            <tag> Certifying </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析setState()</title>
      <link href="/Breakdown-setState-signature.html"/>
      <url>/Breakdown-setState-signature.html</url>
      
        <content type="html"><![CDATA[<img src="/Breakdown-setState-signature/1.png" class="" title="示意图 width=400"><p>大多数时候，初学者在编写setState()方法时都会感到困惑。</p><span id="more"></span><blockquote><p>大括号的顺序是什么，为什么有这么多的大括号，这些是什么？<br>这是一个方法吗？<br>这是一个函数中的一个函数吗？</p></blockquote><p>此外，当人们这样写时：</p><img src="/Breakdown-setState-signature/2.png" class="" title="示意图 width=400"><p>那么这是不是一个函数的函数里面的函数调用？🤔</p><p>所以，让我们为你分解一下吧!<br>但在此之前，让我们先定义一些函数。</p><p><strong>你能说出这两个函数之间的区别吗？</strong></p><img src="/Breakdown-setState-signature/3.jpg" class="" title="示意图 width=400"><p>所以，第一个函数是Void Function()，基本上是一个零参数的函数，不返回任何东西。<br>第二个是String Function()，也是一个零参数的函数，但它返回String。</p><p>让我们在这里暂停一下，回到我们的setState()方法，打开它的文档。</p><img src="/Breakdown-setState-signature/4.png" class="" title="示意图 width=400"><img src="/Breakdown-setState-signature/5.png" class="" title="示意图 width=400"><p>所以setState是我们的State类中的一个类方法。这也是为什么你不能从任何无状态的Widget中得到setState的原因，因为他们没有一个相关的State类。<br>但也要注意，setState需要一个参数，这个参数是VoidCallback类型的。<br>现在，VoidCallback到底是什么？<br>如果你打开VoidCallback的文档，它不过是……</p><img src="/Breakdown-setState-signature/6.png" class="" title="示意图 width=400"><p>…只是void Function()的一个别名。<br>所以你可能会问，这是否意味着VoidCallback等同于我们之前写的displayMessage()函数，基本上等同于一个不需要参数、不返回数据的函数？</p><p>所以严格来说，setState需要一个void Function()作为参数。</p><img src="/Breakdown-setState-signature/7.gif" class="" title="示意图 width=400"><p>所以setState()基本上采取了一个匿名函数，一个没有名字的函数。<br>所以下一次，当你为setState()提供参数时，只要想象一下写一个没有函数名的无效函数体，你就不会对括号产生混淆了。</p><h3 id="对函数的引用作为参数"><a href="#对函数的引用作为参数" class="headerlink" title="对函数的引用作为参数"></a>对函数的引用作为参数</h3><p>有的时候，我也注意到人们这样做：</p><img src="/Breakdown-setState-signature/8.png" class="" title="示意图 width=400"><p>如果你也是其中之一，你是否意识到你只是在一个函数的函数里面做一个函数调用，没有任何额外的好处？<br>现在你理解了setState的方法，你是否认为提供一个对displayMessage()的引用就能简单地做到这一点？<br>观察一下下面的变化。</p><img src="/Breakdown-setState-signature/9.gif" class="" title="示意图 width=400"><p>在这里，我们只是为setState提供了一个对函数displayMessage()的引用，这就完成了任务，不需要嵌套函数，代码数量也少。</p><p>Dart称其为tear-offs，你也许可以在这里读到一些这方面的内容⤵️。<br><a href="https://dart.dev/guides/language/effective-dart/usage#dont-create-a-lambda-when-a-tear-off-will-do">https://dart.dev/guides/language/effective-dart/usage#dont-create-a-lambda-when-a-tear-off-will-do</a></p><p>事实上，你也可以定义一个函数变量，就像你对任何原始类型如String、bool或int所做的那样。</p><img src="/Breakdown-setState-signature/10.png" class="" title="示意图 width=400"><p>💡 注意：然而，函数声明比函数变量更值得推荐。</p><p>但请记住，这种提供引用的方式只有在你想提供的函数也是void Function()的情况下才有效。<br>以下情况不会起作用 🔴</p><img src="/Breakdown-setState-signature/11.png" class="" title="示意图 width=400"><p>就这样了。<br>我希望你在读完这篇文章后对setState()不再感到困惑。🙏<br>如果你觉得自己有什么不明白的地方，请你尝试着去挖掘一下文档，当涉及到Flutter时，它是一个神奇的信息宝库。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我怎样才能开始进行Flutter测试？</title>
      <link href="/How-can-I-start-with-Flutter-Testing.html"/>
      <url>/How-can-I-start-with-Flutter-Testing.html</url>
      
        <content type="html"><![CDATA[<img src="/How-can-I-start-with-Flutter-Testing/1.jpeg" class="" title="示意图 width=400"><p>大家好! 👋<br>这些天我开始了我的Flutter测试之旅。这个世界对我来说是未知的，但我知道在我们的应用程序中进行测试是超级重要的，我决定自己学习。<br>也许我现在给你看的代码可以做得更好，但请记住，这是我第一次做flutter测试，我想向你展示我所做的，当然，如果你有任何建议，代码将是开源的。<br>我对这个资源库的想法是为每个对学习测试感兴趣的人提供一个地方，创建新的内容，PR，并一起合作。</p><span id="more"></span><p>所以让我们开始吧! 🙌<br>首先，我想解释一下我创建的是一个什么样的项目。我创建了一个显示猫的应用程序，它来自一个获取猫猫的API。<br>在这种情况下，我创建了一个底部导航小部件，有三个页面。在这篇文章中，我们将重点讨论第一页。</p><h3 id="随机猫咪🐱"><a href="#随机猫咪🐱" class="headerlink" title="随机猫咪🐱"></a>随机猫咪🐱</h3><p>这个页面是一个随机猫咪的可视化工具，你只需要简单的点击就可以拥有看到世界上每个地方的猫咪的能力，很棒吧？<br>玩笑归玩笑，这个页面的想法是让用户在点击浮动的行动按钮时可以看到随机的猫咪。<br>为了得到这个结果，我把应用程序的结构保持得很简单，这篇文章不是关于架构的，所以我决定不花很多时间来做这个，而是努力专注于这个项目的目的：测试。🧪</p><img src="/How-can-I-start-with-Flutter-Testing/2.png" class="" title="示意图 width=400"><p>总之，以下这就是应用程序文件夹的结构。</p><img src="/How-can-I-start-with-Flutter-Testing/3.png" class="" title="示意图 width=400"><h3 id="请求成功的情况"><a href="#请求成功的情况" class="headerlink" title="请求成功的情况"></a>请求成功的情况</h3><p>在这个流程中，用户需要点击浮动按钮，这会触发了一个Bloc事件。<br>Bloc负责与存储库通信以获得下一只猫。<br>存储库调用一个API，获得下一只随机猫。<br>在这种情况下，流程是成功的，所以服务将返回一个猫对象给存储库，它将返回给Bloc。Bloc将检查该猫是否正确（如果它有一个非空的品种列表），在这种情况下会发出</p><pre class="line-numbers language-none"><code class="language-none">RandomCatStatus.success<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>视图有一个BlocConsumer，它有一个构建器，正在监听可能的状态变化，以重建视图。</p><img src="/How-can-I-start-with-Flutter-Testing/4.png" class="" title="示意图 width=400"><h3 id="品种列表为空或空的成功案例"><a href="#品种列表为空或空的成功案例" class="headerlink" title="品种列表为空或空的成功案例"></a>品种列表为空或空的成功案例</h3><p>在这种情况下，服务返回一个正确的答案，但是猫的品种列表为空或空。<br>这个列表对于显示猫的信息是必要的。因此，当存储库将对象返回给bloc时，它将负责验证这个列表是否为空或空，在这个例子中，这个列表是空的，所以bloc将发出RandomCatStatus.emptyBreed。视图将在BlocConsumer的监听器上监听这个状态，当它发生时，视图应该再次调用该事件以获得另一只随机猫。</p><img src="/How-can-I-start-with-Flutter-Testing/5.png" class="" title="示意图 width=400"><h3 id="当response-body为空时抛出一个错误"><a href="#当response-body为空时抛出一个错误" class="headerlink" title="当response.body为空时抛出一个错误"></a>当response.body为空时抛出一个错误</h3><p>这是另一种可能发生的情况，当服务响应的状态代码为200，但响应体是空的，在这种情况下，服务将抛出一个错误。<br>当一个错误被抛出时，Bloc上的try/catch将捕获这个错误并发出RandomCatStatus.failure。视图将监听这个状态，以显示一个带有错误的消息。</p><img src="/How-can-I-start-with-Flutter-Testing/6.png" class="" title="示意图 width=400"><h3 id="当response-statusCode不是200时，抛出一个错误。"><a href="#当response-statusCode不是200时，抛出一个错误。" class="headerlink" title="当response.statusCode不是200时，抛出一个错误。"></a>当response.statusCode不是200时，抛出一个错误。</h3><p>例如，如果响应状态代码返回404或400，应用程序将抛出一个错误。Bloc会捕捉到这个错误，并向视图发出一个RandomCatStatus.failure。</p><img src="/How-can-I-start-with-Flutter-Testing/7.png" class="" title="示意图 width=400"><p>这些是该应用程序的所有可能情况。</p><h3 id="让我们进入测试-🧪"><a href="#让我们进入测试-🧪" class="headerlink" title="让我们进入测试 🧪"></a>让我们进入测试 🧪</h3><p>现在是在flutter中进行测试的时候了。我们需要的第一件事是在pubspec.yaml中建立正确的依赖关系来进行测试。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>  <span class="token key atrule">mocktail</span><span class="token punctuation">:</span> ^0.3.0 // to mock classes  <span class="token key atrule">network_image_mock</span><span class="token punctuation">:</span> ^2.0.1 // to mock image network<span class="token key atrule">dev_dependencies</span><span class="token punctuation">:</span>  <span class="token key atrule">flutter_test</span><span class="token punctuation">:</span>    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter  <span class="token key atrule">bloc_test</span><span class="token punctuation">:</span> ^9.0.3 // to do bloc testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很好，现在我们可以开始了! ✅</p><p>在根项目→测试文件夹中，我已经创建了这个。</p><img src="/How-can-I-start-with-Flutter-Testing/8.png" class="" title="示意图 width=400"><p>在flutter中，我们可以做不同类型的测试。</p><ul><li>单元测试</li><li>块状测试</li><li>小工具测试</li><li>集成测试<br>在这里，我们将专注于前三种。<br>当你在测试时，你有不同的方法可以在做测试之后或之前使用。</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// Registers a function to be run once before all tests</span><span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Registers a function to be run before tests</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Registers a function to be run after tests</span><span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Registers a function to be run once after all tests</span><span class="token function">tearDownAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>在这一部分，我将测试我在服务和资源库类上创建的方法。<br>这是 <strong>service.dart类</strong></p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:convert'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/model/cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/model/result_error.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http/http.dart'</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http/http.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CatService</span> <span class="token punctuation">{</span>  <span class="token class-name">CatService</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Client</span><span class="token operator">?</span> httpClient<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://api.thecatapi.com/v1'</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> _httpClient <span class="token operator">=</span> httpClient <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> baseUrl<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Client</span> _httpClient<span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient        <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">baseUrl</span></span><span class="token string">/images/search?has_breeds=true'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token class-name">ErrorEmptyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下，我必须测试该服务可能出现的所有情况。要做到这一点，我需要做的第一件事就是为响应、对象等创建模拟类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MockHttp</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Client</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">MockResponse</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeUri</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">Uri</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在main方法中，我创建了一个组，拥有所有与服务类相关的测试。在<strong>setUpAll</strong>方法中，我注册了一个**registerFallbackValue(FakeUri())**，因为我需要它在测试中使用一个假的URI。<br>如果我不这样做，我就不能使用any()方法。<br>另外，我已经为模拟创建了所需的变量。这些都将被实例化到setUp方法中。此外，我还在一个单独的类中创建了一个JSON变量来伪造API的结果（当API返回一个正确的猫时）。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Service'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  late <span class="token class-name">CatService</span> catService<span class="token punctuation">;</span>  late <span class="token class-name">MockHttp</span> httpClient<span class="token punctuation">;</span>  <span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    httpClient <span class="token operator">=</span> <span class="token class-name">MockHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    catService <span class="token operator">=</span> <span class="token class-name">CatService</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">:</span> httpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我准备做的第一个测试是检查构造函数是否不需要httpClient。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'constructor'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'does not required a httpClient'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">CatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isNotNull<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我打算创建一个小组，让所有的测试得到一只随机的猫。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'catSearch'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个组里面，我需要检查不同的东西。</p><ol><li>当服务做了一个正确的HTTP请求但主体是空的。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">test</span><span class="token punctuation">(</span>          <span class="token string-literal"><span class="token string">'make correct http request with empty response,'</span></span>          <span class="token string-literal"><span class="token string">' throw [ErrorEmptyResponse]'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'should throw error empty body'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">expect</span><span class="token punctuation">(</span>            error<span class="token punctuation">,</span>            isA<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorEmptyResponse</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">verify</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>            <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>                <span class="token string-literal"><span class="token string">'https://api.thecatapi.com/v1/images/search?has_breeds=true'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>当服务抛出一个错误时，响应不是200。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'throws ResultError on non-200 response'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>    catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">throwsA</span><span class="token punctuation">(</span>      isA<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>当服务在一个有效的响应上返回一个Cat.json。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'return Cat.json on a valid response'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">TestHelper</span><span class="token punctuation">.</span>searchCatJsonResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>          <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          isA<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你运行所有这些测试，你将得到最好的一句话：所有的测试都通过了！。</p><img src="/How-can-I-start-with-Flutter-Testing/9.png" class="" title="示意图 width=400"><p>这里是一个完整的类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:convert'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/model/cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/model/result_error.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/service.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/utils/test_helper.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http/http.dart'</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mocktail/mocktail.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MockHttp</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Client</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MockResponse</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeUri</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">Uri</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Service'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    late <span class="token class-name">CatService</span> catService<span class="token punctuation">;</span>    late <span class="token class-name">MockHttp</span> httpClient<span class="token punctuation">;</span>    <span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      httpClient <span class="token operator">=</span> <span class="token class-name">MockHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      catService <span class="token operator">=</span> <span class="token class-name">CatService</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">:</span> httpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'constructor'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'does not required a httpClient'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">CatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isNotNull<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'catSearch'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">test</span><span class="token punctuation">(</span>          <span class="token string-literal"><span class="token string">'make correct http request with empty response,'</span></span>          <span class="token string-literal"><span class="token string">' throw [ErrorEmptyResponse]'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'should throw error empty body'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">expect</span><span class="token punctuation">(</span>            error<span class="token punctuation">,</span>            isA<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorEmptyResponse</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">verify</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>            <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>                <span class="token string-literal"><span class="token string">'https://api.thecatapi.com/v1/images/search?has_breeds=true'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'throws ResultError on non-200 response'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>          catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">throwsA</span><span class="token punctuation">(</span>            isA<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'return Cat.json on a valid response'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">TestHelper</span><span class="token punctuation">.</span>searchCatJsonResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> httpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>          <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          isA<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在是时候对版本库类进行测试了。这里是cat_respository类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'model/cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'service.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CatRepository</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CatRepository</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">CatService</span> service<span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> service<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，我创建了必要的模拟</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MockService</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">cat_service<span class="token punctuation">.</span></span>CatService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二，我创建了一个组，拥有与这个类相关的所有测试。这里是创建所需变量并将其初始化到setUp方法的地方。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Cat Repository'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    late <span class="token class-name"><span class="token namespace">cat_service<span class="token punctuation">.</span></span>CatService</span> catService<span class="token punctuation">;</span>    late <span class="token class-name">CatRepository</span> catRepository<span class="token punctuation">;</span>    <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      catService <span class="token operator">=</span> <span class="token class-name">MockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      catRepository <span class="token operator">=</span> <span class="token class-name">CatRepository</span><span class="token punctuation">(</span>service<span class="token punctuation">:</span> catService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我为构造函数创建了一个测试，在这里我检查了cat服务是否需要。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'instantiates CatRepository with a required carService'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                            <span class="token function">expect</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">,</span> isNotNull<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完成这个类的所有覆盖的其他检查:</p><ol><li>对搜索方法的调用。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'calls search method'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> catRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>当搜索方法失败时抛出错误。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'throws Result exception when search fails'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token comment">// first create a exception mock instance</span>    <span class="token keyword">final</span> exception <span class="token operator">=</span> <span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// when calls and api and throw an exception</span>    <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// then expect an error result</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">throwsA</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下就是cat_repository_test.dart类的代码。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/cat_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/model/result_error.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/service.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mocktail/mocktail.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MockService</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name">CatService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Cat Repository'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    late <span class="token class-name">CatService</span> catService<span class="token punctuation">;</span>    late <span class="token class-name">CatRepository</span> catRepository<span class="token punctuation">;</span>    <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      catService <span class="token operator">=</span> <span class="token class-name">MockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      catRepository <span class="token operator">=</span> <span class="token class-name">CatRepository</span><span class="token punctuation">(</span>service<span class="token punctuation">:</span> catService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'constructor'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'instantiates CatRepository with a required carService'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">,</span> isNotNull<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'search next cat'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'calls search method'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> catRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'throws Result exception when search fails'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>        <span class="token comment">// first create a exception mock instance</span>        <span class="token keyword">final</span> exception <span class="token operator">=</span> <span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// when calls and api and throw an exception</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// then expect an error result</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">throwsA</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有测试都通过了!</p><img src="/How-can-I-start-with-Flutter-Testing/10.png" class="" title="示意图 width=400"><p>酷! 现在我们已经把所有的测试都传到了我们的服务和资源库中，现在是时候进入bloc测试了。</p><h3 id="Bloc-Test"><a href="#Bloc-Test" class="headerlink" title="Bloc Test"></a>Bloc Test</h3><h4 id="random-cat-bloc-test-dart"><a href="#random-cat-bloc-test-dart" class="headerlink" title="random_cat_bloc_test.dart"></a>random_cat_bloc_test.dart</h4><p>首先，这是random_cat_bloc类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'../../random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'random_cat_state.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'random_cat_event.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RandomCatBloc</span> <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatEvent</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>catRepository<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> emit<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_mapSearchEventToState</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> emit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token class-name">CatRepository</span> catRepository<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">_mapSearchEventToState</span><span class="token punctuation">(</span>      <span class="token class-name">SearchRandomCat</span> event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> cat <span class="token operator">=</span> <span class="token keyword">await</span> catRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cat<span class="token punctuation">.</span>breeds <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cat<span class="token punctuation">.</span>breeds<span class="token operator">!</span><span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>cat<span class="token punctuation">:</span> cat<span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种类型的测试中，语法与单元测试有一点不同，但它的理念是一样的。以下是关于如何在flutter中测试Bloc的官方文档：<a href="https://bloclibrary.dev/#/testing">Bloc状态管理库</a></p><p>我按照这个文档，我得到了运行我自己的bloc测试。</p><p>让我们开始吧! 🙌<br>像往常一样，我们需要做的第一步是创建需要的模拟类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MockRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name">CatRepository</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MockCat</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来，我们需要创建并初始化所需的变量给我们的模拟类。<br>此外，我还创建了第一个测试，以检查该集团的初始状态是否为 <em>RandomCatStatus.initial</em>。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatBloc'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  late <span class="token class-name"><span class="token namespace">catRepository<span class="token punctuation">.</span></span>CatRepository</span> catRepositoryMock<span class="token punctuation">;</span>  late <span class="token class-name"><span class="token namespace">cat<span class="token punctuation">.</span></span>Cat</span> catMock<span class="token punctuation">;</span>  <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    catRepositoryMock <span class="token operator">=</span> <span class="token class-name">MockRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    catMock <span class="token operator">=</span> <span class="token class-name">MockCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'initial state of the bloc is [RandomCatStatus.initial]'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>      <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以开始进行我们的bloc测试。<br>当品种列表为空时，执行RandomCatStatus.loading和RandomCatStatus.emptyBreeds。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>  <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.emptyBreeds] '</span></span>  <span class="token string-literal"><span class="token string">'state when cat.breeds are empty'</span></span><span class="token punctuation">,</span>  setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">.</span>breeds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>  act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>当品种列表为空时，发出RandomCatStatus.loading和RandomCatStatus.emptyBreeds。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>  <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.emptyBreeds] '</span></span>  <span class="token string-literal"><span class="token string">'state when cat.breeds are null'</span></span><span class="token punctuation">,</span>  setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">.</span>breeds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>  act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>    <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>当响应正确且猫的数据包含品类时，发出RandomCatStatus.loading和RandomCatStatus.success。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>     <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.success]'</span></span>     <span class="token string-literal"><span class="token string">' with a copyWith of other cat'</span></span>     <span class="token string-literal"><span class="token string">'state for successful'</span></span><span class="token punctuation">,</span>     setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">.</span>breeds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>         <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>           <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token class-name">Breed</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'1'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>     act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>       <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> cat<span class="token punctuation">:</span> catMock<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>当不成功时发出RandomCatStatus.loading和RandomCatStatus.failation。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>  <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.failure] '</span></span>  <span class="token string-literal"><span class="token string">'when unsuccessful'</span></span><span class="token punctuation">,</span>  setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>    catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>  act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看看全部的random_cat_bloc_test类!</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:bloc_test/bloc_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/cat_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/model/cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mocktail/mocktail.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MockRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name">CatRepository</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MockCat</span> <span class="token keyword">extends</span> <span class="token class-name">Mock</span> <span class="token keyword">implements</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatBloc'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    late <span class="token class-name">CatRepository</span> catRepositoryMock<span class="token punctuation">;</span>    late <span class="token class-name">Cat</span> catMock<span class="token punctuation">;</span>    <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      catRepositoryMock <span class="token operator">=</span> <span class="token class-name">MockRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      catMock <span class="token operator">=</span> <span class="token class-name">MockCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'initial state of the bloc is [RandomCatStatus.initial]'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>          <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.emptyBreeds] '</span></span>      <span class="token string-literal"><span class="token string">'state when cat.breeds are empty'</span></span><span class="token punctuation">,</span>      setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">.</span>breeds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>      act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.emptyBreeds] '</span></span>      <span class="token string-literal"><span class="token string">'state when cat.breeds are null'</span></span><span class="token punctuation">,</span>      setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">.</span>breeds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>      act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.success]'</span></span>      <span class="token string-literal"><span class="token string">' with a copyWith of other cat'</span></span>      <span class="token string-literal"><span class="token string">'state for successful'</span></span><span class="token punctuation">,</span>      setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">.</span>breeds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>          <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>            <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token class-name">Breed</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'1'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catMock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>      act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> cat<span class="token punctuation">:</span> catMock<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    blocTest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      <span class="token string-literal"><span class="token string">'emits [RandomCatStatus.loading, RandomCatStatus.failure] '</span></span>      <span class="token string-literal"><span class="token string">'when unsuccessful'</span></span><span class="token punctuation">,</span>      setUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> catRepositoryMock<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token class-name">ErrorSearchingCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      build<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>catRepository<span class="token punctuation">:</span> catRepositoryMock<span class="token punctuation">)</span><span class="token punctuation">,</span>      act<span class="token punctuation">:</span> <span class="token punctuation">(</span>bloc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> bloc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      expect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，你可以测试你的应用程序的状态和事件。<br>下面是random_cat_state_test.dart。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatStatusX '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'returns correct values for RandomCatStatus.initial'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isInitial<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isLoading<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isFailure<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isEmptyBreeds<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'returns correct values for RandomCatStatus.loading'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isInitial<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isLoading<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isFailure<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isEmptyBreeds<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'returns correct values for RandomCatStatus.isSuccess'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isInitial<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isLoading<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isFailure<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isEmptyBreeds<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'returns correct values for RandomCatStatus.isFailure'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isInitial<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isLoading<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isFailure<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isEmptyBreeds<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'returns correct values for RandomCatStatus.isEmptyBreeds'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isInitial<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isLoading<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isFailure<span class="token punctuation">,</span> isFalse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isEmptyBreeds<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是random_cat_event_test.dart。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatEvent'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'supports comparisons'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">RandomCatEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'SearchRandomCat'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'supports comparisons'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有测试都通过了!</p><img src="/How-can-I-start-with-Flutter-Testing/11.png" class="" title="示意图 width=400"><p>现在我们已经完成了单元测试和模块测试的部分，是时候开始进行Widget测试了!</p><h3 id="Widget测试"><a href="#Widget测试" class="headerlink" title="Widget测试"></a>Widget测试</h3><p>这种测试是超级酷的，你可以测试用户与应用程序的可能互动，所以你可以完全控制你的应用程序的所有状态。<br>在这种情况下，Widget测试将是很容易的。✌️<br>让我们开始吧!<br>首先，我们需要测试我们的random_cat_page。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/pages/bloc/random_cat_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/pages/random_cat_layout.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/cat_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/repository/service.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RandomCatPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">RandomCatPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">RepositoryProvider</span><span class="token punctuation">(</span>      create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">CatRepository</span><span class="token punctuation">(</span>service<span class="token punctuation">:</span> <span class="token class-name">CatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">BlocProvider</span><span class="token punctuation">(</span>        create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RandomCatBloc</span><span class="token punctuation">(</span>          catRepository<span class="token punctuation">:</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CatRepository</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，我们需要创建假的类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatState</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatState</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatEvent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们需要在setUpAll方法中注册。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">RandomCatEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeRandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下，我们只需要测试页面的渲染是否正常。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatPage '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'renders RandomCatPage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>          home<span class="token punctuation">:</span> <span class="token class-name">RandomCatPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">RandomCatPage</span><span class="token punctuation">)</span><span class="token punctuation">,</span> findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看下完整的程序</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mocktail/mocktail.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:network_image_mock/network_image_mock.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatState</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatState</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatEvent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">RandomCatEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeRandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatPage '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'renders RandomCatPage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>            home<span class="token punctuation">:</span> <span class="token class-name">RandomCatPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">RandomCatPage</span><span class="token punctuation">)</span><span class="token punctuation">,</span> findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有测试都通过了!</p><img src="/How-can-I-start-with-Flutter-Testing/12.png" class="" title="示意图 width=400"><p>下一个我们需要测试的类是：Random_cat_layout_test.dart。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'../random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'bloc/random_cat_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RandomCatLayout</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      listener<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isEmptyBreeds<span class="token punctuation">)</span> <span class="token punctuation">{</span>          context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isFailure<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">FailureRandomCatView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isInitial<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">InitialRandomCatView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">LoadingView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">SuccessRandomCatView</span><span class="token punctuation">(</span>            cat<span class="token punctuation">:</span> state<span class="token punctuation">.</span>cat<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我根据视图的状态创建了不同类型的视图。要测试这些视图，最重要的部分是Key。<br>按状态划分的视图。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'../../../utils/const_keys_app.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token comment">// Initial</span><span class="token keyword">class</span> <span class="token class-name">InitialRandomCatView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">InitialRandomCatView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>      key<span class="token punctuation">:</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatInitial</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'No information available'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Loading</span><span class="token keyword">class</span> <span class="token class-name">LoadingView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">LoadingView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>      key<span class="token punctuation">:</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.CatLoading</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Failure</span><span class="token keyword">class</span> <span class="token class-name">FailureRandomCatView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">FailureRandomCatView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>      key<span class="token punctuation">:</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatFailure</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Something was wrong'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Success</span><span class="token keyword">class</span> <span class="token class-name">SuccessRandomCatView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">SuccessRandomCatView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>cat<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>      key<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatSuccess</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token class-name">Padding</span><span class="token punctuation">(</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">28.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">CatCard</span><span class="token punctuation">(</span>            key<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatCardKey</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            cat<span class="token punctuation">:</span> cat<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">const</span> <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Padding</span><span class="token punctuation">(</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>right<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">Align</span><span class="token punctuation">(</span>            alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>bottomRight<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span>              key<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatFabButtonKey</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>refresh<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类有更多的测试要做。这里我们有不同的状态和一个按钮的交互，所以让我们开始吧。<br>首先，我们需要模拟和假的类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MockRandomCatBloc</span> <span class="token keyword">extends</span> <span class="token class-name">MockBloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatEvent</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">RandomCatBloc</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatState</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatState</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatEvent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们需要创建和初始化变量。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">late <span class="token class-name">MockRandomCatBloc</span> blocCat<span class="token punctuation">;</span><span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Register the event and the state</span>  <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeRandomCatEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeRandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  blocCat <span class="token operator">=</span> <span class="token class-name">MockRandomCatBloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要测试的第一件事是视图的可能状态，为了做到这一点，我们要创建一个特定的组，然后在里面，我们可以测试所有情况。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatPage states '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>当状态为RandomCatStatus.failure时，渲染视图FailureRandomCatView。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render FailureRandomCatView when state is [RandomCatStatus.failure]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatFailure</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>当状态为RandomCatStatus.loading时，渲染视图LoadingView。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render LoadingView when state is [RandomCatStatus.loading]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>          find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.CatLoading</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>当状态为RandomCatStatus.success时，渲染视图SuccessRandomCatView。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render SuccessRandomCatView when state is [RandomCatStatus.success]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatSuccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>当状态为RandomCatStatus.initial时，渲染视图InitialRandomCatView。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render InitialRandomCatView when state is [RandomCatStatus.initial]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatInitial</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>酷😎! 现在我们已经测试了视图的所有可能状态，我们可以开始下一步了。测试按钮的点击!<br>当按钮被点击的时候，调用事件SearchRandomCat。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Click on FAB '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'call to bloc to get next cat'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>     <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>       <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>       <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>         <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>           lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>           create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>           child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>             home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span><span class="token punctuation">,</span> findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">pumpAndSettle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们需要控制猫的品种为空的时候。<br>我们在BlocConsumer里面监听，所以如果发生这种情况，我们需要再次调用SearchRandomCat事件，为了测试，我们需要做以下工作。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Call to SearchRandomCat on BlocListener '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'1'</span></span><span class="token punctuation">,</span> breeds<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'www'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Call to event when breeds is empty'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">whenListen</span><span class="token punctuation">(</span>        blocCat<span class="token punctuation">,</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>          <span class="token punctuation">[</span>            <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">,</span> cat<span class="token punctuation">:</span> cat<span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">,</span> cat<span class="token punctuation">:</span> cat<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看完整的程序</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:bloc_test/bloc_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/ui/random_cat/random_cat.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:catsapp/utils/const_keys_app.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_test/flutter_test.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mocktail/mocktail.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:network_image_mock/network_image_mock.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MockRandomCatBloc</span> <span class="token keyword">extends</span> <span class="token class-name">MockBloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatEvent</span><span class="token punctuation">,</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">RandomCatBloc</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatState</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatState</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeRandomCatEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Fake</span> <span class="token keyword">implements</span> <span class="token class-name">RandomCatEvent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  late <span class="token class-name">MockRandomCatBloc</span> blocCat<span class="token punctuation">;</span>  <span class="token function">setUpAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Register the event and the state</span>    <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeRandomCatEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerFallbackValue</span><span class="token punctuation">(</span><span class="token class-name">FakeRandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    blocCat <span class="token operator">=</span> <span class="token class-name">MockRandomCatBloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'RandomCatPage states '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render FailureRandomCatView when state is [RandomCatStatus.failure]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>failure<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatFailure</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'render LoadingView when state is [RandomCatStatus.loading]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>          find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.CatLoading</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render SuccessRandomCatView when state is [RandomCatStatus.success]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatSuccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span>        <span class="token string-literal"><span class="token string">'render InitialRandomCatView when state is [RandomCatStatus.initial]'</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">ConstWidgetKeysApp.RandomCatInitial</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Click on FAB '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'call to bloc to get next cat'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span><span class="token punctuation">,</span> findsOneWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">pumpAndSettle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Call to SearchRandomCat on BlocListener '</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'1'</span></span><span class="token punctuation">,</span> breeds<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'www'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Call to event when breeds is empty'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token function">whenListen</span><span class="token punctuation">(</span>        blocCat<span class="token punctuation">,</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>          <span class="token punctuation">[</span>            <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">,</span> cat<span class="token punctuation">:</span> cat<span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> <span class="token class-name">RandomCatState</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">RandomCatStatus</span><span class="token punctuation">.</span>emptyBreeds<span class="token punctuation">,</span> cat<span class="token punctuation">:</span> cat<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">mockNetworkImagesFor</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span>          <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomCatBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>            lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>              home<span class="token punctuation">:</span> <span class="token class-name">RandomCatLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> blocCat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SearchRandomCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有测试都通过了!</p><img src="/How-can-I-start-with-Flutter-Testing/13.png" class="" title="示意图 width=400"><p>我们要做的最后一步是检查保险。你有不同的选择。</p><ul><li>在终端上运行flutter测试–覆盖率。</li><li>安装LCOV以实现HTML的可视化<br>我使用了第二个选项，所以我将告诉你如何安装和使用它。(mac的安装)。</li><li>brew install lcov</li><li>flutter test — coverage</li><li>genhtml coverage/lcov.info -o coverage/html<br>最后，你将会看到我们的应用程序100%的覆盖率🧪✌️。</li></ul><img src="/How-can-I-start-with-Flutter-Testing/14.png" class="" title="示意图 width=400"><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我认为一开始学习测试可能会很困难和令人沮丧，但你应该学习它，因为如果你想建立好的应用程序，你需要了解测试的工作原理。在我第一次接触它的时候，我解决了很多bug，如果我没有做测试，这些bug就会存在。<br>所以……请做测试!</p><p>以上所有源代码，您可以移步：<a href="https://github.com/reasonpun/my_100_goals/tree/main/goals_01">https://github.com/reasonpun/my_100_goals/tree/main/goals_01</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解 Flutter 生命周期</title>
      <link href="/Deep-Drive-into-Flutter-Lifecycle.html"/>
      <url>/Deep-Drive-into-Flutter-Lifecycle.html</url>
      
        <content type="html"><![CDATA[<img src="/Deep-Drive-into-Flutter-Lifecycle/1.png" class="" title="示意图 width=400"><p>在这篇文章中，我们将讨论flutter的生命周期，每个人都知道生命周期在我们生活中是一个非常重要的存在，对于编码来说也是如此。</p><span id="more"></span><p>在移动开发中，每一个移动应用都有一些事情，他们正在一个一个地做……<br>就像我们打开我们的应用程序，所以首先他们正在创建应用程序的设计，一步一步地根据情况来处理。<br>就像你看到的任何应用程序Instagram或Twitter，如果你打开这些，首先他们从服务器上加载数据，然后根据从服务器上加载的数据建立UI，然后根据你的使用情况和应用程序想要显示的数据，我想你明白我想要描述什么。</p><p>So!</p><p>让我们进入正题，在每一个flutter应用程序中都有一些生命周期的方法，这些方法根据情况调用。<br>在flutter中，所有的东西都是一个widget，主要是flutter应用从两个状态开始，StatelessWidget和StatefullWidget。</p><img src="/Deep-Drive-into-Flutter-Lifecycle/2.png" class="" title="示意图 width=400"><p>如果你的类扩展自<strong>StatelessWidget</strong>，意味着这个页面只是在里面建立了widget的设计，而不是更新这个。<br>如果你的类扩展自<strong>StatefulWidget</strong>，意味着这个页面将根据你的要求进行更新。<br>这是一个首次构建，然后通过你的操作来更新。<br>让我们现在开始讨论StatefulWidget的生命周期。</p><img src="/Deep-Drive-into-Flutter-Lifecycle/3.jpeg" class="" title="示意图 width=400"><ul><li>createState()。当框架被指示建立一个有状态的Widget时，它会立即调用createState()。</li></ul><p>它在树中给定的位置为这个部件创建可变的状态。<br>子类应该覆盖这个方法，以返回其相关的State子类的一个新创建的实例。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">_HomePageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_HomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>框架可以在StatefulWidget的生命周期内多次调用这个方法。例如，如果该部件被插入到树的多个位置，框架将为每个位置创建一个单独的State对象。<br>同样的，如果widget从树上被移除，后来又被插入树中，框架将再次调用createState来创建一个新的State对象，从而简化State对象的生命周期。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>initState()。<br> 这是创建widget时调用的第一个方法（在类的构造函数之后）initState被调用一次，而且只有一次。它必须调用super.initState()。</li></ul><p>当这个对象被插入到树中时，它就会被调用。<br>框架将为其创建的每个State对象精确地调用此方法一次。<br>覆盖此方法以执行初始化，这取决于此对象被插入树中的位置（即上下文）或用于配置此对象的部件（即部件）。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>didChangeDependencies()。这个方法在小部件第一次被建立时，在initState之后立即被调用。</li></ul><p>当这个State对象的依赖关系发生变化时，它就会被调用。<br>例如，如果之前的构建调用引用了一个后来发生变化的InheritedWidget，框架会调用这个方法来通知这个对象的变化。<br>这个方法也会在initState之后立即被调用。从这个方法调用BuildContext.dependOnInheritedWidgetOfExactType是安全的。<br>子类很少覆盖这个方法，因为框架总是在依赖性变化后调用构建。一些子类确实覆盖了这个方法，因为他们需要在依赖关系发生变化时做一些昂贵的工作（例如，网络获取），而这些工作如果在每次构建时都做的话，就太昂贵了。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>build()。这个方法经常被调用。它是必须的，它必须返回一个Widget。</li></ul><p>它描述的是这个Widget所代表的用户界面的部分。<br>框架在许多不同的情况下调用这个方法。比如说。</p><ul><li>在调用initState之后。</li><li>在调用didUpdateWidget之后。</li><li>在收到对setState的调用之后。</li><li>在这个状态对象的依赖关系发生变化后（例如，由之前的构建所引用的InheritedWidget发生变化）。</li><li>在调用deactivate之后，然后在另一个位置将状态对象重新插入树中。</li></ul><p>这个方法有可能在每一帧中被调用，除了构建一个widget之外，应该不会有任何副作用。<br>框架用这个方法返回的widget替换这个widget下面的子树，要么更新现有的子树，要么移除子树并创建一个新的子树，这取决于这个方法返回的widget是否可以更新现有子树的根，这由调用Widget.canUpdate决定。<br>典型的实现是返回一个新创建的小部件，这些小部件是用这个小部件的构造函数、给定的BuildContext和这个State对象的内部状态的信息配置的。<br>给定的BuildContext包含关于该部件在树中的位置的信息，该部件正在被构建。例如，该上下文提供了树中这个位置的继承部件的集合。BuildContext参数总是与这个State对象的context属性相同，并且在这个对象的生命周期内保持不变。BuildContext参数在这里是多余的，以便这个方法与WidgetBuilder的签名相匹配。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span><span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">ProductSquare</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>didUpdateWidget(): 如果父部件发生了变化，不得不重建这个部件（因为它需要给它不同的数据），但它被重建时的运行时类型是一样的，那么这个方法就会被调用。<br> 这是因为Flutter正在重新使用状态，这是长期的。在这种情况下，你可能想再次初始化一些数据，就像你在initState中一样。</li></ul><p>每当widget的配置发生变化时，它就会被调用。<br>如果父 widget 重建并请求更新树中的这个位置以显示具有相同 runtimeType 和 Widget.key 的新 widget，框架将更新这个 State 对象的 widget 属性以引用新的 widget，然后用以前的 widget 作为参数调用此方法。<br>覆盖这个方法，以便在widget发生变化时做出反应（例如，启动隐式动画）。<br>框架总是在调用didUpdateWidget后调用build，这意味着在didUpdateWidget中对setState的任何调用都是多余的。<br>如果一个状态的构建方法依赖于一个本身可以改变状态的对象，例如ChangeNotifier或Stream，或者其他可以订阅接收通知的对象，那么一定要在initState、didUpdateWidget和dispose中正确订阅和取消订阅。<br>在initState中，订阅该对象。<br>在didUpdateWidget中，如果更新的widget配置需要更换对象，则取消订阅旧的对象并订阅新的对象。<br>在dispose中，取消对该对象的订阅。<br>这个方法的实现应该以对继承方法的调用开始，如super.didUpdateWidget(oldWidget)。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span><span class="token keyword">void</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>deactivate()。当State被从树中移除时，Deactivate被调用，但在当前帧变化完成之前，它可能被重新插入。这个方法的存在基本上是因为State对象可以从树上的一个点移动到另一个点。</li></ul><p>当这个对象从树上被移除时被调用。</p><p>每当框架将这个状态对象从树中移除时，就会调用这个方法。在某些情况下，框架会将State对象重新插入到树的另一部分（例如，如果由于使用了GlobalKey，包含这个State对象的子树从树的一个位置嫁接到另一个位置）。<br>如果发生这种情况，框架将调用激活，让状态对象有机会重新获得它在停用时释放的任何资源。然后它还会调用build，让State对象有机会适应它在树中的新位置。<br>如果框架确实重新插入了这个子树，它将在子树被从树中移除的动画帧结束前这样做。</p><p>由于这个原因，State对象可以推迟释放大部分资源，直到框架调用它们的处置方法。<br>子类应该覆盖这个方法来清理这个对象和树中其他元素之间的任何链接（例如，如果你为祖先提供了一个指向子孙的RenderObject的指针）。<br>这个方法的实现应该以对继承方法的调用结束，如super.deactivate()。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span><span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dispose(): dispose()在State对象被移除时被调用，这是永久性的。这个方法是你应该取消订阅和取消所有的动画、流等等。</li></ul><p>当这个对象被永久地从树上删除时，它被调用。<br>当这个状态对象永远不会再建立时，框架会调用这个方法。在框架调用dispose后，State对象被认为是未被挂载的，挂载的属性为false。<br>在这个时候调用setState是一个错误。生命周期的这一阶段是终结的：没有办法重新安装一个已经被处置的状态对象。<br>子类应该覆盖这个方法来释放这个对象所保留的任何资源（例如，停止任何活动的动画）。</p><p>如果一个State的构建方法依赖于一个本身可以改变状态的对象，例如ChangeNotifier或Stream，或者其他可以订阅接收通知的对象，那么一定要在initState、didUpdateWidget和dispose中正确订阅和取消订阅。</p><p>在initState中，订阅该对象。<br>在didUpdateWidget中，如果更新的widget配置需要更换对象，则取消订阅旧的对象并订阅新的对象。</p><p>在dispose中，取消对该对象的订阅。<br>这个方法的实现应该以对继承方法的调用结束，如super.dispose()。</p><p>所以，我们讨论了关于有状态生命周期方法的所有要点。</p><p>但是，应用程序的生命周期呢?<br>意味着如果你打开任何页面而不做任何动作，或者当屏幕对用户可见时，哪个函数会被调用，对于安卓或IOS来说，让我们看看。</p><p><strong>AppLifecycleState（应用程序是可见的，并对用户的输入作出反应）。</strong></p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@override</span><span class="token keyword">void</span> <span class="token function">didChangeAppLifecycleState</span><span class="token punctuation">(</span><span class="token class-name">AppLifecycleState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>inactive<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">else</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">else</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>resumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">else</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>detached<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Deep-Drive-into-Flutter-Lifecycle/4.jpeg" class="" title="示意图 width=400"><ul><li>inactive - 应用程序处于非活动状态，不接受用户输入。它只适用于iOS。应用程序处于非活动状态，不接受用户输入。</li></ul><p>在iOS上，该状态对应于应用程序或Flutter主视图在前台运行的处于前台非活动状态。<br>应用程序在以下情况下会过渡到这种状态电话，进入应用切换器或控制中心时响应TouchID请求，或<br>切换器或控制中心时，或当UIViewController托管的Flutter应用程序正在过渡。<br>在安卓系统中，这相当于一个应用程序或Flutter主机视图运行在处于前台非活动状态。应用程序在以下情况下会过渡到这种状态另一个活动被关注，如分屏应用、电话。</p><p>一个画中画应用程序，一个系统对话框，或其他窗口。处于这种状态的应用程序应该认为它们可能在任何时候被暂停。</p><ul><li>paused - 应用程序当前对用户不可见，对用户输入没有反应，并且在后台运行。<br>当应用程序处于这种状态时，引擎将不调用PlatformDispatcher.onBeginFrame和PlatformDispatcher.onDrawFrame的回调。</li><li>resumed - 应用程序是可见的，并对用户的输入做出响应。</li><li>suspending - 应用程序将被暂时中止。 仅适用于Android detached</li><li>detached - 应用程序仍然托管在flutter引擎上，但与任何主机视图分离。当应用程序处于这种状态时，引擎是在没有视图的情况下运行的。它可以是在引擎首次初始化时正在附加一个视图，也可以是在视图因导航器弹出而被销毁后。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Lifecycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter &amp; Flame — 第 1 步：创建您的游戏</title>
      <link href="/Flutter-Flame-%E2%80%94Step-1-Create-your-game.html"/>
      <url>/Flutter-Flame-%E2%80%94Step-1-Create-your-game.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/1.jpeg" class="" title="第一次运行新项目 width=400"><p>从一个想法到一个商店就绪的游戏，所有这些都是用 Flutter 和 Flame 制作的。 加入我们本系列的第一部分，学习如何使用 Flutter 建立一个 Flame 项目并在屏幕上绘制你的第一个元素。</p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这是创建从零到商店就绪状态的手机游戏的系列文章中的第一篇。 我将从一个没有代码的想法开始，到一个准备好发布的手机游戏应用程序。<br>为确保您可以跟进，让我推荐以下几点：</p><ul><li>至少为 Android 平台安装和配置 Flutter SDK</li><li>您选择的 IDE，我将使用 Visual Studio Code</li><li>Flutter基础知识及其核心概念</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>如果您需要设置 Flutter，请按照以下链接为您选择的平台进行配置（我尽可能选择 Linux）：</p><p><a href="https://flutter.dev/docs/get-started/install">https://flutter.dev/docs/get-started/install</a></p><p>上述指南还包括 IDE 的安装，我将再次使用 Visual Studio Code。 如果您想进一步阅读，请查看以下 Microsoft 的链接：</p><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h3 id="Flame-Engine"><a href="#Flame-Engine" class="headerlink" title="Flame Engine"></a>Flame Engine</h3><img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/2.png" class="" title="第一次运行新项目 width=400"><p>完整的教程将使用火焰引擎和相关包。<br>Flame Engine 是一个用 Dart 为 Flutter 编写的开源 2D 游戏引擎，支持 Web 和移动平台以及桌面。</p><p><a href="https://flame-engine.org/">https://flame-engine.org/</a></p><p>Flame 提供了多种元素来构建您的游戏——如果需要，该工具集甚至可以使用物理引擎进行扩展。<br>要获得有关所有已发布包的概述，请查看以下内容：</p><p><a href="https://pub.dev/publishers/flame-engine.org/packages">https://pub.dev/publishers/flame-engine.org/packages</a></p><p>首先，我们将单独使用 Flame 包。</p><p>Moon Lander——手机上的复古乐趣</p><img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/3.jpeg" class="" title="第一次运行新项目 width=400"><p>每个游戏都基于一个概念或想法，我会选择 Lunar Lander 类型的游戏。<br>如果这是您第一次听说它，请查看下面链接的 Wikipedia 文章。 但为了简短起见：</p><ul><li>您需要将宇宙飞船安全降落在另一个行星或月球的表面</li><li>有限的燃料和重力使您的着陆成为挑战</li><li>你必须在燃料耗尽之前选择一个合适的着陆点</li></ul><p><a href="https://en.wikipedia.org/wiki/Lunar_Lander_%28video_game_genre%29">https://en.wikipedia.org/wiki/Lunar_Lander_%28video_game_genre%29</a></p><p>早期的游戏是用简单的绘图构建的（我真的很喜欢简单的风格）。<br>但是，我们将使用精灵（绘制的图像）来展示火焰要完成的工作。<br>如果您想了解一些复古的东西，请查看这个很酷的实现：<br><a href="http://moonlander.seb.ly/">http://moonlander.seb.ly/</a></p><h3 id="来吧，让我们开始编码！"><a href="#来吧，让我们开始编码！" class="headerlink" title="来吧，让我们开始编码！"></a>来吧，让我们开始编码！</h3><img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/4.jpeg" class="" title="第一次运行新项目 width=400"><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><p>让我们通过运行以下命令来生成一个新的 Flutter 项目：</p><pre class="line-numbers language-none"><code class="language-none">flutter create moonlander<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Flutter 将创建包含所有必需文件和配置的项目结构，这还包括一个示例屏幕（著名的计数器应用程序）。<br>在我们处理任何代码文件（*.dart）之前，让我们在我们选择的代码编辑器中打开文件夹并将我们的依赖项添加到 pubspec.yaml 文件中：</p><pre class="line-numbers language-none"><code class="language-none">flame: ^1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依赖项的部分应该大致如下所示，请注意“flutter create”工具将添加一些进一步的行和注释，你现在可以忽略它：</p><pre class="line-numbers language-none"><code class="language-none">dependencies:    flutter:        sdk: flutter    flame: ^1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为确保您确实下载了新添加的 Flame 包，只需在控制台中运行：</p><pre class="line-numbers language-none"><code class="language-none">flutter pub get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="快速、干净的代码"><a href="#快速、干净的代码" class="headerlink" title="快速、干净的代码"></a>快速、干净的代码</h3><img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/5.jpeg" class="" title="第一次运行新项目 width=400"><p>如果您从 GitHub 下载代码，您可能会在 pubspec.yaml 文件的 dev_dependencies 部分下发现另一个依赖项，名为：</p><pre class="line-numbers language-none"><code class="language-none">very_good_analysis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此软件包可帮助您根据准则验证代码，使其干净并遵循许多项目共享的标准。<br>你会发现多个可用于 Flutter（和 Dart）的“linter”项目：</p><p><a href="https://pub.dev/packages?q=lint">https://pub.dev/packages?q=lint</a></p><p>Dart 项目中还有一个官方的：</p><p><a href="https://pub.dev/packages/lints">https://pub.dev/packages/lints</a></p><p>您不是必须要在项目中使用 linter，它不会为您的游戏添加任何功能，但它支持您保持代码干净并符合社区标准。</p><h3 id="回到游戏开发"><a href="#回到游戏开发" class="headerlink" title="回到游戏开发"></a>回到游戏开发</h3><p>如果你现在就开始项目，你仍然会有前面提到的计数器应用程序示例。 让我们把它改成我们自己游戏的开始。<br>将以下内容复制到您的 main.dart 文件中。<br>不用担心，您会遇到一些错误，我们会立即逐步修复。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:async'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flame/flame.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flame/game.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:moonlander/components/rocket_component.dart'</span></span><span class="token punctuation">;</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token class-name">Flame</span><span class="token punctuation">.</span>device<span class="token punctuation">.</span><span class="token function">setLandscape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> game <span class="token operator">=</span> <span class="token class-name">MoonlanderGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">GameWidget</span><span class="token punctuation">(</span>game<span class="token punctuation">:</span> game<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/// This class encapulates the whole game.</span><span class="token keyword">class</span> <span class="token class-name">MoonlanderGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">HasCollidables</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">unawaited</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">RocketComponent</span><span class="token punctuation">(</span>position<span class="token punctuation">:</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-14-行"><a href="#9-14-行" class="headerlink" title="9-14 行"></a>9-14 行</h4><p>我们通过调用来确保 Flutter 已准备就绪：</p><pre class="line-numbers language-none"><code class="language-none">WidgetsFlutterBinding.ensureInitialized();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成后，我们通知 Flame，我们的游戏应该以横向模式运行。 这是使用内置的火焰设备类完成的：</p><pre class="line-numbers language-none"><code class="language-none">await Flame.device.setLandscape();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Flame 在这个实用程序类中提供了更多功能和帮助程序，如果您想进一步阅读，请查看下面的文档。</p><p><a href="https://docs.flame-engine.org/1.0.0-releasecandidate.16/util.html">https://docs.flame-engine.org/1.0.0-releasecandidate.16/util.html</a></p><p>最后两行创建我们的游戏并将其提供给 GameWidget。 GameWidget 将确保我们在游戏中所做的任何事情都呈现在屏幕上，它提供了更多有用的方法，我们将在稍后探索。</p><h4 id="第-18–24-行"><a href="#第-18–24-行" class="headerlink" title="第 18–24 行"></a>第 18–24 行</h4><p>这 6 行是目前完整的游戏，我们创建一个新类并扩展 FlameGame 和 mixin HasCollidables。 在游戏内部，我们重写了 onLoad 函数来为游戏添加一个组件。</p><p>与任何其他 Flutter App 一样，您的游戏由单一元素构建：组件（您可以说它们是游戏的小部件）。 onLoad 事件只是众多生命周期事件之一，它在游戏启动期间被调用一次。<br>一般而言，创建和加载您稍后将使用的内容是一件好事。 不用担心，我们将在下一篇文章中更深入地介绍所有这些元素，目前，这就是我们需要了解的全部内容。</p><h3 id="添加您的第一个组件"><a href="#添加您的第一个组件" class="headerlink" title="添加您的第一个组件"></a>添加您的第一个组件</h3><p>创建一个名为 components 的目录并添加一个包含以下内容的新文件：rocket_component.dart：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flame/components.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flame/extensions.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flame/geometry.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token comment">///</span><span class="token keyword">class</span> <span class="token class-name">RocketComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Hitbox</span><span class="token punctuation">,</span> <span class="token class-name">Collidable</span> <span class="token punctuation">{</span>  <span class="token comment">/// Create a new Rocket component at the given [position].</span>  <span class="token class-name">RocketComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token class-name">Vector2</span> position<span class="token punctuation">,</span>    required <span class="token class-name">Vector2</span> size<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>position<span class="token punctuation">:</span> position<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addHitbox</span><span class="token punctuation">(</span><span class="token class-name">HitboxRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Temporary render item</span>    <span class="token function">renderHitboxes</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> paint<span class="token punctuation">:</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rocket 组件将是我们的播放器对象，它将被绘制在屏幕上并需要与其他元素交互。 您在屏幕上绘制的所有内容都将以给定大小绘制在给定位置。<br>Flame 提供 PositionComponent 类来处理绘图。<br>为了启用交互，在我们的例子中是碰撞，我们将 Hitbox 和 Collidable Mixin 添加到组件中。<br>我们将在下一篇文章中详细介绍，目前，我们只需要大致了解类和 mixin 的用途。</p><h3 id="组件也有生命周期"><a href="#组件也有生命周期" class="headerlink" title="组件也有生命周期"></a>组件也有生命周期</h3><p>与我们的主游戏类类似，每个组件都有一个生命周期。 我们正在使用 onLoad 事件来实现与我们的游戏相同的效果，让一切准备就绪。<br>我们通知 Flame 我们想要一个围绕我们元素的矩形碰撞框（第 17 行）。<br>这是确保以后正确碰撞所必需的。<br>为了在屏幕上显示某些内容，我们在 render 方法中渲染 hitbox。<br>默认情况下，hitbox 不是游戏的可见部分，出于调试和测试的原因，绘制它们可能会有所帮助。</p><h3 id="起飞"><a href="#起飞" class="headerlink" title="起飞"></a>起飞</h3><p>如果您启动应用程序，您应该会在手机上看到以下结果：</p><img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/6.png" class="" title="第一次运行新项目 width=400"><p>恭喜，您成功地使用 Flame 和 Flutter 启动了游戏！<br>这还不算多，但我们正朝着正确的方向前进 :)<br>白色矩形是我们的火箭组件的命中框，绘制到屏幕的中心。<br>中心是通过将可用屏幕大小除以 2 来计算的（在 main.dart 中）：</p><pre class="line-numbers language-none"><code class="language-none">RocketComponent(position: size / 2, size: Vector2.all(20))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hitbox 可以有不同的形状，我们决定使用矩形，这就是为什么 Flames 内置方法 (renderHitboxes) 会绘制一个。</p><p>玩转 Paint() 对象，也许你可以改变颜色，或者只是在矩形的外部绘制但不填充它。 这可能对以后有用；）</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><img src="/Flutter-Flame-%E2%80%94Step-1-Create-your-game/7.jpeg" class="" title="第一次运行新项目 width=400"><p>您已经使用 Flutter 创建了自己的 Flame 游戏项目的基础。<br>我们概述了我们游戏的想法以及我们想要创建的内容，并了解到 Flame 游戏也是小部件。<br>每个游戏都由组件构建并遵循生命周期事件。<br>游戏组件可以相互交互，并以给定的位置和大小绘制在屏幕上。<br>除了游戏开发，我们对 linter 有一个侧面的看法，可以帮助您生成适用于任何即将出现的 Flutter 项目的干净且可共享的代码。</p><h3 id="下一步是什么？"><a href="#下一步是什么？" class="headerlink" title="下一步是什么？"></a>下一步是什么？</h3><p>在下一篇文章中，我们将介绍有关游戏生命周期的更多内容，并了解渲染和（尚未显示的）更新功能背后的一些含义。<br>随着第二篇文章的结束，我们将有一个坚实的基础开始为我们的小火箭组件创造一个危险的环境:)</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Flame </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用消息队列、Spring Boot 和 Kubernetes 扩展微服务</title>
      <link href="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes.html"/>
      <url>/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes.html</url>
      
        <content type="html"><![CDATA[<img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/1.png" class="" title="示意图 width=400"><p>当您大规模设计和构建应用程序时，您将面临两个重大挑战：可扩展性和稳健性。<br>您应该设计您的服务，以便即使它受到间歇性重负载的影响，它也能继续可靠地运行。<br>以 Apple Store 为例。<br>每年都有数百万 Apple 客户预先注册购买新 iPhone。<br>数百万人同时购买一件商品。</p><span id="more"></span><p>如果您将 Apple 商店的流量描绘为随时间变化的每秒请求数，图表可能如下所示：</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/2.png" class="" title="示意图 width=400"><p>现在想象一下，你的任务是构建这样的应用程序。<br>您正在建立一个商店，用户可以在其中购买他们最喜欢的商品。<br>您构建一个微服务来呈现网页并提供静态资产。 您还构建了一个后端 REST API 来处理传入的请求。<br>您希望将这两个组件分开，因为使用相同的 REST API，您可以为网站和移动应用程序提供服务。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/3.gif" class="" title="示意图 width=400"><p>(开始想象)<br>今天是大日子，你的商店上线了。<br>您决定将应用程序扩展到四个前端实例和四个后端实例，因为您预测该网站将比平时更繁忙。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/4.gif" class="" title="示意图 width=400"><p>您开始收到越来越多的流量。<br>前端服务正在处理流量。 但是您注意到连接到数据库的后端正在努力跟上事务的数量。<br>不用担心，您可以将后端的副本数扩展到 8 个。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/5.gif" class="" title="示意图 width=400"><p>您收到的流量更多了，而后端却无法应对。<br>一些服务开始断开连接。 愤怒的客户开始联系你的客服抱（liao）怨（tian）。<br>您的后端越来越乏力，并且丢失了大量的连接。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/6.gif" class="" title="示意图 width=400"><p>你为此损失了一大笔钱，而你的客户则很不高兴。</p><p>您的应用程序并非设计为健壮和高可用性：</p><ul><li>前端和后端是紧密耦合的——事实上它不能处理没有后端的应用程序</li><li>前端和后端必须协同扩展——如果没有足够的后端，你可能会淹没在流量中</li><li>如果后端不可用，您将无法处理传入交易。</li></ul><p>交易损失就是收入损失。<br>所以，你不（zao）得（gan）不（ma）（qu le）重新设计你的架构：用队列解耦前端和后端。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/7.gif" class="" title="示意图 width=400"><p>前端将消息发布到队列，而后端同时处理一条待处理的消息。<br>新架构有一些明显的好处：</p><ul><li>如果后端不可用，则队列充当缓冲区</li><li>如果前端产生的消息多于后端可以处理的消息，则这些消息将缓冲在队列中</li><li>您可以独立于前端扩展后端 - 即您可以拥有数百个前端服务和一个后端实例<br>太好了，但是您如何构建这样的应用程序？<br>您如何设计可以处理数十万个请求的服务？<br>以及如何部署动态扩展的应用程序？<br>在深入了解部署和扩展的细节之前，让我们先关注应用程序。</li></ul><h2 id="编写-Spring-应用程序"><a href="#编写-Spring-应用程序" class="headerlink" title="编写 Spring 应用程序"></a>编写 Spring 应用程序</h2><p>该服务包含三个组件：前端、后端和消息代理。<br>前端是一个带有 Thymeleaf 模板引擎的简单 Spring Boot Web 应用程序。<br>后端是一个从队列中消费消息的工作人员。<br>由于 <a href="https://spring.io/guides/gs/messaging-jms/">Spring Boot 与 JMS 具有出色的集成</a>，您可以使用它来发送和接收异步消息。<br>您可以在 learnk8s/spring-boot-k8s-hpa 找到一个包含连接到 JMS 的前端和后端应用程序的示例项目。</p><blockquote><p>请注意，该应用程序是用 Java 10 编写的，以利用改进的 Docker 容器集成。</p></blockquote><p>只需要一个代码库，您可以将项目配置为作为前端或后端运行。<br>该应用程序具有：</p><ul><li>可以购买商品的主页</li><li>一个管理面板，您可以在其中检查队列中的消息数量</li><li>一个 /health 端点，用于在应用程序准备好接收流量时发出信号</li><li>一个 /submit 端点，它接收来自表单的提交并在队列中创建消息</li><li>一个 /metrics 端点，用于公开队列中待处理消息的数量（稍后会详细介绍）<br>该应用程序可以在两种模式下运行：<br><strong>作为前端</strong>，应用程序呈现人们可以购买商品的网页。</li></ul><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/8.png" class="" title="示意图 width=400"><p>作为Worker，应用程序等待队列中的消息并处理它们。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/9.png" class="" title="示意图 width=400"><blockquote><p>请注意，在示例项目中，处理是通过使用 Thread.sleep(5000) 等待五秒钟来模拟的。</p></blockquote><p>您可以通过更改 application.yaml 中的值来在任一模式下配置应用程序。</p><h2 id="让项目程序先空转一会儿"><a href="#让项目程序先空转一会儿" class="headerlink" title="让项目程序先空转一会儿"></a>让项目程序先空转一会儿</h2><p>默认情况下，应用程序作为前端和Worker启动。<br>您可以运行该应用程序，并且只要您有一个本地运行的 ActiveMQ 实例，您应该能够购买物品并让系统处理这些物品。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/10.gif" class="" title="示意图 width=400"><p>如果您检查日志，您应该会看到worker正在处理项目。<br>完美！ 编写 Spring Boot 应用程序很容易。<br>一个更有趣的主题是学习如何将 Spring Boot 连接到消息代理。</p><h2 id="使用-JMS-发送和接收消息"><a href="#使用-JMS-发送和接收消息" class="headerlink" title="使用 JMS 发送和接收消息"></a>使用 JMS 发送和接收消息</h2><p>Spring JMS（Java 消息服务）是一种使用标准协议发送和接收消息的强大机制。<br>如果您过去使用过 JDBC API，您应该会发现 JMS API 很熟悉，因为它的工作方式类似。<br>您可以与 JMS 一起使用的最流行的消息代理是 ActiveMQ — 一个开源消息传递服务器。<br>使用这两个组件，您可以使用熟悉的接口 (JMS) 将消息发布到队列 (ActiveMQ)，并使用相同的接口接收消息。<br>更棒的是，Spring Boot 与 JMS 具有出色的集成，因此您可以立即上手。<br>实际上，下面的短类封装了用于与队列交互的逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueService</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">QueueService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">JmsTemplate</span> jmsTemplate<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sending message='{}' to destination='{}'"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>    jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token keyword">instanceof</span> <span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ActiveMQTextMessage</span> textMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">)</span> message<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Processing task "</span> <span class="token operator">+</span> textMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Completed task "</span> <span class="token operator">+</span> textMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Message is not a text message "</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用 send 方法将消息发布到命名队列。<br>此外，Spring Boot 将为每条传入消息执行 onMessage 方法。<br>最后一块内容要说的是指示 Spring Boot 使用该类。<br>您可以通过在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#jms-annotated-programmatic-registration">Spring Boot 应用程序中注册侦听器</a>来在后台处理消息，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableJms</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootApplication</span> <span class="token keyword">implements</span> <span class="token class-name">JmsListenerConfigurer</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">QueueService</span> queueService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureJmsListeners</span><span class="token punctuation">(</span><span class="token class-name">JmsListenerEndpointRegistrar</span> registrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SimpleJmsListenerEndpoint</span> endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJmsListenerEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoint<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"myId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoint<span class="token punctuation">.</span><span class="token function">setDestination</span><span class="token punctuation">(</span><span class="token string">"queueName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoint<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span>queueService<span class="token punctuation">)</span><span class="token punctuation">;</span>    registrar<span class="token punctuation">.</span><span class="token function">registerEndpoint</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 id 是消费者的唯一标识符，destination 是队列的名称。<br>请注意您是如何用不到 40 行代码编写出可靠队列的。<br>你一定会爱上 Spring Boot。</p><h2 id="节省部署的所有时间都可以专注于编码"><a href="#节省部署的所有时间都可以专注于编码" class="headerlink" title="节省部署的所有时间都可以专注于编码"></a>节省部署的所有时间都可以专注于编码</h2><p>您验证了应用程序工作正常，终于到了部署它的时候了。<br>此时，您可以启动您的 VPS，安装 Tomcat，并花一些时间编写自定义脚本来测试、构建、打包和部署应用程序。<br>或者您可以写下您希望拥有的内容的描述：一个消息代理和两个使用负载均衡器部署的应用程序。<br>Kubernetes 等编排器可以读取您的清单并配置正确基础架构。<br>由于在基础架构上花费的时间越少，编码时间就越多，这次您将把应用程序部署到 Kubernetes。但在开始之前，您需要一个 Kubernetes 集群。<br>您可以注册 Google Cloud Platform 或 Azure，并使用 Kubernetes 提供的云提供商。或者，您可以在将应用程序迁移到云端之前在本地尝试 Kubernetes。<br>minikube 是一个打包成虚拟机的本地 Kubernetes 集群。如果您使用的是 Windows、Linux 和 Mac，那就太好了，因为创建一个集群需要五分钟。<br>您还应该安装 kubectl，用于连接到您的集群的客户端。<br>您可以从<a href="https://kubernetes.io/docs/tasks/tools/">官方文档</a>中找到有关如何安装 minikube 和 kubectl 的说明。</p><blockquote><p>如果您在 Windows 上运行，您应该查看我们关于如何安装 Kubernetes 和 Docker 的详细指南。</p></blockquote><p>您应该启动一个具有 8GB RAM 和一些额外配置的集群：</p><pre class="line-numbers language-none"><code class="language-none">minikube start \  --memory 8096 \  --extra-config=controller-manager.horizontal-pod-autoscaler-upscale-delay=1m \  --extra-config=controller-manager.horizontal-pod-autoscaler-downscale-delay=2m \  --extra-config=controller-manager.horizontal-pod-autoscaler-sync-period=10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意，如果您使用的是预先存在的 minikube 实例，您可以通过销毁它并重新创建它来调整 VM 的大小。 仅添加 –memory 8096 不会有任何效果。</p></blockquote><p>验证安装是否成功。<br>您应该会看到以表格形式列出的一些资源。<br>集群已准备就绪，也许您现在应该开始部署？<br>其实，还不可以 😂。<br>你还是需要先准备一些东西。</p><p>部署到 Kubernetes 的应用程序必须打包为容器。 毕竟，Kubernetes 是一个容器编排器，所以它不能原生运行你的 jar。<br>容器类似于胖罐子：它们包含运行应用程序所需的所有依赖项。 甚至 JVM 也是容器的一部分。 所以从技术上讲，它们是一个更胖的胖罐子。<br>将应用程序打包为容器的流行技术是 Docker。</p><blockquote><p>虽然是最受欢迎的，但 Docker 并不是唯一能够运行容器的技术。 其他流行的选项包括 rkt 和 lxd。</p></blockquote><p>如果您没有安装 Docker，可以按照 <a href="https://docs.docker.com/install/">Docker 官方网站</a>上的说明进行操作。<br>通常，您构建容器并将它们推送到注册表。 这类似于将 jar 发布到 Artifactory 或 Nexus。 但在这种特殊情况下，您将在本地工作并跳过注册表部分。 实际上，您将直接在 minikube 中创建容器镜像。<br>首先，按照此命令打印的说明将 Docker 客户端连接到 minikube：</p><pre class="line-numbers language-none"><code class="language-none">minikube docker-env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>请注意，如果您切换终端，您需要重新连接到 minikube 内部的 Docker 守护进程。 每次使用不同的终端时，都应遵循相同的说明。</p></blockquote><p>并从项目的根目录构建容器镜像：</p><pre class="line-numbers language-none"><code class="language-none">docker build -t spring-k8s-hpa .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以验证映像是否已构建并准备好运行：</p><pre class="line-numbers language-none"><code class="language-none">docker images | grep spring<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完美！<br>集群准备好了，你打包了你的应用程序，也许你现在已经准备好部署了？<br>是的，您终于可以要求 Kubernetes 部署应用程序了。</p><h2 id="将您的应用程序部署到-Kubernetes"><a href="#将您的应用程序部署到-Kubernetes" class="headerlink" title="将您的应用程序部署到 Kubernetes"></a>将您的应用程序部署到 Kubernetes</h2><p>您的应用程序包含三个组件：</p><ul><li>呈现前端的 Spring Boot 应用程序</li><li>ActiveMQ 作为消息代理</li><li>处理事务的 Spring Boot 后端<br>您应该分别部署这三个组件。<br>对于它们中的每一个，您应该创建：</li><li>描述部署什么容器及其配置的部署对象</li><li>一个服务对象，充当部署创建的应用程序的所有实例的负载均衡器<br>部署中应用程序的每个实例都称为 Pod。</li></ul><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/11.gif" class="" title="示意图 width=400"><h2 id="部署-ActiveMQ"><a href="#部署-ActiveMQ" class="headerlink" title="部署 ActiveMQ"></a>部署 ActiveMQ</h2><p>让我们从 ActiveMQ 开始。<br>您应该创建一个包含以下内容的 activemq-deployment.yaml 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> queue<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> queue    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> web        <span class="token key atrule">image</span><span class="token punctuation">:</span> webcenter/activemq<span class="token punctuation">:</span>5.14.3        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">61616</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容看着挺多的，但读起来还很简单：</p><ul><li>您从名为 webcenter/activemq 的官方注册表中请求了一个 activemq 容器</li><li>容器在端口 61616 上公开消息代理</li><li>为容器分配了 512MB 内存</li><li>你要求一个副本——你的应用程序的一个实例<br>创建一个包含以下内容的 activemq-service.yaml 文件：</li></ul><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Servicemetadata:  name: queuespec:  ports:  - port: 61616     targetPort: 61616  selector:    app: queue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>幸运的是，这个模板更短！<br>yaml 内容如下：</p><ul><li>您创建了一个公开端口 61616 的负载均衡器</li><li>传入流量被分发到所有具有 app: queue 类型标签的 Pod（参见上面的部署）</li><li>targetPort 是 Pod 暴露的端口<br>您可以使用以下方法创建资源：</li></ul><pre class="line-numbers language-none"><code class="language-none">kubectl create -f activemq-deployment.yamlkubectl create -f activemq-service.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以验证数据库的一个实例是否正在运行：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get pods -l=app=queue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2><p>创建包含以下内容的 fe-deployment.yaml 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> frontend    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> frontend        <span class="token key atrule">image</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>hpa        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ACTIVEMQ_BROKER_URL          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"tcp://queue:61616"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> STORE_ENABLED          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"true"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> WORKER_ENABLED          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"false"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /health            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署看起来很像前一个。<br>不过，有一些新领域：</p><ul><li>有一个部分可以注入环境变量</li><li>有一个 liveness probe 会告诉你应用程序何时准备好接受流量<br>创建一个 fe-service.yaml 文件，内容如下：</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">32000</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> frontend  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用以下方法创建资源：</p><pre class="line-numbers language-none"><code class="language-none">kubectl create -f fe-deployment.yamlkubectl create -f fe-service.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以验证前端应用程序的一个实例是否正在运行：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get pods -l=app=frontend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署后端"><a href="#部署后端" class="headerlink" title="部署后端"></a>部署后端</h2><p>创建一个包含以下内容的 backend-deployment.yaml 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> backend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> backend      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>        <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">'true'</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> backend        <span class="token key atrule">image</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>hpa        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ACTIVEMQ_BROKER_URL          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"tcp://queue:61616"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> STORE_ENABLED          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"false"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> WORKER_ENABLED          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"true"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /health            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个包含以下内容的 backend-service.yaml 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> backend  <span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31000</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> backend    <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用以下方法创建资源：</p><pre class="line-numbers language-none"><code class="language-none">kubectl create -f backend-deployment.yamlkubectl create -f backend-service.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以验证后端的一个实例是否正在运行：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get pods -l=app=backend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署完成。</p><p><strong>不过，它真的已经开始工作了吗？</strong></p><p>您可以使用以下命令在浏览器中访问该应用程序：</p><pre class="line-numbers language-none"><code class="language-none">minikube service backendminikube service frontend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果有效，您应该尝试购买一些物品！<br>worker是否在处理事务？<br>是的，如果有足够的时间，worker 将处理所有待处理的消息。<br>Congratulations!<br>您刚刚将应用程序部署到 Kubernetes！</p><h2 id="手动扩展以满足不断增长的需求"><a href="#手动扩展以满足不断增长的需求" class="headerlink" title="手动扩展以满足不断增长的需求"></a>手动扩展以满足不断增长的需求</h2><p>单个woker可能无法处理大量消息。 事实上，它一次只能处理一条消息。<br>如果您决定购买数千件商品，则需要数小时才能清除队列。<br>此时，您有两个选择：</p><ul><li>您可以手动放大和缩小</li><li>您可以创建自动缩放规则以自动放大或缩小<br>让我们先从基础开始。<br>您可以通过以下方式将后端扩展到三个实例：</li></ul><pre class="line-numbers language-none"><code class="language-none">kubectl scale --replicas=5 deployment/backend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以验证 Kubernetes 是否创建了另外五个实例：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get pods<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该应用程序可以处理五倍以上的消息。<br>一旦worker排空队列，您可以通过以下方式缩减：</p><pre class="line-numbers language-none"><code class="language-none">kubectl scale --replicas=1 deployment/backend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您知道什么时候访问您的服务的流量最多，通过手动方式向上和向下扩展会是一种非常棒的体验。<br>如果您不这样做，设置自动缩放器允许应用程序自动缩放而无需人工干预。<br>您只需要定义一些规则。</p><h3 id="公开应用程序指标"><a href="#公开应用程序指标" class="headerlink" title="公开应用程序指标"></a>公开应用程序指标</h3><p>Kubernetes 如何知道何时扩展您的应用程序？<br>很简单，你必须告诉它。<br>自动缩放器通过监控指标来工作。 只有这样它才能增加或减少您的应用程序的实例。<br>因此，您可以将队列的长度作为指标公开，并要求自动缩放器查看该值。 队列中的待处理消息越多，Kubernetes 将创建的应用程序实例就越多。</p><p><strong>那么如何公开这些指标呢？</strong></p><p>应用程序有一个 /metrics 端点来公开队列中的消息数。 如果您尝试访问该页面，您会注意到以下内容：</p><pre class="line-numbers language-none"><code class="language-none"># HELP messages Number of messages in the queue# TYPE messages gaugemessages 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>应用程序不会将指标公开为 JSON 格式。 格式是纯文本，是公开 <a href="https://prometheus.io/docs/concepts/metric_types/">Prometheus 指标</a>的标准。 不要担心记住格式。 大多数时候，您将使用 Prometheus 客户端库之一。</p><h3 id="在-Kubernetes-中使用应用程序指标"><a href="#在-Kubernetes-中使用应用程序指标" class="headerlink" title="在 Kubernetes 中使用应用程序指标"></a>在 Kubernetes 中使用应用程序指标</h3><p>您几乎已准备好进行自动缩放——但您应该先安装指标服务器。 事实上，Kubernetes 默认不会从您的应用程序中提取指标。 如果您愿意，您应该启用自定义指标 API。<br>要安装自定义指标 API，您还需要 Prometheus — 一个时间序列数据库。 安装 Custom Metrics API 所需的所有文件都方便地打包在 learnk8s/spring-boot-k8s-hpa 中。<br>您应该下载该存储库的内容并将当前目录更改为该项目的监视文件夹中。</p><pre class="line-numbers language-none"><code class="language-none">cd spring-boot-k8s-hpa/monitoring<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以从那里创建自定义指标 API：</p><pre class="line-numbers language-none"><code class="language-none">kubectl create -f ./metrics-serverkubectl create -f ./namespaces.yamlkubectl create -f ./prometheuskubectl create -f ./custom-metrics-api<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您应该等到以下命令返回自定义指标列表：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1" | jq .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>任务完成！</p><h3 id="您已准备好使用指标。"><a href="#您已准备好使用指标。" class="headerlink" title="您已准备好使用指标。"></a>您已准备好使用指标。</h3><p>事实上，您应该已经找到了队列中消息数量的自定义指标：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/messages" | jq .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恭喜，您有一个公开指标的应用程序和一个使用它们的指标服务器。<br>您终于可以启用自动缩放器了！</p><h3 id="Kubernetes-中的自动扩展部署"><a href="#Kubernetes-中的自动扩展部署" class="headerlink" title="Kubernetes 中的自动扩展部署"></a>Kubernetes 中的自动扩展部署</h3><p>Kubernetes 有一个名为 Horizontal Pod Autoscaler 的对象，用于监控部署并向上和向下扩展 Pod 的数量。<br>您将需要其中之一来自动扩展您的实例。<br>您应该创建一个包含以下内容的 hpa.yaml 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v2beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> HorizontalPodAutoscaler<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>hpa<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">scaleTargetRef</span><span class="token punctuation">:</span>    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment    <span class="token key atrule">name</span><span class="token punctuation">:</span> backend   <span class="token key atrule">minReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">maxReplicas</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">metrics</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> Pods    <span class="token key atrule">pods</span><span class="token punctuation">:</span>      <span class="token key atrule">metricName</span><span class="token punctuation">:</span> messages      <span class="token key atrule">targetAverageValue</span><span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件很神秘，所以让我为您翻译一下：<br>Kubernetes 监视 scaleTargetRef 中指定的部署。 在这种情况下，它是worker。<br>您正在使用消息指标来扩展您的 Pod。 当队列中的消息超过 10 条时，Kubernetes 将触发自动缩放。<br>至少，部署应该有两个 Pod。 十个 Pod 是上限。<br>您可以使用以下方法创建资源：</p><pre class="line-numbers language-none"><code class="language-none">kubectl create -f hpa.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交自动缩放器后，您应该注意到后端的副本数为两个。 这是有道理的，因为您要求自动缩放器始终至少运行两个副本。<br>您可以检查触发自动缩放器的条件以及由此生成的事件：</p><pre class="line-numbers language-none"><code class="language-none">kubectl describe hpa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动扩缩器表明它能够将 Pod 扩展到 2 个，并准备好监控部署。</p><p><strong>令人兴奋的东西，但它有效吗？</strong></p><h3 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h3><p>只有一种方法可以知道它是否有效：在队列中创建大量消息。<br>转到前端应用程序并开始添加大量消息。 添加消息时，请使用以下方法监控 Horizontal Pod Autoscaler 的状态：</p><pre class="line-numbers language-none"><code class="language-none">kubectl describe hpa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Pod 的数量从 2 个增加到 4 个，然后是 8 个，最后是 10 个。<br><strong>该应用程序随消息数量而扩展！ 欢呼吧！</strong><br>您刚刚部署了一个完全可扩展的应用程序，该应用程序可根据队列中待处理消息的数量进行扩展。<br>附带说明一下，缩放算法如下：</p><pre class="line-numbers language-none"><code class="language-none">MAX(CURRENT_REPLICAS_LENGTH * 2, 4)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，每一次放大都会每分钟重新评估一次，而每两分钟缩小一次。<br>以上都是可以调整的设置。<br>不过，你还没有完成。</p><h3 id="有什么比自动缩放实例更好的呢？-自动缩放集群。"><a href="#有什么比自动缩放实例更好的呢？-自动缩放集群。" class="headerlink" title="有什么比自动缩放实例更好的呢？ 自动缩放集群。"></a>有什么比自动缩放实例更好的呢？ 自动缩放集群。</h3><p>跨节点扩展 Pod 的效果非常好。 但是，如果集群中没有足够的容量来扩展 Pod 怎么办？<br>如果达到峰值容量，Kubernetes 将使 Pod 处于挂起状态并等待更多资源可用。<br>如果您可以使用类似于 Horizontal Pod Autoscaler 但用于节点的自动缩放器，那就太好了。</p><p>您可以拥有一个集群自动扩缩器，在您需要更多资源时向 Kubernetes 集群添加更多节点。</p><img src="/How-to-scale-Microservices-with-Message-Queues-Spring-Boot-and-Kubernetes/12.gif" class="" title="示意图 width=400"><p>集群自动缩放器有不同的形状和大小。 它也是特定于云提供商的。</p><h3 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h3><p>大规模设计应用程序需要仔细规划和测试。<br>基于队列的架构是一种出色的设计模式，可以解耦微服务并确保它们可以独立扩展和部署。<br>虽然您可以推出部署脚本，但利用 Kubernetes 等容器编排器来自动部署和扩展应用程序会更容易。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SprintBoot </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Flutter中集成Flutterwave</title>
      <link href="/Integrating-Flutterwave-with-a-Flutter-App.html"/>
      <url>/Integrating-Flutterwave-with-a-Flutter-App.html</url>
      
        <content type="html"><![CDATA[<img src="/Integrating-Flutterwave-with-a-Flutter-App/0.png" class="" title="示意图 width=400"><p>付款始终是企业不可或缺的一部分，当向错误的个人付款或向正确的人多付钱时，它就会成为一件非常麻烦的事情。<br>作为开发人员，集成支付模块是需要额外重视的关键主题之一，以确保正确完成支付，同时确保支付安全并发送给正确的接收者。<br>但是，如果商家希望从不同地点的客户进行付款/接收付款，但在如何无缝地做到这一点方面的选择有限，那么您如何进行这些集成呢？</p><span id="more"></span><p>使用各种支付服务提供商进行这些集成的方法有很多，但是，在本教程中，我将向您展示如何在Flutter中集成将提供各种支付选项的支付服务提供商 Flutterwave的模块。</p><h3 id="Flutterwave是个啥？"><a href="#Flutterwave是个啥？" class="headerlink" title="Flutterwave是个啥？"></a>Flutterwave是个啥？</h3><p>Flutterwave 是一家支付服务提供商，提供各种服务来发送和接收付款。 如果您是企业主，您可以使用 Flutterwave 的各种选项向客户收取款项，例如：</p><ul><li>银行转账</li><li>移动货币</li><li>借记卡和信用卡</li><li>POS</li><li>银行账户</li><li>Visa QR</li><li>USSD</li><li>Mpesa（肯尼亚）</li></ul><h3 id="Flutterwave-集成选项"><a href="#Flutterwave-集成选项" class="headerlink" title="Flutterwave 集成选项"></a>Flutterwave 集成选项</h3><p><strong>Flutterwave Inline</strong> — 这使企业能够通过将 FlutterwaveCheckout() JavaScript 函数嵌入到代码中来使用他们的 Inline Javascript 集成流程。<br><strong>Flutterwave Standard</strong> — 这向您展示了如何使用 Flutterwave 标准集成流程使用其 /payments 端来接受付款。<br><strong>Direct Charge API</strong> — 本指南介绍在 Flutterwave 上执行 Direct API 卡收费。<br>支付链接——支付链接允许商家在他们的网站上接受支付，而无需集成。 这对于没有开发人员资源的个人和商家来说非常有用。<br><strong>HTML Checkout</strong> — 本文档将向您展示如何在 HTML 文件中使用 Flutterwave 内联向您的客户收取付款</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="创建一个-Flutterwave-帐户。"><a href="#创建一个-Flutterwave-帐户。" class="headerlink" title="创建一个 Flutterwave 帐户。"></a>创建一个 Flutterwave 帐户。</h4><p>导航到 Flutterwave 主页并创建一个帐户（如果您还没有帐户）。<br><a href="https://flutterwave.com/us">https://flutterwave.com/us</a></p><h4 id="登录到您的-Flutterwave-帐户。"><a href="#登录到您的-Flutterwave-帐户。" class="headerlink" title="登录到您的 Flutterwave 帐户。"></a>登录到您的 Flutterwave 帐户。</h4><p>创建帐户后，登录到您的 Flutterwave 帐户，您将可以在其中看到您的仪表板。<br>仪表板包含您可以浏览的各种帐户详细信息项目，例如交易、转账、子帐户、计费选项、付款计划、发票等。<br>请参阅下图中的仪表板概述（当前使用测试模式）：</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/1.png" class="" title="示意图 width=400"><p>仪表板可帮助您在测试模式下进行集成，当准备好进行正式操作时，您可以切换到“生产模式”。</p><p>在本文中，我们将使用 Flutter + Flutterwave 插件，其实现模仿了支付集成的 Flutterwave Inline 方法。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-创建一个示例-Flutter-项目"><a href="#1-创建一个示例-Flutter-项目" class="headerlink" title="1. 创建一个示例 Flutter 项目"></a>1. 创建一个示例 Flutter 项目</h4><p>让我们创建我们的演示应用程序。 在终端上，输入 $ flutter create 命令，后跟应用程序的名称。<br>在这种情况下，我们将使用名称 <strong>flutterwave_flutter_app</strong>。</p><pre class="line-numbers language-none"><code class="language-none">$ flutter create flutterwave_flutter_app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-删除预生成的代码"><a href="#2-删除预生成的代码" class="headerlink" title="2.删除预生成的代码"></a>2.删除预生成的代码</h4><p>成功创建flutter+flutter wave示例app后，在main.dart文件中，去掉默认生成的代码，替换为如下代码：<br>（这一步假设你对 Flutter 项目结构有一个基本的想法）。 如果您是 Flutter 新手，请查看 <a href="https://flutter.dev/docs/get-started/codelab">Flutter 官方文档</a>。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>        debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>          primarySwatch<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        home<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token metadata function">@override</span>     <span class="token class-name">HomePageState</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">HomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">HomePageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token metadata function">@override</span>    <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>       appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Flutter + Flutterwave'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>              centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>              child<span class="token punctuation">:</span><span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>                child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Pay with Flutterwave'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码显示了一个简单的 UI，其标题为“Flutter +Flutterwave”，界面中心有一个按钮，用于使用 Flutterwave 发起支付。</p><h4 id="3-在-pubspec-yml-中添加-Flutterwave-包"><a href="#3-在-pubspec-yml-中添加-Flutterwave-包" class="headerlink" title="3. 在 pubspec.yml 中添加 Flutterwave 包"></a>3. 在 pubspec.yml 中添加 Flutterwave 包</h4><pre class="line-numbers language-none"><code class="language-none">flutterwave: ^1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>始终确保从 <a href="https://pub.dev/packages/flutterwave#prerequisite">Pub dev</a> 下载包版本以获得最新包。</p><h4 id="4-在main-dart文件中导入Flutterwave包"><a href="#4-在main-dart文件中导入Flutterwave包" class="headerlink" title="4.在main.dart文件中导入Flutterwave包"></a>4.在main.dart文件中导入Flutterwave包</h4><pre class="line-numbers language-none"><code class="language-none">import 'package:flutterwave/flutterwave.dart';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-创建一个-FlutterWave-实例。"><a href="#5-创建一个-FlutterWave-实例。" class="headerlink" title="5. 创建一个 FlutterWave 实例。"></a>5. 创建一个 FlutterWave 实例。</h4><p>通过调用 Flutterwave.forUIPayment() 构造函数创建 Flutterwave 实例。<br>构造函数接受以下详细信息的<strong>强制</strong>实例：</p><p><strong>Context</strong> , <strong>publicKey</strong> , <strong>encryptionKey</strong> , <strong>amount</strong> , <strong>currency</strong> , <strong>email</strong> , <strong>fullName</strong> , <strong>txRef</strong> , <strong>isDebugMode</strong> and <strong>phoneNumber</strong> </p><p>这将返回 Flutterwave 的一个实例。<br>好吧，既然有一些必需的参数，让我们调整 UI 以使用户在付款时只从 UI 输入字段中填写必要的详细信息，例如电子邮件、金额、全名和电话号码。<br>注意：如果您希望使用不同货币的用户进行 Flutterwave 付款，您可以在 UI 中添加货币输入字段。<br>但是，如果您只想使用一种货币，您可以在代码中预先配置它，这样用户就不必在每次进行 Flutterwave 支付时都填写它。<br>有了这些新增功能，您的代码将如下所示：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">  <span class="token comment">//add the following values to create the UI for Flutterwave Payment</span><span class="token keyword">class</span> <span class="token class-name">HomePageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token comment">//use the currency you would like the user to Pay In, in this case, I used KES currency</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> currency <span class="token operator">=</span> <span class="token class-name">FlutterwaveCurrency</span><span class="token punctuation">.</span>KES<span class="token punctuation">;</span>  <span class="token keyword">final</span> formKey <span class="token operator">=</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FormState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> fullname <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> phone <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> email <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">TextEditingController</span> amount <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Flutter + Flutterwave'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>          centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>                padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       child<span class="token punctuation">:</span> <span class="token class-name">Form</span><span class="token punctuation">(</span>            key<span class="token punctuation">:</span> formKey<span class="token punctuation">,</span>         child<span class="token punctuation">:</span><span class="token class-name">Column</span><span class="token punctuation">(</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token keyword">const</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">Container</span><span class="token punctuation">(</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>              controller<span class="token punctuation">:</span> fullname<span class="token punctuation">,</span>              decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Full Name"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   validator<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>                      value<span class="token operator">!</span><span class="token punctuation">.</span>isNotEmpty<span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Please fill in Your Name"</span></span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">Container</span><span class="token punctuation">(</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>              controller<span class="token punctuation">:</span> phone<span class="token punctuation">,</span>              decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Phone Number"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>               validator<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>                      value<span class="token operator">!</span><span class="token punctuation">.</span>isNotEmpty<span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Please fill in Your Phone number"</span></span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">Container</span><span class="token punctuation">(</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>              controller<span class="token punctuation">:</span> email<span class="token punctuation">,</span>              decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Email"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                validator<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>                      value<span class="token operator">!</span><span class="token punctuation">.</span>isNotEmpty<span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Please fill in Your Email"</span></span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">Container</span><span class="token punctuation">(</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>              controller<span class="token punctuation">:</span> amount<span class="token punctuation">,</span>              decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Amount"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>              validator<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>                      value<span class="token operator">!</span><span class="token punctuation">.</span>isNotEmpty<span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Please fill in the Amount you are Paying"</span></span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Pay with Flutterwave'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  上面的代码有一些输入字段，用户可以在使用 Flutterwave 付款之前填写这些字段，例如电子邮件、金额、全名和电话号码。 它还有一个简单的验证，以防止在启动支付时提交空值，因为这些值是必需的参数。<br>接下来，创建一个用于为 Flutterwave 实例配置以下值的方法，包括：<strong>Context</strong> 、<strong>publicKey</strong> 、<strong>encryptionKey</strong> 、<strong>amount</strong> 、<strong>currency</strong> 、<strong>email</strong> 、<strong>fullName</strong> 、<strong>txRef</strong> 、<strong>isDebugMode</strong> 和 <strong>phoneNumber</strong> 。<br>您可以为该方法使用您喜欢的名称。 在这个例子中，我使用 _makeFlutterwavePayment()。<br>可以从下图所示的 Flutterwave 帐户仪表板中检索所需的<strong>公钥</strong>和<strong>加密密钥</strong>：</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/2.png" class="" title="示意图 width=400"><p>在上图中，我使用的是我的 TestMode 公钥和加密密钥。</p><p>请参阅下面创建 Flutterwave 实例的完整代码：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"> <span class="token comment">//Add a method to make the flutter wave payment</span> <span class="token comment">//This Method includes all the values needed to create the Flutterwave Instance</span><span class="token keyword">void</span> <span class="token function">_makeFlutterwavePayment</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> fullname<span class="token punctuation">,</span> <span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">String</span> amount<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">Flutterwave</span> flutterwave <span class="token operator">=</span> <span class="token class-name">Flutterwave</span><span class="token punctuation">.</span><span class="token function">forUIPayment</span><span class="token punctuation">(</span>          <span class="token comment">//the first 10 fields below are required/mandatory</span>          context<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span>          fullName<span class="token punctuation">:</span> fullname<span class="token punctuation">,</span>          phoneNumber<span class="token punctuation">:</span> phone<span class="token punctuation">,</span>          email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>          amount<span class="token punctuation">:</span> amount<span class="token punctuation">,</span>          <span class="token comment">//Use your Public and Encription Keys from your Flutterwave account on the dashboard</span>          encryptionKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Your Encription Key"</span></span><span class="token punctuation">,</span>          publicKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Your Public Key"</span></span><span class="token punctuation">,</span>          currency<span class="token punctuation">:</span> currency<span class="token punctuation">,</span>          txRef<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIso8601String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">//Setting DebugMode below to true since will be using test mode.</span>          <span class="token comment">//You can set it to false when using production environment.</span>          isDebugMode<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">//configure the the type of payments that your business will accept</span>          acceptCardPayment<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptUSSDPayment<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptAccountPayment<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptFrancophoneMobileMoney<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptGhanaPayment<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptMpesaPayment<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          acceptRwandaMoneyPayment<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptUgandaPayment<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          acceptZambiaPayment<span class="token punctuation">:</span> <span class="token boolean">false</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在这个 Demo 中，我们将使用 Mpesa 测试 Flutterwave 付款，可以通过 Mpesa 接受付款，这就是为什么在上述方法的第 26 行中将 acceptMpesaPayment 设置为 true 的原因。</p><p>但是，您可以根据您所在的国家/地区和可接受的付款类型，将您想要测试的其他付款设置为真实。<br>如果您也想测试 CardPayment，请随意将其设置为 true。</p><h4 id="6-处理响应"><a href="#6-处理响应" class="headerlink" title="6. 处理响应"></a>6. 处理响应</h4><p>接下来，在 Flutterwave 实例下方添加一个响应，该实例返回一个 Flutterwave 实例，然后我们在其上调用异步方法 .initializeForUiPayments()。<br>请参阅下面的示例代码：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> flutterwave<span class="token punctuation">.</span><span class="token function">initializeForUiPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Transaction Failed"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"Transaction successful"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-向-Flutterwave-付款。"><a href="#7-向-Flutterwave-付款。" class="headerlink" title="7. 向 Flutterwave 付款。"></a>7. 向 Flutterwave 付款。</h4><p>现在您已经创建了 Flutterwave 实例和响应，请在 onPressed() 函数上调用您在上面（在步骤 6 中）创建的 _makeFlutterwavePayment 方法，以在按下按钮时执行付款。<br>请看下面的代码：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Pay with Flutterwave'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">final</span> name <span class="token operator">=</span> fullname<span class="token punctuation">.</span>text<span class="token punctuation">;</span>              <span class="token keyword">final</span> userPhone <span class="token operator">=</span> phone<span class="token punctuation">.</span>text<span class="token punctuation">;</span>              <span class="token keyword">final</span> userEmail <span class="token operator">=</span> email<span class="token punctuation">.</span>text<span class="token punctuation">;</span>              <span class="token keyword">final</span> amountPaid <span class="token operator">=</span> amount<span class="token punctuation">.</span>text<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>formKey<span class="token punctuation">.</span>currentState<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">_makeFlutterwavePayment</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>name<span class="token punctuation">,</span>userPhone<span class="token punctuation">,</span>userEmail<span class="token punctuation">,</span>amountPaid<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是的，我们已经完成了代码实现。</p><h4 id="8-Flutterwave-支付确认"><a href="#8-Flutterwave-支付确认" class="headerlink" title="8. Flutterwave 支付确认"></a>8. Flutterwave 支付确认</h4><p>现在运行我们刚刚按照上述说明构建的 Flutterwave Flutter 示例应用程序，并以测试用户的身份填写 UI 付款详细信息。<br>见下图：</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/3.png" class="" title="示意图 width=400"><p>然后按下使用 Flutterwave 付款按钮，您现在应该可以开始付款了。 这只会显示一个付款选项，即 Mpesa，因为这是我们设置的。 检查下面的屏幕截图。</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/4.png" class="" title="示意图 width=400"><p>这将触发事务验证，如下所示：</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/5.png" class="" title="示意图 width=400"><p>示例演示</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/6.gif" class="" title="示意图 width=400"><p>付款后，您将收到一封由使用 Flutterwave 付款的客户完成的交易报告的电子邮件。 检查下面的屏幕截图。</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/7.png" class="" title="示意图 width=400"><p>您还可以在 Flutterwave 仪表板中获取对您的 Flutterwave 帐户进行的所有交易的列表，如下所示：</p><img src="/Integrating-Flutterwave-with-a-Flutter-App/8.png" class="" title="示意图 width=400"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在本教程中，您学习了如何使用 Flutterwave Inline 方法将 Flutterwave 集成到 Flutter 应用程序中。 以及如何使用 Mpesa 付款选项以无缝方式确认您作为商家从客户那里收到付款。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Flutterwave </tag>
            
            <tag> Payment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter TimePicker</title>
      <link href="/Flutter-TimePicker.html"/>
      <url>/Flutter-TimePicker.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-TimePicker/1.png" class="" title="示意图 width=400"><p>在本文中，我们将快速探索日期和时间选择器。<br>我们不会在这个应用程序中使用任何包。我们将使用 Flutter 中可用的一些核心功能来实现这一点。 我们将在您的 Flutter 应用程序中实现日期和时间选择器的演示。</p><span id="more"></span><h3 id="目录-："><a href="#目录-：" class="headerlink" title="目录 ："></a>目录 ：</h3><ul><li>日期和时间选择器</li><li>代码实现</li><li>代码文件</li><li>结论</li></ul><img src="/Flutter-TimePicker/2.jpg" class="" title="示意图 width=400"><h3 id="日期和时间选择器"><a href="#日期和时间选择器" class="headerlink" title="日期和时间选择器"></a>日期和时间选择器</h3><p>Flutter 的日期和时间选择器，您可以选择英语、荷兰语和任何其他您想要的语言的日期/时间/日期和时间，您还可以自定义您自己的选择器内容。</p><img src="/Flutter-TimePicker/3.gif" class="" title="示意图 width=400"><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>在 lib 文件夹中创建一个名为 DateTimePicker.dart 的新 dart 文件。</p><img src="/Flutter-TimePicker/4.png" class="" title="示意图 width=400"><blockquote><p>在此屏幕中，您将能够通过在您的应用程序中点击它们来选择日期和时间。</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Null</span><span class="token punctuation">&gt;</span></span> <span class="token function">_selectDate</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">DateTime</span> picked <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDatePicker</span><span class="token punctuation">(</span>      context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>      initialDate<span class="token punctuation">:</span> selectedDate<span class="token punctuation">,</span>      initialDatePickerMode<span class="token punctuation">:</span> <span class="token class-name">DatePickerMode</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span>      firstDate<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      lastDate<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>picked <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      selectedDate <span class="token operator">=</span> picked<span class="token punctuation">;</span>      _dateController<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">yMd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>selectedDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化 DateTime 选择器类。这将保存我们选择的日期。</p></blockquote><img src="/Flutter-TimePicker/5.png" class="" title="示意图 width=400"><blockquote><p>在 TextFromField 的 onTap 中，我们调用 _selectDate 函数，然后将显示选择器并保存选择的日期和时间。</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">InkWell</span><span class="token punctuation">(</span>  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_selectDate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>    width<span class="token punctuation">:</span> _width <span class="token operator">/</span> <span class="token number">1.7</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> _height <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">,</span>    margin<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>    decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>      style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>      enabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      keyboardType<span class="token punctuation">:</span> <span class="token class-name">TextInputType</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>      controller<span class="token punctuation">:</span> _dateController<span class="token punctuation">,</span>      onSaved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _setDate <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          disabledBorder<span class="token punctuation">:</span>              <span class="token class-name">UnderlineInputBorder</span><span class="token punctuation">(</span>borderSide<span class="token punctuation">:</span> <span class="token class-name">BorderSide</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span><span class="token punctuation">,</span>         contentPadding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它只是一个 _selectTime 函数，如下所示。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Null</span><span class="token punctuation">&gt;</span></span> <span class="token function">_selectTime</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">TimeOfDay</span> picked <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showTimePicker</span><span class="token punctuation">(</span>    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>    initialTime<span class="token punctuation">:</span> selectedTime<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>picked <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      selectedTime <span class="token operator">=</span> picked<span class="token punctuation">;</span>      _hour <span class="token operator">=</span> selectedTime<span class="token punctuation">.</span>hour<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _minute <span class="token operator">=</span> selectedTime<span class="token punctuation">.</span>minute<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _time <span class="token operator">=</span> _hour <span class="token operator">+</span> <span class="token string-literal"><span class="token string">' : '</span></span> <span class="token operator">+</span> _minute<span class="token punctuation">;</span>      _timeController<span class="token punctuation">.</span>text <span class="token operator">=</span> _time<span class="token punctuation">;</span>      _timeController<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>          <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> selectedTime<span class="token punctuation">.</span>hour<span class="token punctuation">,</span> selectedTime<span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span>hh<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">':'</span></span><span class="token punctuation">,</span> nn<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">,</span> am<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化 TimeOfDay 选择器类，将我们选择的时间保存在 _selecteTime 函数中。</p><img src="/Flutter-TimePicker/6.png" class="" title="示意图 width=400"><blockquote><p>在点击 TextFormField 时，我们调用一个 _selectTime 函数，它将显示日期和时间选择器以保存选择的时间。</p></blockquote><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">InkWell</span><span class="token punctuation">(</span>  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_selectTime</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>    margin<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span> _width <span class="token operator">/</span> <span class="token number">1.7</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> _height <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">,</span>    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>    decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>      style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>      onSaved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _setTime <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      enabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      keyboardType<span class="token punctuation">:</span> <span class="token class-name">TextInputType</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>      controller<span class="token punctuation">:</span> _timeController<span class="token punctuation">,</span>      decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>          disabledBorder<span class="token punctuation">:</span>              <span class="token class-name">UnderlineInputBorder</span><span class="token punctuation">(</span>borderSide<span class="token punctuation">:</span> <span class="token class-name">BorderSide</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">// labelText: 'Time',</span>          contentPadding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:date_format/date_format.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:intl/intl.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DateTimePicker</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  _DateTimePickerState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_DateTimePickerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _DateTimePickerState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateTimePicker</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  double _height<span class="token punctuation">;</span>  double _width<span class="token punctuation">;</span>  <span class="token class-name">String</span> _setTime<span class="token punctuation">,</span> _setDate<span class="token punctuation">;</span>  <span class="token class-name">String</span> _hour<span class="token punctuation">,</span> _minute<span class="token punctuation">,</span> _time<span class="token punctuation">;</span>  <span class="token class-name">String</span> dateTime<span class="token punctuation">;</span>  <span class="token class-name">DateTime</span> selectedDate <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TimeOfDay</span> selectedTime <span class="token operator">=</span> <span class="token class-name">TimeOfDay</span><span class="token punctuation">(</span>hour<span class="token punctuation">:</span> <span class="token number">00</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TextEditingController</span> _dateController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TextEditingController</span> _timeController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Null</span><span class="token punctuation">&gt;</span></span> <span class="token function">_selectDate</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">DateTime</span> picked <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDatePicker</span><span class="token punctuation">(</span>        context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>        initialDate<span class="token punctuation">:</span> selectedDate<span class="token punctuation">,</span>        initialDatePickerMode<span class="token punctuation">:</span> <span class="token class-name">DatePickerMode</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span>        firstDate<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        lastDate<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>picked <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selectedDate <span class="token operator">=</span> picked<span class="token punctuation">;</span>        _dateController<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">yMd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>selectedDate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Null</span><span class="token punctuation">&gt;</span></span> <span class="token function">_selectTime</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">TimeOfDay</span> picked <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showTimePicker</span><span class="token punctuation">(</span>      context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>      initialTime<span class="token punctuation">:</span> selectedTime<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>picked <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selectedTime <span class="token operator">=</span> picked<span class="token punctuation">;</span>        _hour <span class="token operator">=</span> selectedTime<span class="token punctuation">.</span>hour<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _minute <span class="token operator">=</span> selectedTime<span class="token punctuation">.</span>minute<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _time <span class="token operator">=</span> _hour <span class="token operator">+</span> <span class="token string-literal"><span class="token string">' : '</span></span> <span class="token operator">+</span> _minute<span class="token punctuation">;</span>        _timeController<span class="token punctuation">.</span>text <span class="token operator">=</span> _time<span class="token punctuation">;</span>        _timeController<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>            <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> selectedTime<span class="token punctuation">.</span>hour<span class="token punctuation">,</span> selectedTime<span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span>hh<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">':'</span></span><span class="token punctuation">,</span> nn<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">,</span> am<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _dateController<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">yMd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _timeController<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>        <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hour<span class="token punctuation">,</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>hh<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">':'</span></span><span class="token punctuation">,</span> nn<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">,</span> am<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _height <span class="token operator">=</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    _width <span class="token operator">=</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    dateTime <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">yMd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Date time picker'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> _width<span class="token punctuation">,</span>        height<span class="token punctuation">:</span> _height<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceAround<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>            <span class="token class-name">Column</span><span class="token punctuation">(</span>              children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>                  <span class="token string-literal"><span class="token string">'Choose Date'</span></span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                      fontStyle<span class="token punctuation">:</span> <span class="token class-name">FontStyle</span><span class="token punctuation">.</span>italic<span class="token punctuation">,</span>                      fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">,</span>                      letterSpacing<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">InkWell</span><span class="token punctuation">(</span>                  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_selectDate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                    width<span class="token punctuation">:</span> _width <span class="token operator">/</span> <span class="token number">1.7</span><span class="token punctuation">,</span>                    height<span class="token punctuation">:</span> _height <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">,</span>                    margin<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                    decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>                      style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                      enabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                      keyboardType<span class="token punctuation">:</span> <span class="token class-name">TextInputType</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                      controller<span class="token punctuation">:</span> _dateController<span class="token punctuation">,</span>                      onSaved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _setDate <span class="token operator">=</span> val<span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span>                      decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>                          disabledBorder<span class="token punctuation">:</span>                              <span class="token class-name">UnderlineInputBorder</span><span class="token punctuation">(</span>borderSide<span class="token punctuation">:</span> <span class="token class-name">BorderSide</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token comment">// labelText: 'Time',</span>                          contentPadding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Column</span><span class="token punctuation">(</span>              children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>                  <span class="token string-literal"><span class="token string">'Choose Time'</span></span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                      fontStyle<span class="token punctuation">:</span> <span class="token class-name">FontStyle</span><span class="token punctuation">.</span>italic<span class="token punctuation">,</span>                      fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w600<span class="token punctuation">,</span>                      letterSpacing<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">InkWell</span><span class="token punctuation">(</span>                  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_selectTime</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                    margin<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    width<span class="token punctuation">:</span> _width <span class="token operator">/</span> <span class="token number">1.7</span><span class="token punctuation">,</span>                    height<span class="token punctuation">:</span> _height <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">,</span>                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                    decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>                      style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                      onSaved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _setTime <span class="token operator">=</span> val<span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span>                      enabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                      keyboardType<span class="token punctuation">:</span> <span class="token class-name">TextInputType</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                      controller<span class="token punctuation">:</span> _timeController<span class="token punctuation">,</span>                      decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>                          disabledBorder<span class="token punctuation">:</span>                              <span class="token class-name">UnderlineInputBorder</span><span class="token punctuation">(</span>borderSide<span class="token punctuation">:</span> <span class="token class-name">BorderSide</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token comment">// labelText: 'Time',</span>                          contentPadding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论 ：</p><p>在这篇文章中，我讲解了一个日期时间选择器的demo，大家可以根据自己的情况进行修改和实验，这个小介绍来自我们这边的日期时间选择器。<br>我希望这篇博客可以为你在 Flutter 项目中尝试使用日期时间选择器提供足够的信息。 所以请尝试一下。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> TimePicker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15 Javascript codes you will always need</title>
      <link href="/15-Javascript-codes-you-will-always-need.html"/>
      <url>/15-Javascript-codes-you-will-always-need.html</url>
      
        <content type="html"><![CDATA[<h3 id="随机排列数组"><a href="#随机排列数组" class="headerlink" title="随机排列数组"></a>随机排列数组</h3><p>使用排序和随机方法对数组进行排序非常容易。</p><pre class="line-numbers language-none"><code class="language-none">const shuffleArray = (arr) =&gt; arr.sort(() =&gt; 0.5 - Math.random());console.log(shuffleArray([1, 2, 3, 4]));// Result: [ 1, 4, 3, 2 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="检查日期是否有效"><a href="#检查日期是否有效" class="headerlink" title="检查日期是否有效"></a>检查日期是否有效</h3><p>使用以下代码段检查给定日期是否有效。</p><pre class="line-numbers language-none"><code class="language-none">const isDateValid = (...val) =&gt; !Number.isNaN(new Date(...val).valueOf());isDateValid("December 17, 1995 03:24:00");// Result: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="复制到剪贴板"><a href="#复制到剪贴板" class="headerlink" title="复制到剪贴板"></a>复制到剪贴板</h3><p>使用 navigator.clipboard.writeText 轻松将任何文本复制到剪贴板。</p><pre class="line-numbers language-none"><code class="language-none">const copyToClipboard = (text) =&gt; navigator.clipboard.writeText(text);copyToClipboard("Hello World");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查找一年中的哪一天"><a href="#查找一年中的哪一天" class="headerlink" title="查找一年中的哪一天"></a>查找一年中的哪一天</h3><p>查找给定日期的哪一天。</p><pre class="line-numbers language-none"><code class="language-none">const dayOfYear = (date) =&gt;  Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);dayOfYear(new Date());// Result: 272<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大写字符串"><a href="#大写字符串" class="headerlink" title="大写字符串"></a>大写字符串</h3><p>Javascript 没有内置的大写函数，因此我们可以为此目的使用以下代码。</p><pre class="line-numbers language-none"><code class="language-none">const capitalize = str =&gt; str.charAt(0).toUpperCase() + str.slice(1)capitalize("follow for more")// Result: Follow for more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="求两天之间的天数"><a href="#求两天之间的天数" class="headerlink" title="求两天之间的天数"></a>求两天之间的天数</h3><p>使用以下代码段查找给定日期之间的天数。</p><pre class="line-numbers language-none"><code class="language-none">const dayDif = (date1, date2) =&gt; Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000)dayDif(new Date("2020-10-21"), new Date("2021-10-22"))// Result: 366<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="清除所有-Cookie"><a href="#清除所有-Cookie" class="headerlink" title="清除所有 Cookie"></a>清除所有 Cookie</h3><p>您可以通过使用 document.cookie 访问 cookie 并清除它来轻松清除存储在网页上的所有 cookie。</p><pre class="line-numbers language-none"><code class="language-none">const clearCookies = document.cookie.split(';').forEach(cookie =&gt; document.cookie = cookie.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成随机十六进制"><a href="#生成随机十六进制" class="headerlink" title="生成随机十六进制"></a>生成随机十六进制</h3><p>您可以使用 Math.random 和 padEnd 属性生成随机十六进制颜色。</p><pre class="line-numbers language-none"><code class="language-none">const randomHex = () =&gt; `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, "0")}`;console.log(randomHex());// Result: #92b008<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="从数组中删除重复项"><a href="#从数组中删除重复项" class="headerlink" title="从数组中删除重复项"></a>从数组中删除重复项</h3><p>您可以使用 JavaScript 中的 Set 轻松删除重复项。这可是非常管用的一个大招！</p><pre class="line-numbers language-none"><code class="language-none">const removeDuplicates = (arr) =&gt; [...new Set(arr)];console.log(removeDuplicates([1, 2, 3, 3, 4, 4, 5, 5, 6]));// Result: [ 1, 2, 3, 4, 5, 6 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="从-URL-获取查询参数"><a href="#从-URL-获取查询参数" class="headerlink" title="从 URL 获取查询参数"></a>从 URL 获取查询参数</h3><p>你可以轻松取到URL中的参数，不管是window.location还是goole.com?search=easy&amp;page=3。</p><pre class="line-numbers language-none"><code class="language-none">const getParameters = (URL) =&gt; {  URL = JSON.parse('{"' + decodeURI(URL.split("?")[1]).replace(/"/g, '\\"').replace(/&amp;/g, '","').replace(/=/g, '":"') +'"}');  return JSON.stringify(URL);};getParameters(window.location)// Result: { search : "easy", page : 3 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="借助Date记录时间"><a href="#借助Date记录时间" class="headerlink" title="借助Date记录时间"></a>借助Date记录时间</h3><p>我们可以从给定日期以小时::分钟::秒的格式记录时间。</p><pre class="line-numbers language-none"><code class="language-none">const timeFromDate = date =&gt; date.toTimeString().slice(0, 8);console.log(timeFromDate(new Date(2021, 0, 10, 17, 30, 0))); // Result: "17:30:00"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检查一个数字是偶数还是奇数"><a href="#检查一个数字是偶数还是奇数" class="headerlink" title="检查一个数字是偶数还是奇数"></a>检查一个数字是偶数还是奇数</h3><pre class="line-numbers language-none"><code class="language-none">const isEven = num =&gt; num % 2 === 0;console.log(isEven(2)); // Result: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="求数字的平均值"><a href="#求数字的平均值" class="headerlink" title="求数字的平均值"></a>求数字的平均值</h3><p>使用 reduce 方法找到多个数字之间的平均值。</p><pre class="line-numbers language-none"><code class="language-none">const average = (...args) =&gt; args.reduce((a, b) =&gt; a + b) / args.length;average(1, 2, 3, 4);// Result: 2.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检查数组是否为空"><a href="#检查数组是否为空" class="headerlink" title="检查数组是否为空"></a>检查数组是否为空</h3><p>检查数组是否为空的简单单行程序将返回 true 或 false。</p><pre class="line-numbers language-none"><code class="language-none">const isNotEmpty = arr =&gt; Array.isArray(arr) &amp;&amp; arr.length &gt; 0;isNotEmpty([1, 2, 3]);// Result: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取选定的文本"><a href="#获取选定的文本" class="headerlink" title="获取选定的文本"></a>获取选定的文本</h3><p>使用内置的 getSelectionproperty 获取用户选择的文本。</p><pre class="line-numbers language-none"><code class="language-none">const getSelectedText = () =&gt; window.getSelection().toString();getSelectedText();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="检测暗模式"><a href="#检测暗模式" class="headerlink" title="检测暗模式"></a>检测暗模式</h3><p>使用以下代码检查用户的设备是否处于暗模式。</p><pre class="line-numbers language-none"><code class="language-none">const isDarkMode = window.matchMedia &amp;&amp; window.matchMedia('(prefers-color-scheme: dark)').matchesconsole.log(isDarkMode) // Result: True or False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 中的 Paypal 支付网关的集成</title>
      <link href="/Paypal-Payment-Gateway-Integration-in-Flutter.html"/>
      <url>/Paypal-Payment-Gateway-Integration-in-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/Paypal-Payment-Gateway-Integration-in-Flutter/1.jpeg" class="" title="示意图 width=400"><p>问题：<br>在撰写本文时，Paypal 还没有为 Flutter 中的支付网关集成提供 SDK 包。 此外，整个互联网上貌似都没有解决此问题的方法。<br>在对该主题进行了大量研究之后，我觉得我找到了解决此问题的简单方法。</p><p>解决方案：<br>我已经使用 WebView 成功实现了 Paypal 支付网关。 我使用了一些 Paypal 的可用 API 来进行支付，这些 API 可以正式集成到网站中。</p><span id="more"></span><p>所以让我们从编码部分开始。<br>首先，我们需要创建一个名为 PaypalServices.dart 的 dart 文件，其中包含使用 Paypal 执行交易所需的所有 API。<br>下面给出了代码。 您可以复制这些代码来创建 dart 文件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http/http.dart'</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:async'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:convert'</span></span> <span class="token operator">as</span> convert<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http_auth/http_auth.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PaypalServices</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> domain <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"https://api.sandbox.paypal.com"</span></span><span class="token punctuation">;</span> <span class="token comment">// for sandbox mode</span><span class="token comment">//  String domain = "https://api.paypal.com"; // for production mode</span>  <span class="token comment">// change clientId and secret with your own, provided by paypal</span>  <span class="token class-name">String</span> clientId <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'YOUR CLIENT ID'</span></span><span class="token punctuation">;</span>  <span class="token class-name">String</span> secret <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'YOUR SECRET'</span></span><span class="token punctuation">;</span>  <span class="token comment">// for getting the access token from Paypal</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token class-name">BasicAuthClient</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">domain</span></span><span class="token string">/v1/oauth2/token?grant_type=client_credentials'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> body <span class="token operator">=</span> convert<span class="token punctuation">.</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> body<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"access_token"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// for creating the payment request with Paypal</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPaypalPayment</span><span class="token punctuation">(</span>      transactions<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">domain</span></span><span class="token string">/v1/payments/payment"</span></span><span class="token punctuation">,</span>          body<span class="token punctuation">:</span> convert<span class="token punctuation">.</span><span class="token function">jsonEncode</span><span class="token punctuation">(</span>transactions<span class="token punctuation">)</span><span class="token punctuation">,</span>          headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string-literal"><span class="token string">"content-type"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"application/json"</span></span><span class="token punctuation">,</span>            <span class="token string-literal"><span class="token string">'Authorization'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Bearer '</span></span> <span class="token operator">+</span> accessToken          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> body <span class="token operator">=</span> convert<span class="token punctuation">.</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"links"</span></span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> body<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"links"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span> links <span class="token operator">=</span> body<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"links"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> executeUrl <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">;</span>          <span class="token class-name">String</span> approvalUrl <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">;</span>          <span class="token keyword">final</span> item <span class="token operator">=</span> links<span class="token punctuation">.</span><span class="token function">firstWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> o<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"rel"</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"approval_url"</span></span><span class="token punctuation">,</span>              orElse<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            approvalUrl <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"href"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">final</span> item1 <span class="token operator">=</span> links<span class="token punctuation">.</span><span class="token function">firstWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> o<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"rel"</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"execute"</span></span><span class="token punctuation">,</span>              orElse<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executeUrl <span class="token operator">=</span> item1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"href"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">"executeUrl"</span></span><span class="token punctuation">:</span> executeUrl<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"approvalUrl"</span></span><span class="token punctuation">:</span> approvalUrl<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>body<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"message"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// for executing the payment transaction</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">executePayment</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> payerId<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>          body<span class="token punctuation">:</span> convert<span class="token punctuation">.</span><span class="token function">jsonEncode</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">"payer_id"</span></span><span class="token punctuation">:</span> payerId<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string-literal"><span class="token string">"content-type"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"application/json"</span></span><span class="token punctuation">,</span>            <span class="token string-literal"><span class="token string">'Authorization'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Bearer '</span></span> <span class="token operator">+</span> accessToken          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> body <span class="token operator">=</span> convert<span class="token punctuation">.</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> body<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"id"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们需要创建一个名为 PaypalPayment.dart 的 dart 文件，其中包含带有 Paypal URL 的 WebView 小部件，必须在其中执行交易。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:core'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:shared_preferences/shared_preferences.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:webview_flutter/webview_flutter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'PaypalServices.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PaypalPayment</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Function</span> onFinish<span class="token punctuation">;</span>  <span class="token class-name">PaypalPayment</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onFinish<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatefulWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">PaypalPaymentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PaypalPaymentState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaypalPayment</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScaffoldState</span><span class="token punctuation">&gt;</span></span> _scaffoldKey <span class="token operator">=</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScaffoldState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> checkoutUrl<span class="token punctuation">;</span>  <span class="token class-name">String</span> executeUrl<span class="token punctuation">;</span>  <span class="token class-name">String</span> accessToken<span class="token punctuation">;</span>  <span class="token class-name">PaypalServices</span> services <span class="token operator">=</span> <span class="token class-name">PaypalServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// you can change default currency according to your need</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> defaultCurrency <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">"symbol"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"USD "</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"decimalDigits"</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"symbolBeforeTheNumber"</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"currency"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"USD"</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>  bool isEnableShipping <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool isEnableAddress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> returnURL <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'return.example.com'</span></span><span class="token punctuation">;</span>  <span class="token class-name">String</span> cancelURL<span class="token operator">=</span> <span class="token string-literal"><span class="token string">'cancel.example.com'</span></span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        accessToken <span class="token operator">=</span> <span class="token keyword">await</span> services<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> transactions <span class="token operator">=</span> <span class="token function">getOrderParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> res <span class="token operator">=</span>            <span class="token keyword">await</span> services<span class="token punctuation">.</span><span class="token function">createPaypalPayment</span><span class="token punctuation">(</span>transactions<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            checkoutUrl <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"approvalUrl"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>            executeUrl <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"executeUrl"</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'exception: '</span></span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> snackBar <span class="token operator">=</span> <span class="token class-name">SnackBar</span><span class="token punctuation">(</span>          content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          action<span class="token punctuation">:</span> <span class="token class-name">SnackBarAction</span><span class="token punctuation">(</span>            label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Close'</span></span><span class="token punctuation">,</span>            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// Some code to undo the change.</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        _scaffoldKey<span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>snackBar<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// item name, price and quantity</span>  <span class="token class-name">String</span> itemName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'iPhone X'</span></span><span class="token punctuation">;</span>  <span class="token class-name">String</span> itemPrice <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'1.99'</span></span><span class="token punctuation">;</span>  int quantity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOrderParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token string-literal"><span class="token string">"name"</span></span><span class="token punctuation">:</span> itemName<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"quantity"</span></span><span class="token punctuation">:</span> quantity<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"price"</span></span><span class="token punctuation">:</span> itemPrice<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"currency"</span></span><span class="token punctuation">:</span> defaultCurrency<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"currency"</span></span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// checkout invoice details</span>    <span class="token class-name">String</span> totalAmount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'1.99'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> subTotalAmount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'1.99'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> shippingCost <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'0'</span></span><span class="token punctuation">;</span>    int shippingDiscountCost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> userFirstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Gulshan'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> userLastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Yadav'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> addressCity <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Delhi'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> addressStreet <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Mathura Road'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> addressZipCode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'110014'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> addressCountry <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'India'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> addressState <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Delhi'</span></span><span class="token punctuation">;</span>    <span class="token class-name">String</span> addressPhoneNumber <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'+919990119091'</span></span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> temp <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string-literal"><span class="token string">"intent"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sale"</span></span><span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">"payer"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">"payment_method"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"paypal"</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">"transactions"</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string-literal"><span class="token string">"amount"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string-literal"><span class="token string">"total"</span></span><span class="token punctuation">:</span> totalAmount<span class="token punctuation">,</span>            <span class="token string-literal"><span class="token string">"currency"</span></span><span class="token punctuation">:</span> defaultCurrency<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"currency"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string-literal"><span class="token string">"details"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string-literal"><span class="token string">"subtotal"</span></span><span class="token punctuation">:</span> subTotalAmount<span class="token punctuation">,</span>              <span class="token string-literal"><span class="token string">"shipping"</span></span><span class="token punctuation">:</span> shippingCost<span class="token punctuation">,</span>              <span class="token string-literal"><span class="token string">"shipping_discount"</span></span><span class="token punctuation">:</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> shippingDiscountCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string-literal"><span class="token string">"description"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"The payment transaction description."</span></span><span class="token punctuation">,</span>          <span class="token string-literal"><span class="token string">"payment_options"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string-literal"><span class="token string">"allowed_payment_method"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"INSTANT_FUNDING_SOURCE"</span></span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string-literal"><span class="token string">"item_list"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string-literal"><span class="token string">"items"</span></span><span class="token punctuation">:</span> items<span class="token punctuation">,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isEnableShipping <span class="token operator">&amp;&amp;</span>                isEnableAddress<span class="token punctuation">)</span>              <span class="token string-literal"><span class="token string">"shipping_address"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string-literal"><span class="token string">"recipient_name"</span></span><span class="token punctuation">:</span> userFirstName <span class="token operator">+</span>                    <span class="token string-literal"><span class="token string">" "</span></span> <span class="token operator">+</span>                    userLastName<span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"line1"</span></span><span class="token punctuation">:</span> addressStreet<span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"line2"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"city"</span></span><span class="token punctuation">:</span> addressCity<span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"country_code"</span></span><span class="token punctuation">:</span> addressCountry<span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"postal_code"</span></span><span class="token punctuation">:</span> addressZipCode<span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"phone"</span></span><span class="token punctuation">:</span> addressPhoneNumber<span class="token punctuation">,</span>                <span class="token string-literal"><span class="token string">"state"</span></span><span class="token punctuation">:</span> addressState              <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">"note_to_payer"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Contact us for any questions on your order."</span></span><span class="token punctuation">,</span>      <span class="token string-literal"><span class="token string">"redirect_urls"</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string-literal"><span class="token string">"return_url"</span></span><span class="token punctuation">:</span> returnURL<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"cancel_url"</span></span><span class="token punctuation">:</span> cancelURL      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>checkoutUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkoutUrl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>          backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">,</span>          leading<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>arrow_back_ios<span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span>          initialUrl<span class="token punctuation">:</span> checkoutUrl<span class="token punctuation">,</span>          javascriptMode<span class="token punctuation">:</span> <span class="token class-name">JavascriptMode</span><span class="token punctuation">.</span>unrestricted<span class="token punctuation">,</span>          navigationDelegate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">NavigationRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>returnURL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">final</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">final</span> payerID <span class="token operator">=</span> uri<span class="token punctuation">.</span>queryParameters<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'PayerID'</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>payerID <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                services                    <span class="token punctuation">.</span><span class="token function">executePayment</span><span class="token punctuation">(</span>executeUrl<span class="token punctuation">,</span> payerID<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  widget<span class="token punctuation">.</span><span class="token function">onFinish</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cancelURL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">NavigationDecision</span><span class="token punctuation">.</span>navigate<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>        key<span class="token punctuation">:</span> _scaffoldKey<span class="token punctuation">,</span>        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>          leading<span class="token punctuation">:</span> <span class="token class-name">IconButton</span><span class="token punctuation">(</span>              icon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>arrow_back<span class="token punctuation">)</span><span class="token punctuation">,</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black12<span class="token punctuation">,</span>          elevation<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建和配置这两个给定的上述文件之后。 我们需要从我们的主文件调用 PaypalPayment 小部件。<br>在这里，我创建了一个简单易懂的 makePayment.dart 文件，其中包含一个按钮，通过单击您将被重定向到 PaypalPayment 小部件。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/cupertino.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'PaypalPayment.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> makePayment <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>    <span class="token metadata function">@override</span>  _makePaymentState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_makePaymentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _makePaymentState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span>makePayment<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">TextStyle</span> style <span class="token operator">=</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Open Sans'</span></span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScaffoldState</span><span class="token punctuation">&gt;</span></span> _scaffoldKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScaffoldState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>        debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        home<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>          backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>transparent<span class="token punctuation">,</span>          key<span class="token punctuation">:</span> _scaffoldKey<span class="token punctuation">,</span>          appBar<span class="token punctuation">:</span> <span class="token class-name">PreferredSize</span><span class="token punctuation">(</span>            preferredSize<span class="token punctuation">:</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token function">fromHeight</span><span class="token punctuation">(</span><span class="token number">45.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>              backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span>              title<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>                mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                  <span class="token class-name">Text</span><span class="token punctuation">(</span>                    <span class="token string-literal"><span class="token string">'Paypal Payment Example'</span></span><span class="token punctuation">,</span>                    style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                        fontSize<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">,</span>                        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">[</span><span class="token number">900</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>                        fontFamily<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Open Sans'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          body<span class="token punctuation">:</span><span class="token class-name">Container</span><span class="token punctuation">(</span>              width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>                  crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                  mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>                    <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>                      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment">// make PayPal payment</span>                        <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>                          <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>                            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">PaypalPayment</span><span class="token punctuation">(</span>                              onFinish<span class="token punctuation">:</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>                                <span class="token comment">// payment done</span>                                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'order id: '</span></span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token punctuation">}</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Pay with Paypal'</span></span><span class="token punctuation">,</span> textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就这么简单，要不要赶紧去试试？</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Payment </tag>
            
            <tag> Paypal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firebase — Flutter</title>
      <link href="/Firebase-%E2%80%94-Flutter.html"/>
      <url>/Firebase-%E2%80%94-Flutter.html</url>
      
        <content type="html"><![CDATA[<p>Firebase 是 Fl​​utter 中使用最广泛的后端之一。它由谷歌开发并提供了很多功能。让我们看看 Firebase 中有哪些可以与 Flutter 应用集成的功能！</p><img src="/Firebase-%E2%80%94-Flutter/1.png" class="" title="示意图 width=400"><span id="more"></span><p><a href="https://console.firebase.google.com/">Firebase</a> 是由 Google 开发的一个平台，它提供可以与我们的应用程序集成的各种服务。<br>以下是 Firebase 提供的一些功能：</p><ul><li>验证</li><li>Firestore 数据库</li><li>实时数据库</li><li>存储</li><li>托管</li><li>职能</li><li>机器学习</li><li>崩溃分析器</li><li>还有很多…<br>那么，让我们尝试一下所有功能的用途！</li></ul><img src="/Firebase-%E2%80%94-Flutter/2.png" class="" title="示意图 width=400"><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>Firebase 为我们提供了向我们的应用添加身份验证的能力。您可以转到 Firebase 控制台并查看可以添加到您的应用程序的身份验证提供程序列表。</p><img src="/Firebase-%E2%80%94-Flutter/3.png" class="" title="示意图 width=400"><h3 id="Firestore-数据库"><a href="#Firestore-数据库" class="headerlink" title="Firestore 数据库"></a>Firestore 数据库</h3><p>Firestore 是 Firebase 提供的数据库服务之一。 Firestore 是一个 NoSQL 文档数据库，专为自动扩展、高性能和易于应用程序开发而构建。 Firestore 数据库有 2 个主要组件：</p><ul><li>文档：可以将文档视为我们在 SQL 中拥有的表。它是以键值形式存储值的记录单元。</li><li>集合：集合可以被认为是文档的容器。换句话说，集合可以看作是我们在 SQL 中拥有的数据库，而文档可以看作是数据库中的表。</li></ul><h3 id="实时数据库"><a href="#实时数据库" class="headerlink" title="实时数据库"></a>实时数据库</h3><p>实时数据库是 Firebase 提供的另一项数据库服务。 Firestore 和实时数据库之间的主要区别在于，这里的数据以 JSON 格式存储。<br>如果您不需要高级查询、排序和事务，建议使用实时数据库。<br>如果您需要与数据进行复杂的交互，例如在电子商务应用中，建议使用 Cloud Firestore。</p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>顾名思义，存储提供了在 Firebase 服务器上存储图像、文件或视频并轻松管理它的能力。最好的用例是将用户的个人资料图片存储在存储中。当您在 Firebase 存储中上传任何文件时，会生成一个唯一链接，用于访问该文件。</p><h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><p>云函数允许您随时运行任何后端代码。它可以通过特定事件触发。<br>例如，当用户更新他/她的用户名时，您希望在所有集合中更新特定用户的用户名。<br>您的云功能存储在 Google Cloud 中，无需管理或扩展任何服务器。</p><h3 id="云消息传递"><a href="#云消息传递" class="headerlink" title="云消息传递"></a>云消息传递</h3><p>Cloud Messaging 或 Firebase Cloud Messaging (FCM) 可以被认为是继数据库服务之后使用最广泛的 Firebase 功能之一。<br>使用 FCM，您可以向您的应用程序发送通知。<br>每个用户都有一个唯一的 FCM 令牌，该令牌会随着时间的推移而更新。您可以通过通知发送最多 4 KB 的有效负载。<br>例如，当用户添加新帖子或有人对您的帖子发表评论时，您可以发送通知！</p><h3 id="崩溃分析器"><a href="#崩溃分析器" class="headerlink" title="崩溃分析器"></a>崩溃分析器</h3><p>顾名思义，Crashlytics 帮助我们将崩溃报告发送到 Firebase 控制台。<br>Crashlytics 可以帮助您从您的生产级别发布的应用程序中获取日志，以便当用户抱怨某事不工作或应用程序崩溃时，您可以从 Crashlytics 获取信息。<br>不仅是日志，它还提供其他信息，例如崩溃发生在哪个操作系统和版本上，有多少用户面临这次崩溃等等！</p><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>动态链接允许我们将用户从链接带到您的应用程序上的特定内容。<br>例如，如果您正在制作社交媒体应用程序，用户可以通过社交媒体等将特定帖子分享给其他用户，当其他用户点击该链接时，您可以决定要做什么。<br>如果该用户安装了应用程序，您可以直接向他们显示特定帖子。<br>如果用户没有安装应用程序，您也可以将用户导航到 Play Store 或 App Store！</p><h3 id="Firebase-分析"><a href="#Firebase-分析" class="headerlink" title="Firebase 分析"></a>Firebase 分析</h3><p>Firebase Analytics 或 Google Analytics for Firebase 允许您将分析服务添加到您的应用中。<br>在此功能中，您可以随时添加事件。<br>默认情况下，Firebase 会提供一些分析，例如页面打开的次数、活跃用户的数量等。<br>但是，您也可以添加自定义事件，例如，用户点击登录按钮，用户停留了多长时间使用应用程序等。</p><h3 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h3><p>远程配置允许您更改应用程序的外观，而无需用户更新应用程序。<br>它是以键值对的方式存在的。<br>假设您已准备好聊天功能，但您不希望用户查看它。<br>因此，您可以创建一个键值对 isChatVisible 并将其设置为 false。现在，您可以在您的应用程序中获取它并确定是否显示聊天功能。<br>现在，只要您想显示它，只需将值更改为 true！</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>因此，在本文中，我们介绍了 Firebase 提供的主要服务。<br>虽然还有一些其他的，但这些是被广泛使用的！<br>Firebase 可能是您的后端的最佳选择之一，因为它可以在一定限度内免费使用，这可能会帮助您完成工作！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter：黄金测试 —— 比较 Widgets 和 Snapshots</title>
      <link href="/Flutter-Golden-tests-%E2%80%94-compare-Widgets-with-Snapshots.html"/>
      <url>/Flutter-Golden-tests-%E2%80%94-compare-Widgets-with-Snapshots.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-Golden-tests-%E2%80%94-compare-Widgets-with-Snapshots/1.jpeg" class="" title="示意图 width=400"><p>测试对于交付具有最佳质量的应用程序非常重要。 在这篇文章中，我想谈谈 Widget 测试中鲜为人知的特性之一——黄金测试。</p><span id="more"></span><h3 id="什么是黄金测试？"><a href="#什么是黄金测试？" class="headerlink" title="什么是黄金测试？"></a>什么是黄金测试？</h3><p>黄金测试基本上是小部件测试。<br>黄金文件是从手动验证的小部件创建的图像文件。</p><h3 id="如何创建黄金测试？"><a href="#如何创建黄金测试？" class="headerlink" title="如何创建黄金测试？"></a>如何创建黄金测试？</h3><p>作为示例，让我们为 Flutter 的“Hello World”应用程序创建一个黄金测试。</p><img src="/Flutter-Golden-tests-%E2%80%94-compare-Widgets-with-Snapshots/2.png" class="" title="示意图 width=400"><p>在 Flutter 项目测试文件夹中，我们使用以下代码创建 golden_widget_test.dart：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Golden test'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">WidgetTester</span> tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">expectLater</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token function">matchesGoldenFile</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'main.png'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，建立黄金测试就像创建普通的小控件测试一样</p><pre class="line-numbers language-none"><code class="language-none">await tester.pumpWidget(MyApp());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提取出小部件后，将其与对应的图像进行比较：</p><pre class="line-numbers language-none"><code class="language-none">await expectLater(find.byType(MyApp),                  matchesGoldenFile('main.png'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们使用expectLater，因为matchesGoldenFile是一个异步匹配器。 该方法与方法 expect 完全一样，唯一的区别是，当匹配器完成匹配时返回的是 Future 。</p><h3 id="如何生成黄金文件？"><a href="#如何生成黄金文件？" class="headerlink" title="如何生成黄金文件？"></a>如何生成黄金文件？</h3><p>现在是时候生成这些手动验证的图像了。 如果您想为所有 Golden 测试（或更新旧测试）生成图像，请运行：</p><pre class="line-numbers language-none"><code class="language-none">flutter test --update-goldens<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>main.png 文件应该出现在您的项目测试文件夹中。 不要忘记将其添加到版本控制中。</p><img src="/Flutter-Golden-tests-%E2%80%94-compare-Widgets-with-Snapshots/3.png" class="" title="示意图 width=400"><p>对于一个特定的测试，您可以运行：</p><pre class="line-numbers language-none"><code class="language-none">flutter test --update-goldens &lt;path_to_test_file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如何运行测试？"><a href="#如何运行测试？" class="headerlink" title="如何运行测试？"></a>如何运行测试？</h3><p>您现在可以像普通单元测试一样运行测试，以验证生成的 Golden 文件是否与您的小部件匹配。</p><pre class="line-numbers language-none"><code class="language-none">flutter test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>黄金测试有助于检查您的小部件是否符合预期。 它不必是整个屏幕。 您也可以为 UI 的一部分创建黄金测试。 如果您在一段时间内更改了 UI，请不要忘记生成新图像；）</p><h3 id="Underhood"><a href="#Underhood" class="headerlink" title="Underhood"></a>Underhood</h3><p>当您生成图像时，LocalFileComparator（默认的黄金文件比较器）用于创建/更新磁盘上的文件以匹配渲染。 当您运行测试时，LocalFileComparator 从本地文件系统加载图像文件，并对编码的 PNG 执行简单的逐字节比较。 如果存在完全匹配，则返回 true。 即使您的文件代表相同的像素，但编码不同，测试也会失败。<br>您可以通过实现您的来覆盖默认比较器。 为此，您的比较器需要扩展 GoldenFileComparator 类。 然后将该类的一个实例分配给goldenFileComparator。 代码片段如下所示：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  goldenFileComparator <span class="token operator">=</span> <span class="token class-name">YourComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Golden test'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">WidgetTester</span> tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">expectLater</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token function">matchesGoldenFile</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'main.png'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">YourComparator</span> <span class="token keyword">extends</span> <span class="token class-name">GoldenFileComparator</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> golden<span class="token punctuation">,</span> <span class="token class-name">Uint8List</span> imageBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO: implement update</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Uint8List</span> imageBytes<span class="token punctuation">,</span> <span class="token class-name">Uri</span> golden<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO: implement compare</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要为所有测试设置 Golden File Comparator，您可以在 flutter_test_config.dart 中指定它。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Codemagic CI/CD 运行 Flutter Golden（快照）测试</title>
      <link href="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD.html"/>
      <url>/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD.html</url>
      
        <content type="html"><![CDATA[<img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/1.jpeg" class="" title="示意图 width=400"><p>测试是开发的一个非常重要的方面，它有助于确保您的应用程序可以正常运行并为用户提供正确的外观。 很高兴有 CI/CD 工具可以自动为您检查应用程序质量、在出现问题时通知团队以及将应用程序发布给最终用户。<br>在本文中，我将和您唠一唠如何使用 Codemagic CI/CD 运行 Golden 测试。</p><span id="more"></span><h3 id="第-1-步：创建黄金（快照）测试"><a href="#第-1-步：创建黄金（快照）测试" class="headerlink" title="第 1 步：创建黄金（快照）测试"></a>第 1 步：创建黄金（快照）测试</h3><p>使用以下代码在计数器应用程序的测试文件夹中创建 golden_widget_test.dart：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">testWidgets</span><span class="token punctuation">(</span>‘<span class="token class-name">Golden</span> test’<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">WidgetTester</span> tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">expectLater</span><span class="token punctuation">(</span>find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token function">matchesGoldenFile</span><span class="token punctuation">(</span>‘goldens<span class="token operator">/</span>main<span class="token punctuation">.</span>png’<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成快照：</p><pre class="line-numbers language-none"><code class="language-none">flutter test — update-goldens<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第-2-步：使用-Codemagic-运行-Golden（快照）测试"><a href="#第-2-步：使用-Codemagic-运行-Golden（快照）测试" class="headerlink" title="第 2 步：使用 Codemagic 运行 Golden（快照）测试"></a>第 2 步：使用 Codemagic 运行 Golden（快照）测试</h3><p>当您生成黄金（快照）测试时，不同的操作系统平台会生成不同的文件。 这意味着如果您在 Linux 上生成 Golden 文件，然后在 MacOS 上运行测试，您的 Golden 测试很可能会失败。</p><p><strong>使用 Codemagic 运行的所有测试，都是使用MacOS系统完成的。</strong></p><p>因此，使用 MacOS 的人具有优势。<br>无需任何额外工作，所有通过的黄金测试都将在 Codemagic CI/CD 上成功完成。<br>即使您是 MacOS 用户，虽然，您只需要按“开始新构建”并且一切都会有条不紊的执行并最终会成功，但是，千万不要忘记在本地生成（见上文）并提交黄金文件哈。</p><img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/2.png" class="" title="示意图 width=400"><p>如果您团队中的每个人都使用 MacOS，那么您就完成了本次的学习 🥳。 无需继续阅读啦。88~</p><h3 id="第-3-步：如果您不是-MacOS-用户，请运行黄金测试"><a href="#第-3-步：如果您不是-MacOS-用户，请运行黄金测试" class="headerlink" title="第 3 步：如果您不是 MacOS 用户，请运行黄金测试"></a>第 3 步：如果您不是 MacOS 用户，请运行黄金测试</h3><p>Codemagic 支持与 MacOS 基础设施的免费远程连接，并且还具有 FCI_EXPORT_DIR 变量，用于在构建完成时从构建器机器上传任何文件。<br>你不需要在你的机器上生成 Golden 文件。相反，你可以使用 Codemagic 来完成。<br>之后，您需要创建一个仅用于生成快照的新工作流，因为，你应该不希望花费了很多构建时间，却得到以无法躲避的错误结果吧？</p><img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/3.png" class="" title="示意图 width=400"><p>在 Test 部分，您需要启用 Flutter 测试并将 Flutter 测试参数设置为：</p><pre class="line-numbers language-none"><code class="language-none">test --update-goldens<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/4.png" class="" title="示意图 width=400"><p>上面的命令将为您生成快照。 然后，您应该在Post-test脚本部分使用以下命令将生成的快照复制到 $FCI_EXPORT_DIR：</p><pre class="line-numbers language-none"><code class="language-none">cp -r test/goldens $FCI_EXPORT_DIR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/5.png" class="" title="示意图 width=400"><p>不要忘记禁用构建和发布部分！</p><img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/6.png" class="" title="示意图 width=400"><p>保存设置并开始新的构建。 完成构建后，您应该会在左侧的 Artifacts 部分中看到生成的黄金文件。</p><img src="/How-to-run-Flutter-Golden-Snapshot-Tests-with-Codemagic-CI-CD/7.png" class="" title="示意图 width=400"><p>您现在需要的是下载这个 zip 并将生成的黄金文件提取到您的项目中。<br>提示：您的项目中存在有 Golden 测试的话，如果平台不是 MacOS，则应添加跳过参数。 然后，如果你在本地运行 flutter test，测试不会因为与 Mac 的黄金差异而失败。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">testWidgets</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Golden test'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">WidgetTester</span> tester<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> tester<span class="token punctuation">.</span><span class="token function">pumpWidget</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">expectLater</span><span class="token punctuation">(</span>      find<span class="token punctuation">.</span><span class="token function">byType</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">matchesGoldenFile</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'goldens/main.png'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> skip<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isMacOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Firebase 在后台和前台推送通知</title>
      <link href="/Push-Notification-In-Flutter-in-Background-as-well-as-in-Foreground-Using-Firebase.html"/>
      <url>/Push-Notification-In-Flutter-in-Background-as-well-as-in-Foreground-Using-Firebase.html</url>
      
        <content type="html"><![CDATA[<img src="/Push-Notification-In-Flutter-in-Background-as-well-as-in-Foreground-Using-Firebase/1.png" class="" title="示意图 width=400"><p>在应用程序中，我们需要集成推送通知。<br>虽然我们成功集成了它，但有时在应用程序未运行或在后台打开时发送推送通知会出现问题或者导致应用程序的崩溃。<br>所以，本篇内容中我们将在Flutter中使用 firebase ，使用它的通知适用于所有状态：前台、后台，甚至在应用程序关闭（未运行）时。</p><span id="more"></span><p>开始吧：）</p><pre class="line-numbers language-none"><code class="language-none">Firebase 和推送通知设置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>为您的应用创建 firebase 项目并在 android/app 文件夹中添加googleservices.json 文件。</li><li>在你的 Flutter 项目中安装 firebase_messaging 和 firebase_core。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">firebase_messaging</span><span class="token punctuation">:</span> ^11.2.11<span class="token key atrule">firebase_core</span><span class="token punctuation">:</span> any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>像往常一样在 build.gradle（在应用程序级别和 android 级别）文件中进行 firebase 初始化设置。</li><li>对于推送通知，请在应用级 build.gradle 文件的依赖项下添加以下行（有时我们会遇到 multidex 问题，因此最好在 defaultConfig{} 中添加 multidex）<br>默认配置下：</li></ul><pre class="line-numbers language-none"><code class="language-none">multiDexEnabled true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在依赖项下添加如下内容：</p><pre class="line-numbers language-none"><code class="language-none">...dependencies{...implementation ‘com.google.firebase:firebase-inappmessaging-display:19.1.5’implementation 'com.android.support:multidex:1.0.3'...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在 android/app/src/main/kotlin 中创建 Application.kt 文件（简单地说您在该文件夹中看到 MainActivity.kt 文件的位置创建 Application.kt 文件）并复制并粘贴以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//package &lt;your_package_name&gt;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">FlutterApplication</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">PluginRegistry</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>firebase<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">FlutterFirebaseMessagingBackgroundService</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>firebase<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">FlutterFirebaseMessagingPlugin</span><span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token operator">:</span> <span class="token class-name">FlutterApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PluginRegistry<span class="token punctuation">.</span>PluginRegistrantCallback</span> <span class="token punctuation">{</span>  override fun <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">FlutterFirebaseMessagingBackgroundService</span><span class="token punctuation">.</span><span class="token function">setPluginRegistrant</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  override fun <span class="token function">registerWith</span><span class="token punctuation">(</span>registry<span class="token operator">:</span><span class="token class-name">PluginRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">FlutterFirebaseMessagingPlugin</span><span class="token punctuation">.</span><span class="token function">registerWith</span><span class="token punctuation">(</span>registry<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">registrarFor</span><span class="token punctuation">(</span>“<span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>firebasemessaging<span class="token punctuation">.</span></span>FirebaseMessagingPlugin</span>”<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>在 pubspec.yaml 文件中添加 flutter_local_notifications 包</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">flutter_local_notifications<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在 android/app/src/main/res/AndroidManifest.xml 中添加以下行</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>  <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.Application<span class="token punctuation">"</span></span>  <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>     <span class="token attr-name">....</span><span class="token punctuation">&gt;</span></span>       .....       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FLUTTER_NOTIFICATION_CLICK<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">到目前为止，推送通知已完成，我们将开始编码部分。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>在 main.dart 文件的 main 函数中添加这些行。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token class-name">Firebase</span><span class="token punctuation">.</span><span class="token function">initializeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>创建一个页面并通过分别导入这些包来初始化 firebase_messaging 和 flutter_local_notifications。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> ‘package<span class="token punctuation">:</span>firebase_messaging<span class="token operator">/</span>firebase_messaging<span class="token punctuation">.</span>dart’<span class="token punctuation">;</span><span class="token keyword">import</span> ‘package<span class="token punctuation">:</span>flutter_local_notifications<span class="token operator">/</span>flutter_local_notifications<span class="token punctuation">.</span>dart’<span class="token punctuation">;</span><span class="token comment">// create an instance </span><span class="token class-name">FirebaseMessaging</span> messaging <span class="token operator">=</span> <span class="token class-name">FirebaseMessaging</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span><span class="token class-name">FlutterLocalNotificationsPlugin</span> fltNotification<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><p>在这里，我们编写了在终端中获取 fcm 令牌的代码，以便我们可以在步骤 I 中创建的 firebase 项目中的云消息传递下使用这些令牌。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">pushFCMtoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> token<span class="token operator">=</span><span class="token keyword">await</span> messaging<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h3><p>在这一步中，我们编写用于接收通知格式和设置的代码。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">initMessaging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> androiInit <span class="token operator">=</span> <span class="token class-name">AndroidInitializationSettings</span><span class="token punctuation">(</span>‘<span class="token metadata function">@mipmap</span><span class="token operator">/</span>ic_launcher’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for logo</span>  <span class="token keyword">var</span> iosInit <span class="token operator">=</span> <span class="token class-name">IOSInitializationSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> initSetting<span class="token operator">=</span><span class="token class-name">InitializationSettings</span><span class="token punctuation">(</span>android<span class="token punctuation">:</span> androiInit<span class="token punctuation">,</span>iOS<span class="token punctuation">:</span>   iosInit<span class="token punctuation">)</span><span class="token punctuation">;</span>  fltNotification <span class="token operator">=</span> <span class="token class-name">FlutterLocalNotificationsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fltNotification<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>initSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> androidDetails <span class="token operator">=</span>   <span class="token class-name">AndroidNotificationDetails</span><span class="token punctuation">(</span>‘<span class="token number">1</span>’<span class="token punctuation">,</span> ‘channelName’<span class="token punctuation">,</span> ‘channel     <span class="token class-name">Description</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> iosDetails <span class="token operator">=</span> <span class="token class-name">IOSNotificationDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> generalNotificationDetails <span class="token operator">=</span>   <span class="token class-name">NotificationDetails</span><span class="token punctuation">(</span>android<span class="token punctuation">:</span> androidDetails<span class="token punctuation">,</span> iOS<span class="token punctuation">:</span> iosDetails<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FirebaseMessaging</span><span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RemoteMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">RemoteNotification</span> notification<span class="token operator">=</span>message<span class="token punctuation">.</span>notification<span class="token punctuation">;</span>   <span class="token class-name">AndroidNotification</span> android<span class="token operator">=</span>message<span class="token punctuation">.</span>notification<span class="token operator">?</span><span class="token punctuation">.</span>android<span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>notification<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> android<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     fltNotification<span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span>       notification<span class="token punctuation">.</span>hashCode<span class="token punctuation">,</span> notification<span class="token punctuation">.</span>title<span class="token punctuation">,</span> notification<span class="token punctuation">.</span>       body<span class="token punctuation">,</span> generalNotificationDetails<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h3><p>最终代码将是：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:font_awesome_flutter/font_awesome_flutter.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_datetime_picker/flutter_datetime_picker.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> selClass <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      home<span class="token punctuation">:</span> <span class="token function">sel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> sel <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  _selState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_selState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _selState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span>sel<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> _date <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Not set"</span></span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      body<span class="token punctuation">:</span> <span class="token class-name">SafeArea</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span><span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>    child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token class-name">Container</span><span class="token punctuation">(</span>    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span>          <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>          <span class="token punctuation">.</span>size          <span class="token punctuation">.</span>width<span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span>          <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>          <span class="token punctuation">.</span>size          <span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Attendance"</span></span><span class="token punctuation">,</span>        style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Padding</span><span class="token punctuation">(</span>    padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>    child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>    mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span>    mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>    shape<span class="token punctuation">:</span> <span class="token class-name">RoundedRectangleBorder</span><span class="token punctuation">(</span>    borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    elevation<span class="token punctuation">:</span> <span class="token number">4.0</span><span class="token punctuation">,</span>    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DatePicker</span><span class="token punctuation">.</span><span class="token function">showDatePicker</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>    theme<span class="token punctuation">:</span> <span class="token class-name">DatePickerTheme</span><span class="token punctuation">(</span>    containerHeight<span class="token punctuation">:</span> <span class="token number">210.0</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    showTitleActions<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    minTime<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    maxTime<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    onConfirm<span class="token punctuation">:</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'confirm </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">date</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _date <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">date<span class="token punctuation">.</span>year</span><span class="token punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">date<span class="token punctuation">.</span>month</span><span class="token punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">date<span class="token punctuation">.</span>day</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    currentTime<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    locale<span class="token punctuation">:</span> <span class="token class-name">LocaleType</span><span class="token punctuation">.</span>en<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>    mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token class-name">Row</span><span class="token punctuation">(</span>    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token class-name">Container</span><span class="token punctuation">(</span>    child<span class="token punctuation">:</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token class-name">Icon</span><span class="token punctuation">(</span>    <span class="token class-name">Icons</span><span class="token punctuation">.</span>date_range<span class="token punctuation">,</span>    size<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span>    <span class="token string-literal"><span class="token string">" </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_date</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>    style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span>    fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>    fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span>    <span class="token string-literal"><span class="token string">"  Change"</span></span><span class="token punctuation">,</span>    style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span>    fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>    fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>    height<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当您运行此代码时，您将在控制台中获得 fcm_token，然后复制该令牌并执行以下步骤：</p><h3 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h3><p>打开 firebase 项目并转到云消息部分并编写通知标题和正文，如下所示：</p><img src="/Push-Notification-In-Flutter-in-Background-as-well-as-in-Foreground-Using-Firebase/2.png" class="" title="示意图 width=400"><p>完成上图后，点击发送消息，你会得到如下所示：</p><img src="/Push-Notification-In-Flutter-in-Background-as-well-as-in-Foreground-Using-Firebase/3.png" class="" title="示意图 width=400"><p>在这里粘贴 fcm_token（您在前面的步骤中从终端复制的内容）并点击测试按钮。<br>在完成所有这些步骤之后，您将在您的移动设备中收到通知，无论是应用程序处于运行状态还是在后台运行或已关闭。</p><p>最后，推送通知有效，您可以在未来的应用程序中使用此功能。<br>谢谢 ：）</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Firebase </tag>
            
            <tag> Notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP核心技术的面试题</title>
      <link href="/PHP%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html"/>
      <url>/PHP%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<img src="/PHP%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/1.jpg" class="" title="示意图 width=400"><p>1 oop是什么?<br>答:oop是面向对象编程,面向对象编程是一种计算机编程架构,OOP 的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。</p><span id="more"></span><p>OOP具有三大特点<br>1、封装性：也称为信息隐藏，就是将一个类的使用和实现分开，只保留部分接口和方法与外部联系，或者说只公开了一些供开发人员使用的方法。于是开发人员只 需要关注这个类如何使用，而不用去关心其具体的实现过程，这样就能实现MVC分工合作，也能有效避免程序间相互依赖，实现代码模块间松藕合。<br>2、继承性：就是子类自动继承其父级类中的属性和方法，并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。PHP只支持单继承，也就是说一个子类只能有一个父类。<br>3、多态性：子类继承了来自父级类中的属性和方法，并对其中部分方法进行重写。于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。<br>多态性增强了软件的灵活性。<br>1、易维护<br>采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的。<br>2、质量高<br>在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量。<br>3、效率高<br>在软件开发时，根据设计的需要对现实世界的事物进行抽象，产生类。使用这样的方法解决问题，接近于日常生活和自然的思考方式，势必提高软件开发的效率和质量。<br>4、易扩展<br>由于继承、封装、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低。<br>2 合并两个数组有几种方式，试比较它们的异同<br>方式：<br>1、array_merge()<br>2、’+’<br>3、array_merge_recursive<br>异同：<br>array_merge 简单的合并数组<br>array_merge_recursive 合并两个数组，如果数组中有完全一样的数据，将它们递归合并<br>array_combine 和 ‘+’ ：合并两个数组，前者的值作为新数组的键</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter ListView 和 ScrollPhysics 之详解</title>
      <link href="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look.html"/>
      <url>/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/1.png" class="" title="示意图 width=400"><p>本文旨在对 ListView 类、ScrollPhysics 以及通用小部件的调整和优化进行更详细的探索。<br>Flutter 中的 ListView 是可滚动项的线性列表。我们可以使用它来制作可滚动的项目列表或制作重复项目的列表。</p><span id="more"></span><h2 id="探索-ListView-的类型"><a href="#探索-ListView-的类型" class="headerlink" title="探索 ListView 的类型"></a>探索 ListView 的类型</h2><p>我们将从查看 ListView 的类型开始，然后查看其他功能和对其进行的巧妙修改。</p><p>我们来看看 ListView 的类型有：</p><ul><li>列表显示</li><li>ListView.builder</li><li>ListView.separated</li><li>ListView.custom<br>让我们一一探索这些类型：</li></ul><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>这是 ListView 类的默认构造函数。 ListView 只需要一个子列表并使其可滚动。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/2.gif" class="" title="示意图 width=400"><p>代码的一般格式是：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">ListView</span><span class="token punctuation">(</span>  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>    <span class="token class-name">ItemOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">ItemTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">ItemThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常这应该与少量子项一起使用，因为 List 也会在列表中构造不可见的元素，并且大量元素可能会导致效率低下。</p><h3 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder()"></a>ListView.builder()</h3><p>builder() 构造函数构造一个重复的项目列表。构造函数有两个主要参数：一个 itemCount 用于列表中的项目数，一个 itemBuilder 用于构造每个列表项。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/3.gif" class="" title="示意图 width=400"><p>代码的一般格式是：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>  itemCount<span class="token punctuation">:</span> itemCount<span class="token punctuation">,</span>  itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">listItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表项是惰性构建的，这意味着仅构建特定数量的列表项，当用户向前滚动时，较早的列表项将被销毁。</p><p>巧妙的技巧：由于元素是延迟加载的，并且只加载了所需数量的元素，因此我们实际上不需要 itemCount 作为强制参数，并且列表可以是无限的。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>  itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>      child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">22.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/4.gif" class="" title="示意图 width=400"><h3 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated()"></a>ListView.separated()</h3><p>在 separator() 构造函数中，我们生成一个列表，我们可以指定每个项目之间的分隔符。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/5.gif" class="" title="示意图 width=400"><p>本质上，我们构造了两个交织的列表：一个作为主列表，一个作为分隔列表。<br>请注意，这里不能使用前面构造函数中讨论的无限计数，并且此构造函数强制使用 itemCount。<br>这种类型的代码如下：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>      itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SeparatorItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      itemCount<span class="token punctuation">:</span> itemCount<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种类型的列表允许您动态定义分隔符，为不同类型的项目设置不同类型的分隔符，在需要时添加或删除分隔符等。</p><p>此实现还可用于轻松<strong>插入其他类型</strong>的元素（例如广告），而无需对列表项中间的主列表进行任何修改。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/6.png" class="" title="示意图 width=400"><p>注意：分隔符列表长度需要比项目列表小1，因为在最后一个元素之后不存在分隔符。</p><h3 id="ListView-custom"><a href="#ListView-custom" class="headerlink" title="ListView.custom()"></a>ListView.custom()</h3><p>顾名思义，custom() 构造函数可让您构建具有自定义功能的 ListViews，以了解如何构建列表的子项。为此所需的主要参数是构建项目的 SliverChildDelegate。<br>SliverChildDelegates 的类型是</p><ul><li>SliverChildListDelegate</li><li>SliverChildBuilderDelegate</li></ul><p>SliverChildListDelegate 接受子级的直接列表，而 SliverChildBuiderDelegate 接受 IndexedWidgetBuilder（我们使用的构建器函数）。<br>您可以使用或子类化这些来构建您自己的委托。</p><pre class="line-numbers language-none"><code class="language-none">ListView.builder 本质上是一个带有 SliverChildBuilderDelegate 的 ListView.custom。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ListView 默认构造函数的行为类似于带有 SliverChildListDelegate 的 ListView.custom。<br>现在我们已经完成了 ListViews 的类型，让我们来看看 ScrollPhysics。</p><h2 id="探索-ScrollPhysics"><a href="#探索-ScrollPhysics" class="headerlink" title="探索 ScrollPhysics"></a>探索 ScrollPhysics</h2><p>为了控制滚动发生的方式，我们在 ListView 构造函数中设置了物理参数。<br>不同类型的物理是：</p><p><strong>NeverScrollableScrollPhysics</strong><br>NeverScrollableScrollPhysics 使列表不可滚动。使用它来完全禁用 ListView 的滚动。</p><p><strong>BouncingScrollPhysics</strong><br>BouncingScrollPhysics 在列表结束时弹回列表。这种效果在iOS上比较常见。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/7.gif" class="" title="示意图 width=400"><p><strong>ClampingScrollPhysics</strong><br>这是 Android 上使用的默认滚动物理。该列表在最后停止并给出指示它的效果。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/8.gif" class="" title="示意图 width=400"><p><strong>FixedExtentScrollPhysics</strong><br>这与此列表中的其他内容略有不同，因为它仅适用于 FixedExtendScrollControllers 和使用它们的列表。例如，我们将采用 ListWheelScrollView 来制作一个类似轮子的列表。<br>FixedExtentScrollPhysics 仅滚动到项目而不是两者之间的任何偏移量。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/9.gif" class="" title="示意图 width=400"><p>这个例子的代码非常简单：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">FixedExtentScrollController</span> fixedExtentScrollController <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">FixedExtentScrollController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ListWheelScrollView</span><span class="token punctuation">(</span>  controller<span class="token punctuation">:</span> fixedExtentScrollController<span class="token punctuation">,</span>  physics<span class="token punctuation">:</span> <span class="token class-name">FixedExtentScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> monthsOfTheYear<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>      children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>        <span class="token class-name">Expanded</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>            month<span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  itemExtent<span class="token punctuation">:</span> <span class="token number">60.0</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="还有一些事情要知道"><a href="#还有一些事情要知道" class="headerlink" title="还有一些事情要知道"></a>还有一些事情要知道</h2><h3 id="如何使被破坏的元素在列表中保持活跃？"><a href="#如何使被破坏的元素在列表中保持活跃？" class="headerlink" title="如何使被破坏的元素在列表中保持活跃？"></a>如何使被破坏的元素在列表中保持活跃？</h3><p>Flutter 提供了一个 KeepAlive() 小部件，它可以让一个本来会被销毁的项目保持活动状态。在列表中，元素默认包装在 AutomaticKeepAlive 小部件中。</p><img src="/Flutter-ListView-and-ScrollPhysics-A-Detailed-Look/10.png" class="" title="示意图 width=400"><p>可以通过将 addAutomaticKeepAlives 字段设置为 false 来禁用 AutomaticKeepAlives。这在元素不需要保持活动状态或 KeepAlive 的自定义实现的情况下很有用。</p><h3 id="为什么我的-ListView-在列表和外部小部件之间有空间？"><a href="#为什么我的-ListView-在列表和外部小部件之间有空间？" class="headerlink" title="为什么我的 ListView 在列表和外部小部件之间有空间？"></a>为什么我的 ListView 在列表和外部小部件之间有空间？</h3><p>默认情况下，ListView 在它和外部小部件之间有填充，要删除它，请将填充设置为 EdgeInsets.all(0.0)。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Dive Into </tag>
            
            <tag> ListView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解 Flutter TextField</title>
      <link href="/A-Deep-Dive-Into-Flutter-TextField.html"/>
      <url>/A-Deep-Dive-Into-Flutter-TextField.html</url>
      
        <content type="html"><![CDATA[<img src="/A-Deep-Dive-Into-Flutter-TextField/1.png" class="" title="示意图 width=400"><p>在本文中，我们将全面介绍 Flutter TextField 小部件，并找出它的功能和可能的定制。</p><span id="more"></span><h2 id="文本控件简介"><a href="#文本控件简介" class="headerlink" title="文本控件简介"></a>文本控件简介</h2><p>TextField 小部件允许从用户那里收集信息。最基本的使用TextField 的代码很简单：</p><pre class="line-numbers language-none"><code class="language-none">TextField()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建一个基本的 TextField：</p><img src="/A-Deep-Dive-Into-Flutter-TextField/2.png" class="" title="示意图 width=400"><h2 id="从-TextField-中检索信息"><a href="#从-TextField-中检索信息" class="headerlink" title="从 TextField 中检索信息"></a>从 TextField 中检索信息</h2><p>由于 TextField 没有 Android 中的 ID，因此无法按需检索文本，而必须在更改时将其存储在变量中或使用控制器。</p><ol><li>最简单的方法是使用 onChanged 方法并将当前值存储在一个简单的变量中。这是它的示例代码：</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">;</span><span class="token class-name">TextField</span><span class="token punctuation">(</span>  onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> text<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>第二种方法是使用 TextEditingController。控制器附加到 TextField 并让我们也可以监听和控制 TextField 的文本。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextEditingController</span> controller <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TextField</span><span class="token punctuation">(</span>  controller<span class="token punctuation">:</span> controller<span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过监听时间得到控件的变化</p><pre class="line-numbers language-none"><code class="language-none">controller.addListener(() {  // Do something here});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并获取或设置值</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">print</span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print current value</span>controller<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Demo Text"</span></span><span class="token punctuation">;</span> <span class="token comment">// Set new value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="来自-TextField-的其他回调"><a href="#来自-TextField-的其他回调" class="headerlink" title="来自 TextField 的其他回调"></a>来自 TextField 的其他回调</h2><p>TextField 小部件还提供其他回调，例如</p><ul><li>onEditingCompleted</li><li>onSubmitted</li></ul><pre class="line-numbers language-none"><code class="language-none">onEditingComplete: () {},onSubmitted: (value) {},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些是在用户单击 iOS 上的“完成”按钮时调用的回调。</p><h2 id="在-TextField-中处理焦点"><a href="#在-TextField-中处理焦点" class="headerlink" title="在 TextField 中处理焦点"></a>在 TextField 中处理焦点</h2><p>TextField获取焦点，意味着使 TextField 处于活动状态，并且来自键盘的任何输入都将导致在焦点 TextField 中输入数据。</p><ol><li>使用自动对焦<br>要在创建小部件时自动聚焦于 TextField，请将 autofocus 字段设置为 true。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  autofocus<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认情况下，这会将焦点设置在 TextField 上。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/3.gif" class="" title="示意图 width=400"><ol start="2"><li>使用自定义焦点<br>如果我们想改变一下需求，而不仅仅是自动对焦怎么办？<br>由于我们需要某种方式来引用我们接下来要关注的 TextField，因此我们将 FocusNode 附加到 TextField 并使用它来切换焦点。</li></ol><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// Initialise outside the build method</span><span class="token class-name">FocusNode</span> nodeOne <span class="token operator">=</span> <span class="token class-name">FocusNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FocusNode</span> nodeTwo <span class="token operator">=</span> <span class="token class-name">FocusNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Do this inside the build method</span><span class="token class-name">TextField</span><span class="token punctuation">(</span>  focusNode<span class="token punctuation">:</span> nodeOne<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TextField</span><span class="token punctuation">(</span>  focusNode<span class="token punctuation">:</span> nodeTwo<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">FocusScope</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestFocus</span><span class="token punctuation">(</span>nodeTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Next Field"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建两个焦点节点并将它们附加到 TextFields。当按钮被按下时，我们使用 FocusScope 请求焦点到下一个 TextField。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/4.gif" class="" title="示意图 width=400"><h2 id="更改文本字段的键盘属性"><a href="#更改文本字段的键盘属性" class="headerlink" title="更改文本字段的键盘属性"></a>更改文本字段的键盘属性</h2><p>Flutter 中的 TextField 还允许您自定义与键盘相关的属性。</p><h3 id="1-键盘类型"><a href="#1-键盘类型" class="headerlink" title="1.键盘类型"></a>1.键盘类型</h3><p>TextField 允许您自定义当 TextField 成为焦点时显示的键盘类型。我们为此更改了keyboardType 属性。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  keyboardType: TextInputType.number,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类型有：</p><ol><li>TextInputType.text（普通完整键盘）</li><li>TextInputType.number（数字键盘）</li><li>TextInputType.emailAddress（带有“@”的普通键盘）</li><li>TextInputType.datetime（带有“/”和“:”的数字键盘）</li><li>TextInputType.numberWithOptions（带有启用有符号和十进制模式选项的数字键盘）</li><li>TextInputType.multiline（多行信息优化）</li></ol><h3 id="2-TextInputAction"><a href="#2-TextInputAction" class="headerlink" title="2. TextInputAction"></a>2. TextInputAction</h3><p>更改 TextField 的 textInputAction 可让您更改键盘本身的操作按钮。<br>举个例子：</p><pre class="line-numbers language-none"><code class="language-none">TextField(  textInputAction: TextInputAction.continueAction,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这会导致“完成”按钮被“继续”按钮替换：</p><img src="/A-Deep-Dive-Into-Flutter-TextField/5.png" class="" title="示意图 width=400"><p>或者也可以这样</p><pre class="line-numbers language-none"><code class="language-none">TextField(  textInputAction: TextInputAction.send,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/6.png" class="" title="示意图 width=400"><h3 id="3-Autocorrect"><a href="#3-Autocorrect" class="headerlink" title="3. Autocorrect"></a>3. Autocorrect</h3><p>启用或禁用特定 TextField 的自动更正。使用自动更正字段进行设置。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  autocorrect: false,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这也会禁用建议。</p><h3 id="4-Text-Capitalization"><a href="#4-Text-Capitalization" class="headerlink" title="4. Text Capitalization"></a>4. Text Capitalization</h3><p>TextField 提供了一些关于如何将用户输入中的字母大写的选项。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  textCapitalization: TextCapitalization.sentences,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类型有：</p><ol><li>TextCapitalization.sentences</li></ol><p>这是我们期望的正常大小写类型，每个句子的第一个字母都大写。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/7.png" class="" title="示意图 width=400"><ol start="2"><li>TextCapitalization.characters</li></ol><p>将句子中的所有字符大写。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/8.png" class="" title="示意图 width=400"><ol start="3"><li>TextCapitalization.words</li></ol><p>将每个单词的第一个字母大写。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/9.png" class="" title="示意图 width=400"><h2 id="文本样式、对齐方式和光标选项"><a href="#文本样式、对齐方式和光标选项" class="headerlink" title="文本样式、对齐方式和光标选项"></a>文本样式、对齐方式和光标选项</h2><p>Flutter 允许对 TextField 内的文本样式和对齐方式以及 TextField 内的光标进行自定义。</p><h3 id="TextField-内的文本对齐方式"><a href="#TextField-内的文本对齐方式" class="headerlink" title="TextField 内的文本对齐方式"></a>TextField 内的文本对齐方式</h3><p>使用 textAlign 属性调整光标在 TextField 内的位置。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  textAlign: TextAlign.center,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这会导致光标和文本从 TextField 的中间开始。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/10.png" class="" title="示意图 width=400"><p>这具有通常的对齐属性：开始、结束、左、右、中心、对齐。</p><h3 id="对-TextField-中的文本进行样式设置"><a href="#对-TextField-中的文本进行样式设置" class="headerlink" title="对 TextField 中的文本进行样式设置"></a>对 TextField 中的文本进行样式设置</h3><p>我们使用 style 属性来改变 TextField 中文本的外观。使用它来更改颜色、字体大小等。这类似于 Text 小部件中的样式属性，因此我们不会花太多时间来探索它。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  style: TextStyle(color: Colors.red, fontWeight: FontWeight.w300),),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/11.png" class="" title="示意图 width=400"><h3 id="更改-TextField-中的光标"><a href="#更改-TextField-中的光标" class="headerlink" title="更改 TextField 中的光标"></a>更改 TextField 中的光标</h3><p>光标可直接从 TextField 小部件自定义。<br>您可以更改拐角的光标颜色、宽度和半径。例如，这里我随便制作了一个圆形红色光标。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  cursorColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>  cursorRadius<span class="token punctuation">:</span> <span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  cursorWidth<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/12.png" class="" title="示意图 width=400"><h3 id="控制-TextField-中的大小和最大长度"><a href="#控制-TextField-中的大小和最大长度" class="headerlink" title="控制 TextField 中的大小和最大长度"></a>控制 TextField 中的大小和最大长度</h3><p>TextFields 可以控制在其中写入的最大字符数、最大行数以及在键入文本时扩展。</p><h3 id="控制最大字符数"><a href="#控制最大字符数" class="headerlink" title="控制最大字符数"></a>控制最大字符数</h3><pre class="line-numbers language-none"><code class="language-none">TextField(  maxLength: 4,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/13.png" class="" title="示意图 width=400"><p>通过设置 maxLength 属性，强制执行最大长度，并且默认情况下将计数器添加到 TextField。</p><h3 id="制作可扩展的-TextField"><a href="#制作可扩展的-TextField" class="headerlink" title="制作可扩展的 TextField"></a>制作可扩展的 TextField</h3><p>有时，我们需要一个在一行完成时扩展的 TextField。在 Flutter 中，这有点奇怪（但很容易）。为此，我们将 maxLines 设置为 null，默认为 1。设置为 null 不是我们非常习惯的事情，但它很容易做到。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/14.png" class="" title="示意图 width=400"><p>注意：将 maxLines 设置为直接值将默认将其扩展到该行数。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  maxLines: 3,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/15.png" class="" title="示意图 width=400"><h2 id="遮蔽文本"><a href="#遮蔽文本" class="headerlink" title="遮蔽文本"></a>遮蔽文本</h2><p>要隐藏 TextField 中的文本，请将 obscureText 设置为 true。</p><pre class="line-numbers language-none"><code class="language-none">TextField(  obscureText: true,),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/16.png" class="" title="示意图 width=400"><h2 id="最后，装饰-TextField"><a href="#最后，装饰-TextField" class="headerlink" title="最后，装饰 TextField"></a>最后，装饰 TextField</h2><p>到目前为止，我们专注于 Flutter 为输入提供的功能。现在我们将开始实际设计一个精美的 TextField，而不是对您的设计师说不。<br>为了装饰 TextField，我们使用带有 InputDecoration 的装饰属性。由于 InputDecoration 类非常庞大，我们将尝试快速浏览大部分重要属性。</p><h3 id="使用提示和标签属性向用户提供信息"><a href="#使用提示和标签属性向用户提供信息" class="headerlink" title="使用提示和标签属性向用户提供信息"></a>使用提示和标签属性向用户提供信息</h3><p>提示和标签都是字符串，可帮助用户理解要在 TextField 中输入的信息。不同之处在于，一旦用户开始输入，而标签漂浮在 TextField 上，提示就会消失。</p><img src="/A-Deep-Dive-Into-Flutter-TextField/17.png" class="" title="示意图 width=400"><img src="/A-Deep-Dive-Into-Flutter-TextField/18.png" class="" title="示意图 width=400"><h3 id="您可以使用“icon”、“prefixIcon”和“suffixIcon”添加图标"><a href="#您可以使用“icon”、“prefixIcon”和“suffixIcon”添加图标" class="headerlink" title="您可以使用“icon”、“prefixIcon”和“suffixIcon”添加图标"></a>您可以使用“icon”、“prefixIcon”和“suffixIcon”添加图标</h3><p>您可以将图标直接添加到 TextFields。您也可以使用 prefixText 和 suffixText 代替 Text。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>    icon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>print<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/19.png" class="" title="示意图 width=400"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>    prefixIcon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>print<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/20.png" class="" title="示意图 width=400"><h3 id="同样对于任何其他小部件，使用“prefix”而不是“prefixIcon”"><a href="#同样对于任何其他小部件，使用“prefix”而不是“prefixIcon”" class="headerlink" title="同样对于任何其他小部件，使用“prefix”而不是“prefixIcon”"></a>同样对于任何其他小部件，使用“prefix”而不是“prefixIcon”</h3><p>要使用通用小部件而不是图标，请使用前缀字段。同样，没有明显的原因，让我们在 TextField 中添加一个循环进度指示器。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>    prefix<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/21.png" class="" title="示意图 width=400"><h3 id="提示、标签等每个属性都有其各自的样式字段"><a href="#提示、标签等每个属性都有其各自的样式字段" class="headerlink" title="提示、标签等每个属性都有其各自的样式字段"></a>提示、标签等每个属性都有其各自的样式字段</h3><p>要设置提示样式，请使用hintStyle。要设置标签样式，请使用 labelStyle。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>    hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Demo Text"</span></span><span class="token punctuation">,</span>    hintStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w300<span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/22.png" class="" title="示意图 width=400"><p><strong>如果您不想要标签但想要为用户提供持久消息，请使用“helperText”。</strong></p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>    helperText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Hello"</span></span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/23.png" class="" title="示意图 width=400"><p>使用“decoration: null”或 InputDecoration.collapsed 删除 TextField 上的默认下划线<br>使用这些来删除 TextField 上的默认下划线。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">.</span><span class="token function">collapsed</span><span class="token punctuation">(</span>hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/24.png" class="" title="示意图 width=400"><h3 id="使用“border”为-TextField-设置边框"><a href="#使用“border”为-TextField-设置边框" class="headerlink" title="使用“border”为 TextField 设置边框"></a>使用“border”为 TextField 设置边框</h3><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">TextField</span><span class="token punctuation">(</span>  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>    border<span class="token punctuation">:</span> <span class="token class-name">OutlineInputBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/A-Deep-Dive-Into-Flutter-TextField/25.png" class="" title="示意图 width=400"><p>您可以进一步进行大量装饰，但我们不能在一篇文章中介绍所有内容。<br>但我希望这可以清楚地让你了解自定义 Flutter TextFields 是多么容易，能达到这个目的就可以啦。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> TextField </tag>
            
            <tag> Dive Into </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合初学者的Flutter Bloc模式</title>
      <link href="/Flutter-bloc-for-beginners.html"/>
      <url>/Flutter-bloc-for-beginners.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-bloc-for-beginners/1.png" class="" title="示意图 width=400"><h3 id="什么是Flutter-的Bocl模式"><a href="#什么是Flutter-的Bocl模式" class="headerlink" title="什么是Flutter 的Bocl模式"></a>什么是Flutter 的Bocl模式</h3><p>Flutter bloc 是 Fl​​utter 应用程序的状态管理之一。您可以使用它以 <strong>简单</strong> 的方式处理应用程序的所有可能状态。<br>Flutter bloc 易于使用，因为您和您的团队将很快理解这个概念，无论您的级别是什么，这个库都有非常好的文档和大量的示例，也是 Flutter 社区中使用最多的库之一，因此，如果您有任何疑问或问题，您可能会通过互联网上的简单搜索找到解决方案。</p><span id="more"></span><p><strong>功能强大</strong>是因为它可以帮助您创建各种应用程序，例如您可以创建用于学习目的的应用程序，也可以在生产环境中创建复杂的应用程序，flutter bloc 在这两种情况下都有效。<br>这个库的另一个重要方面是您可以轻松地<strong>测试</strong>您的块逻辑。</p><p>更多信息，您可以访问官方网站：<a href="https://bloclibrary.dev/#/gettingstarted">https://bloclibrary.dev/#/gettingstarted</a></p><h2 id="那么……我该如何从-Flutter-bloc-开始呢？"><a href="#那么……我该如何从-Flutter-bloc-开始呢？" class="headerlink" title="那么……我该如何从 Flutter bloc 开始呢？"></a>那么……我该如何从 Flutter bloc 开始呢？</h2><p>我给你的第一个建议是你应该阅读文档并阅读基础知识，在本文中我将尝试解释它，但如果你需要更深入，我强烈建议你访问文档。</p><h3 id="它是如何工作的？"><a href="#它是如何工作的？" class="headerlink" title="它是如何工作的？"></a>它是如何工作的？</h3><p>当您使用Flutter bloc 时，您将创建事件来触发与应用程序的交互，然后负责的 bloc 将发出带有状态的请求数据，在一个真实的示例中，它将是这样的：</p><p>1- 用户单击按钮以获取游戏列表。<br>2- 事件被触发，并通知阻止用户想要一个游戏列表。<br>3- 该bloc将请求此数据（例如，从负责连接到 API 以获取数据的存储库）。<br>4-当块有数据时，它将确定数据是成功还是错误，然后它会发出一个状态。<br>5- 视图将听取欧盟可能发出的所有可能状态以对其作出反应。例如，如果 bloc 发出 Success 作为状态，则视图将使用游戏列表重建它，但如果状态为 Error，则视图将使用错误消息或您想要显示的任何内容进行重建。</p><img src="/Flutter-bloc-for-beginners/2.png" class="" title="示意图 width=400"><p>完美，现在您知道了Flutter bloc 如何工作的主要概念！现在，是时候知道如何使用它了。<br>想象一下，你想创建一个与游戏相关的块逻辑，你将需要这三个类：</p><ul><li>games_bloc.dart</li><li>games_state.dart</li><li>games_event.dart</li></ul><p>如您所见，您将需要一个块、状态和事件类。<br>在每个类中，您将管理所需的信息，不要着急，接下里的内容里我们会详细讲解一下这些知识。</p><h3 id="Bloc-Widgets"><a href="#Bloc-Widgets" class="headerlink" title="Bloc Widgets"></a>Bloc Widgets</h3><p>这些是库为您提供的用于管理所有可能情况的小部件，例如，添加事件、侦听状态、发出状态、根据状态重建视图等。</p><p><em>BlocProvider/MultiBlocProvider</em></p><p>BlocProvider 负责为其子代提供bloc。是在使用之前“初始化” bloc 的方式。</p><img src="/Flutter-bloc-for-beginners/3.png" class="" title="示意图 width=400"><p>如果您需要提供多个块，您可以使用 MultiBlocProvider 来获取不同的提供者。</p><img src="/Flutter-bloc-for-beginners/4.png" class="" title="示意图 width=400"><h3 id="RepositoryProvider-MultiRepositoryProvider"><a href="#RepositoryProvider-MultiRepositoryProvider" class="headerlink" title="RepositoryProvider/MultiRepositoryProvider"></a>RepositoryProvider/MultiRepositoryProvider</h3><p>RepositoryProvider 用于为其子项提供存储库。通常，当您需要创建存储库类的实例时，您将使用它，然后使用 BlocProvider，您将在 </p><pre class="line-numbers language-none"><code class="language-none">context.read&lt;YourRepository&gt;(); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的帮助下访问该存储库；</p><p>这是一个例子。</p><img src="/Flutter-bloc-for-beginners/5.png" class="" title="示意图 width=400"><p>如果您需要多个存储库提供程序，您可以使用 MultiRepositoryProvider</p><img src="/Flutter-bloc-for-beginners/6.png" class="" title="示意图 width=400"><h3 id="BlocListener"><a href="#BlocListener" class="headerlink" title="BlocListener"></a>BlocListener</h3><p>使用这个小部件，您将能够“监听”从您的bloc发出的不同状态，然后对它们做出反应，例如，显示一个快餐栏、对话框或导航到另一个页面……这个小部件不重建视图，它只是在听。</p><img src="/Flutter-bloc-for-beginners/7.png" class="" title="示意图 width=400"><h3 id="BlocBuilder"><a href="#BlocBuilder" class="headerlink" title="BlocBuilder"></a>BlocBuilder</h3><p>有了这个，你将能够根据它们的状态重建你的小部件。</p><img src="/Flutter-bloc-for-beginners/8.png" class="" title="示意图 width=400"><h3 id="BlocConsumer"><a href="#BlocConsumer" class="headerlink" title="BlocConsumer"></a>BlocConsumer</h3><p>当您需要控制块的状态以重建小部件以及导航或显示对话框等时，此小部件非常有用。此小部件具有侦听器和构建器功能，因此您可以一起使用它。</p><img src="/Flutter-bloc-for-beginners/9.png" class="" title="示意图 width=400"><h3 id="BlocSelector"><a href="#BlocSelector" class="headerlink" title="BlocSelector"></a>BlocSelector</h3><p>此小部件允许开发人员通过根据当前区块状态选择新值来过滤更新。</p><img src="/Flutter-bloc-for-beginners/10.png" class="" title="示意图 width=400"><p>有关更多信息，您可以查看文档。<br>之后，我们可以从例子开始🙌</p><h2 id="在实际项目中使用-Flutter-Bloc"><a href="#在实际项目中使用-Flutter-Bloc" class="headerlink" title="在实际项目中使用 Flutter Bloc"></a>在实际项目中使用 Flutter Bloc</h2><p>在这个项目中，我们将使用来自游戏 API 的数据来获取有关游戏的信息并在我们的视图中显示它们。<br>我选择的 API 是 <a href="https://rawg.io/apidocs">RAWG</a>。要使用它，您需要创建一个 API 密钥。</p><p>做好的程序大概张这个样子</p><img src="/Flutter-bloc-for-beginners/11.gif" class="" title="示意图 width=400"><p>主页有不同的部分，我们来看看。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>这是一个简单的小部件，显示两个文本和一个圆形头像。</p><img src="/Flutter-bloc-for-beginners/12.png" class="" title="示意图 width=400"><h3 id="类别小部件"><a href="#类别小部件" class="headerlink" title="类别小部件"></a>类别小部件</h3><p>显示 API 返回调用 getGenres 的不同类型。这个小部件有四种可能的状态：</p><ul><li>成功：显示类别（类型）列表。</li><li>错误：显示错误信息。</li><li>正在加载：显示一个 CircularProgressIndicator。</li><li>已选：更改所选类别的大小和颜色。</li></ul><img src="/Flutter-bloc-for-beginners/13.png" class="" title="示意图 width=400"><h3 id="分类筛选游戏小部件"><a href="#分类筛选游戏小部件" class="headerlink" title="分类筛选游戏小部件"></a>分类筛选游戏小部件</h3><p>显示 API 在使用额外的类型参数调用 getGames 时返回的按类型过滤的不同游戏。它具有三种可能的状态：</p><ul><li>成功：按类别显示游戏列表。</li><li>错误：显示错误信息。</li><li>正在加载：显示一个 CircularProgressIndicator。</li></ul><h3 id="全部游戏"><a href="#全部游戏" class="headerlink" title="全部游戏"></a>全部游戏</h3><p>显示没有过滤器的游戏列表。此小部件仅在其 bloc 发出 Success 状态并具有三种可能状态时才会显示：</p><ul><li>成功：显示游戏列表。</li><li>错误：显示错误信息。</li><li>正在加载：显示一个 CircularProgressIndicator。</li></ul><img src="/Flutter-bloc-for-beginners/15.png" class="" title="示意图 width=400"><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>对于这个例子，我创建了这个结构：</p><img src="/Flutter-bloc-for-beginners/16.png" class="" title="示意图 width=400"><p>正如您在 home 小部件文件夹中看到的那样，我添加了我之前提到的所有小部件。每个小部件都有自己的bloc，因此更干净和可维护。</p><h3 id="Home页面"><a href="#Home页面" class="headerlink" title="Home页面"></a>Home页面</h3><p>这个页面非常重要，因为我在这里使用了两个 Bloc Widget：MultiBlocProvider 和 RepositoryProvider。<br>这个页面的想法是在初始化这个页面时让所有的块都准备好使用，所以，要做到这一点，我需要用 RepositoryProvider 包装我的子类，为所有块提供存储库，而且，我需要初始化所有带有 MultiBlocProvider 的块。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/game_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/service/game_service.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/pages/home_layout.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/category/category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/all_games_list_widget/all_games_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/games_by_category/games_by_category.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>deepOrangeAccent<span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token class-name">RepositoryProvider</span><span class="token punctuation">(</span>        create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">GameRepository</span><span class="token punctuation">(</span>service<span class="token punctuation">:</span> <span class="token class-name">GameService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token class-name">MultiBlocProvider</span><span class="token punctuation">(</span>          providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AllGamesBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>              create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">AllGamesBloc</span><span class="token punctuation">(</span>                gameRepository<span class="token punctuation">:</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GameRepository</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                  <span class="token class-name">GetGames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>              create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">CategoryBloc</span><span class="token punctuation">(</span>                gameRepository<span class="token punctuation">:</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GameRepository</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                  <span class="token class-name">GetCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">BlocProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GamesByCategoryBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>              create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">GamesByCategoryBloc</span><span class="token punctuation">(</span>                gameRepository<span class="token punctuation">:</span> context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GameRepository</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">HomeLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上，正如您在这段代码中看到的那样，有两个bloc在开头添加了两个事件：</p><ul><li>获取游戏</li><li>获取类别<br>这是添加新事件以通知其我们需要一些数据的方法之一。所以此时，主页有三个bloc，触发了两个事件。现在来看看 HomeLayout。</li></ul><h3 id="HomeLayout"><a href="#HomeLayout" class="headerlink" title="HomeLayout"></a>HomeLayout</h3><p>此类具有我上面提到的三个主要小部件，还包含视图的骨架。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/all_games_widget/all_games_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/category_widget/categories_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/games_by_category_widget/games_by_category_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/header_title/header_title.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/widgets/container_body.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HomeLayout</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">HomeLayout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>      padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>        crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token class-name">HeaderTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token class-name">ContainerBody</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token class-name">CategoriesWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token class-name">GamesByCategoryWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token class-name">AllGamesWidget</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'All games'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一步是查看这些小部件中的每一个，所以让我们开始使用 CategoriesWidget。</p><h2 id="CategoriesWidget"><a href="#CategoriesWidget" class="headerlink" title="CategoriesWidget"></a>CategoriesWidget</h2><h3 id="Category-event"><a href="#Category-event" class="headerlink" title="Category event"></a>Category event</h3><p>这是我添加此小部件所需的所有事件的地方。</p><ul><li>GetCategories：获取类别的事件。</li><li>SelectCategories：知道何时选择类别的事件。</li></ul> <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"> <span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'category_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CategoryEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GetCategories</span> <span class="token keyword">extends</span> <span class="token class-name">CategoryEvent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SelectCategory</span> <span class="token keyword">extends</span> <span class="token class-name">CategoryEvent</span> <span class="token punctuation">{</span>  <span class="token class-name">SelectCategory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>idSelected<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> int idSelected<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>idSelected<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Category-state"><a href="#Category-state" class="headerlink" title="Category state"></a>Category state</h3><p>在这个类里边，bloc可以发出不同的状态。我创建了一个扩展来以简洁明了的方式处理视图中所有可能的状态。<br>我使用 Equatable 库和 Dart 中的对象作比较，如果你不是很清楚的话，强烈建议您查看<a href="https://pub.dev/packages/equatable">文档</a>。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'category_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">CategoryStatus</span> <span class="token punctuation">{</span> initial<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> selected <span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token class-name">CategoryStatusX</span> <span class="token keyword">on</span> <span class="token class-name">CategoryStatus</span> <span class="token punctuation">{</span>  bool <span class="token keyword">get</span> isInitial <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isSuccess <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isError <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>error<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isLoading <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isSelected <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>selected<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CategoryState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CategoryState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">,</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Genre</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> categories<span class="token punctuation">,</span>    int idSelected <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> categories <span class="token operator">=</span> categories <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        idSelected <span class="token operator">=</span> idSelected<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Genre</span><span class="token punctuation">&gt;</span></span> categories<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">CategoryStatus</span> status<span class="token punctuation">;</span>  <span class="token keyword">final</span> int idSelected<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> categories<span class="token punctuation">,</span> idSelected<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">CategoryState</span> <span class="token function">copyWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Genre</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> categories<span class="token punctuation">,</span>    <span class="token class-name">CategoryStatus</span><span class="token operator">?</span> status<span class="token punctuation">,</span>    int<span class="token operator">?</span> idSelected<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">CategoryState</span><span class="token punctuation">(</span>      categories<span class="token punctuation">:</span> categories <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>categories<span class="token punctuation">,</span>      status<span class="token punctuation">:</span> status <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>      idSelected<span class="token punctuation">:</span> idSelected <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idSelected<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Category-bloc"><a href="#Category-bloc" class="headerlink" title="Category bloc"></a>Category bloc</h3><p>在这里，您需要处理您拥有的所有事件。如您所见，在第 13 行和第 14 行，我正在检查事件是否是一个或另一个以创建它的方法。<br>mapGetCategoriesEventToState：此方法调用存储库以从 API 获取数据。当存储库返回数据 o 抛出错误时，该块会发出相应的状态。<br>mapSelectCategoryEventToState：此方法将发出“选定”这样的状态。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/game_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/model_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'category_event.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'category_state.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CategoryBloc</span> <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEvent</span><span class="token punctuation">,</span> <span class="token class-name">CategoryState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">CategoryBloc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>gameRepository<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">CategoryState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GetCategories</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_mapGetCategoriesEventToState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectCategory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_mapSelectCategoryEventToState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token class-name">GameRepository</span> gameRepository<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">_mapGetCategoriesEventToState</span><span class="token punctuation">(</span>      <span class="token class-name">GetCategories</span> event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> genres <span class="token operator">=</span> <span class="token keyword">await</span> gameRepository<span class="token punctuation">.</span><span class="token function">getGenres</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">emit</span><span class="token punctuation">(</span>        state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>          status<span class="token punctuation">:</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span>          categories<span class="token punctuation">:</span> genres<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stacktrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span>stacktrace<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_mapSelectCategoryEventToState</span><span class="token punctuation">(</span>      <span class="token class-name">SelectCategory</span> event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span>      state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>        status<span class="token punctuation">:</span> <span class="token class-name">CategoryStatus</span><span class="token punctuation">.</span>selected<span class="token punctuation">,</span>        idSelected<span class="token punctuation">:</span> event<span class="token punctuation">.</span>idSelected<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在……我如何检查视图中的状态？<br>好吧，当发出一个状态时，我想用相应的数据重建视图。为此，在我看来，我有一个 BlocBuilder。<br>在这种情况下，我只想在当前状态成功时重建视图，因此我使用 buildWhen() 来实现（第 11 行）。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/category_widget/category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CategoriesWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CategoriesWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBloc</span><span class="token punctuation">,</span> <span class="token class-name">CategoryState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      buildWhen<span class="token punctuation">:</span> <span class="token punctuation">(</span>previous<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> current<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isSuccess<span class="token punctuation">,</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">CategoriesSuccessWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很酷，当显示此小部件时，用户将能够单击其中一个类别，当这些发生时，我将添加两个事件：<br>GetGamesByCategory ：按类型过滤游戏。这将由另一个块处理：GamesByCategoryBloc（第 26 行）。我很快就会谈到这个bloc。<br>SelectCategory：在视图中更改所选项目的颜色和大小。这将使用相同的块处理：CategoryBloc（第 32 行）。</p><p>来看下完整的类。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/genre.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/category_widget/category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/games_by_category_widget/games_by_category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CategoriesSuccessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CategoriesSuccessWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBloc</span><span class="token punctuation">,</span> <span class="token class-name">CategoryState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>          height<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">.15</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            shrinkWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CategoryItem</span><span class="token punctuation">(</span>                key<span class="token punctuation">:</span> <span class="token class-name">ValueKey</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">state<span class="token punctuation">.</span>categories<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                category<span class="token punctuation">:</span> state<span class="token punctuation">.</span>categories<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>                callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Genre</span> categorySelected<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GamesByCategoryBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                        <span class="token class-name">GetGamesByCategory</span><span class="token punctuation">(</span>                          idSelected<span class="token punctuation">:</span> categorySelected<span class="token punctuation">.</span>id<span class="token punctuation">,</span>                          categoryName<span class="token punctuation">:</span> categorySelected<span class="token punctuation">.</span>name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>                        <span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>                  context<span class="token punctuation">.</span>read<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBloc</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                        <span class="token class-name">SelectCategory</span><span class="token punctuation">(</span>                          idSelected<span class="token punctuation">:</span> categorySelected<span class="token punctuation">.</span>id<span class="token punctuation">,</span>                        <span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            scrollDirection<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>            separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> __<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>              width<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            itemCount<span class="token punctuation">:</span> state<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们看一下 state.isSelected 时的视图（选择类别时）。<br>我使用 BlocSelector 来控制这种情况，当用户单击其中一个类别时，将触发事件并且该 bloc 将发出带有所选类别 id 的状态 isSelected，因此在 bloc选择器，我必须检查这些条件是否为真（第 24 行）以使用新的大小和颜色重建视图（第 35、36 和 39 行）。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/genre.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/category_widget/category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token class-name">CategoryCLicked</span> <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">Genre</span> categorySelected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CategoryItem</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">CategoryItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Genre</span> category<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">CategoryCLicked</span> callback<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token class-name">BlocSelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBloc</span><span class="token punctuation">,</span> <span class="token class-name">CategoryState</span><span class="token punctuation">,</span> bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>            <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isSelected <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>idSelected <span class="token operator">==</span> category<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                <span class="token operator">?</span> <span class="token boolean">true</span>                <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token class-name">AnimatedContainer</span><span class="token punctuation">(</span>                duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>easeInOutCirc<span class="token punctuation">,</span>                padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                height<span class="token punctuation">:</span> state <span class="token operator">?</span> <span class="token number">70.0</span> <span class="token punctuation">:</span> <span class="token number">60.0</span><span class="token punctuation">,</span>                width<span class="token punctuation">:</span> state <span class="token operator">?</span> <span class="token number">70.0</span> <span class="token punctuation">:</span> <span class="token number">60.0</span><span class="token punctuation">,</span>                decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>                  shape<span class="token punctuation">:</span> <span class="token class-name">BoxShape</span><span class="token punctuation">.</span>circle<span class="token punctuation">,</span>                  color<span class="token punctuation">:</span> state <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>deepOrangeAccent <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>amberAccent<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                child<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>                  <span class="token class-name">Icons</span><span class="token punctuation">.</span>gamepad_outlined<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token class-name">Container</span><span class="token punctuation">(</span>                width<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span>                child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>                  category<span class="token punctuation">.</span>name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                      fontSize<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>                      fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>                      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black87<span class="token punctuation">)</span><span class="token punctuation">,</span>                  textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                  maxLines<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                  overflow<span class="token punctuation">:</span> <span class="token class-name">TextOverflow</span><span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GameByCategoryWidget"><a href="#GameByCategoryWidget" class="headerlink" title="GameByCategoryWidget"></a>GameByCategoryWidget</h2><h3 id="GameByCategoryEvent"><a href="#GameByCategoryEvent" class="headerlink" title="GameByCategoryEvent"></a>GameByCategoryEvent</h3><p>在这里，我创建了一个事件来按类别过滤所有游戏，并添加了类别名称以将其显示为列表的标题。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'games_by_category_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GamesByCategoryEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GetGamesByCategory</span> <span class="token keyword">extends</span> <span class="token class-name">GamesByCategoryEvent</span> <span class="token punctuation">{</span>  <span class="token class-name">GetGamesByCategory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>idSelected<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>categoryName<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> int idSelected<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>idSelected<span class="token punctuation">,</span> categoryName<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GameByCategoryState"><a href="#GameByCategoryState" class="headerlink" title="GameByCategoryState"></a>GameByCategoryState</h3><p>和之前的状态类一样，这里我有一个扩展来检查不同的状态，还有一个 copyWith 方法来创建游戏列表和类别名称的新副本。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'games_by_category_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">GamesByCategoryStatus</span> <span class="token punctuation">{</span> initial<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token class-name">GamesByCategoryStatusX</span> <span class="token keyword">on</span> <span class="token class-name">GamesByCategoryStatus</span> <span class="token punctuation">{</span>  bool <span class="token keyword">get</span> isInitial <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isSuccess <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isError <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>error<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isLoading <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GamesByCategoryState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">GamesByCategoryState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">,</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> games<span class="token punctuation">,</span>    <span class="token class-name">String</span><span class="token operator">?</span> categoryName<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> games <span class="token operator">=</span> games <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        categoryName <span class="token operator">=</span> categoryName <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> games<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">GamesByCategoryStatus</span> status<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> games<span class="token punctuation">,</span> categoryName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">GamesByCategoryState</span> <span class="token function">copyWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> games<span class="token punctuation">,</span>    <span class="token class-name">GamesByCategoryStatus</span><span class="token operator">?</span> status<span class="token punctuation">,</span>    <span class="token class-name">String</span><span class="token operator">?</span> categoryName<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">GamesByCategoryState</span><span class="token punctuation">(</span>      games<span class="token punctuation">:</span> games <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>games<span class="token punctuation">,</span>      status<span class="token punctuation">:</span> status <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>      categoryName<span class="token punctuation">:</span> categoryName <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>categoryName<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GameByCategoryBloc"><a href="#GameByCategoryBloc" class="headerlink" title="GameByCategoryBloc"></a>GameByCategoryBloc</h3><p>在这个块中，我将处理调用存储库的事件 GetGamesByCategory 以获取与该类型 ID 匹配的所有游戏。当存储库返回有效数据时，bloc将发出成功的消息，例如状态和列表的新副本以及类别名称，相反，如果结果无效，则bloc将发出错误状态。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/game_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/model_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'games_by_category_event.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'games_by_category_state.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GamesByCategoryBloc</span>    <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GamesByCategoryEvent</span><span class="token punctuation">,</span> <span class="token class-name">GamesByCategoryState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">GamesByCategoryBloc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>gameRepository<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">GamesByCategoryState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GetGamesByCategory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_mapGetGamesByCategoryEventToState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token class-name">GameRepository</span> gameRepository<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">_mapGetGamesByCategoryEventToState</span><span class="token punctuation">(</span>      <span class="token class-name">GetGamesByCategory</span> event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GamesByCategoryState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> gamesByCategory <span class="token operator">=</span>          <span class="token keyword">await</span> gameRepository<span class="token punctuation">.</span><span class="token function">getGamesByCategory</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>idSelected<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">emit</span><span class="token punctuation">(</span>        state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>          status<span class="token punctuation">:</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span>          games<span class="token punctuation">:</span> gamesByCategory<span class="token punctuation">,</span>          categoryName<span class="token punctuation">:</span> event<span class="token punctuation">.</span>categoryName<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">GamesByCategoryStatus</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完美，下一步是检查视图中的状态以对它们做出反应。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/widgets/error_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'games_by_category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GamesByCategoryWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">GamesByCategoryWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GamesByCategoryBloc</span><span class="token punctuation">,</span> <span class="token class-name">GamesByCategoryState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isSuccess            <span class="token operator">?</span> <span class="token class-name">GameByCategorySuccessWidget</span><span class="token punctuation">(</span>                categoryName<span class="token punctuation">:</span> state<span class="token punctuation">.</span>categoryName<span class="token punctuation">,</span>                games<span class="token punctuation">:</span> state<span class="token punctuation">.</span>games<span class="token punctuation">,</span>              <span class="token punctuation">)</span>            <span class="token punctuation">:</span> state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isLoading                <span class="token operator">?</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>                    child<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">:</span> state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isError                    <span class="token operator">?</span> <span class="token class-name">ErrorGameWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，我根据状态使用三个选项处理视图：</p><ul><li>错误：显示常见错误小部件。</li><li>正在加载：显示 CircularProgressIndicator。</li><li>成功：显示 GameByCategorySuccessWidget。这个小部件负责按类别显示游戏列表。<br> 这是小部件：</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/result.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/games_by_category_widget/games_by_category_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GameByCategorySuccessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">GameByCategorySuccessWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>categoryName<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>games<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> games<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>      crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token class-name">Padding</span><span class="token punctuation">(</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>            left<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>            bottom<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>            categoryName<span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>              fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Container</span><span class="token punctuation">(</span>          height<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">.2</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>              left<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>              right<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            scrollDirection<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>            itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">GameByCategoryImage</span><span class="token punctuation">(</span>                name<span class="token punctuation">:</span> games<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">'No data'</span></span><span class="token punctuation">,</span>                backgroundImage<span class="token punctuation">:</span> games<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>backgroundImage <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> __<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>              width<span class="token punctuation">:</span> <span class="token number">25.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            itemCount<span class="token punctuation">:</span> games<span class="token punctuation">.</span>length<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是主布局的最后一部分，AllGamesWidget。</p><h2 id="AllGamesWidget"><a href="#AllGamesWidget" class="headerlink" title="AllGamesWidget"></a>AllGamesWidget</h2><h3 id="AllGamesEvent"><a href="#AllGamesEvent" class="headerlink" title="AllGamesEvent"></a>AllGamesEvent</h3><p>我创建了一个事件来从 API 获取所有游戏。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'all_games_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AllGamesEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GetGames</span> <span class="token keyword">extends</span> <span class="token class-name">AllGamesEvent</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AllGamesState"><a href="#AllGamesState" class="headerlink" title="AllGamesState"></a>AllGamesState</h3><p>和之前一样，我创建了一个扩展来处理所有可能的状态，并且我还有一个 copyWith 方法可以在需要时创建对象的新副本。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">'all_games_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">AllGamesStatus</span> <span class="token punctuation">{</span> initial<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token class-name">AllGamesStatusX</span> <span class="token keyword">on</span> <span class="token class-name">AllGamesStatus</span> <span class="token punctuation">{</span>  bool <span class="token keyword">get</span> isInitial <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isSuccess <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isError <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>error<span class="token punctuation">;</span>  bool <span class="token keyword">get</span> isLoading <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AllGamesState</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">AllGamesState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>initial<span class="token punctuation">,</span>    <span class="token class-name">Game</span><span class="token operator">?</span> games<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> games <span class="token operator">=</span> games <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">Game</span><span class="token punctuation">.</span>empty<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Game</span> games<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">AllGamesStatus</span> status<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> games<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">AllGamesState</span> <span class="token function">copyWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Game</span><span class="token operator">?</span> games<span class="token punctuation">,</span>    <span class="token class-name">AllGamesStatus</span><span class="token operator">?</span> status<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">AllGamesState</span><span class="token punctuation">(</span>      games<span class="token punctuation">:</span> games <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>games<span class="token punctuation">,</span>      status<span class="token punctuation">:</span> status <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AllGamesBloc"><a href="#AllGamesBloc" class="headerlink" title="AllGamesBloc"></a>AllGamesBloc</h3><p>在这里，我调用存储库，当它返回有效数据时，bloc 将通过游戏列表的副本发出成功，相反，如果存储库返回无效数据，bloc 将发出错误状态。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/game_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/model_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'all_games_event.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'all_games_state.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AllGamesBloc</span> <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AllGamesEvent</span><span class="token punctuation">,</span> <span class="token class-name">AllGamesState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">AllGamesBloc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>gameRepository<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">AllGamesState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GetGames</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_mapGetGamesEventToState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token class-name">GameRepository</span> gameRepository<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">_mapGetGamesEventToState</span><span class="token punctuation">(</span>      <span class="token class-name">GetGames</span> event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AllGamesState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> games <span class="token operator">=</span> <span class="token keyword">await</span> gameRepository<span class="token punctuation">.</span><span class="token function">getGames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">emit</span><span class="token punctuation">(</span>        state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>          status<span class="token punctuation">:</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span>          games<span class="token punctuation">:</span> games<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> <span class="token class-name">AllGamesStatus</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AllGamesWidget-1"><a href="#AllGamesWidget-1" class="headerlink" title="AllGamesWidget"></a>AllGamesWidget</h3><p>这是所有游戏小部件。在这里，我有一个 BlocBuilder 来根据状态重建视图。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_bloc/flutter_bloc.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/all_games_widget/all_games_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/widgets/error_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AllGamesWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">AllGamesWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BlocBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AllGamesBloc</span><span class="token punctuation">,</span> <span class="token class-name">AllGamesState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isSuccess            <span class="token operator">?</span> <span class="token class-name">AllGamesSuccessWidget</span><span class="token punctuation">(</span>                title<span class="token punctuation">:</span> title<span class="token punctuation">,</span>                games<span class="token punctuation">:</span> state<span class="token punctuation">.</span>games<span class="token punctuation">.</span>results<span class="token punctuation">,</span>              <span class="token punctuation">)</span>            <span class="token punctuation">:</span> state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isLoading                <span class="token operator">?</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>                    child<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">:</span> state<span class="token punctuation">.</span>status<span class="token punctuation">.</span>isError                    <span class="token operator">?</span> <span class="token class-name">ErrorGameWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些是三种状态：</p><ul><li>错误：显示常见错误小部件。</li><li>正在加载：显示 CircularProgressIndicator。</li><li>成功：显示 AllGamesSuccessWidget。这个小部件负责显示游戏列表。</li></ul><p>这是小部件：</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/repository/models/result.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:infogames/ui/home/widgets/all_games_widget/all_games_barrel.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AllGamesSuccessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token class-name">AllGamesSuccessWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>games<span class="token punctuation">,</span>    required <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> games<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>      crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>stretch<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token class-name">Padding</span><span class="token punctuation">(</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>            title<span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>              fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Container</span><span class="token punctuation">(</span>          height<span class="token punctuation">:</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> games<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24.0</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>            physics<span class="token punctuation">:</span> <span class="token class-name">NeverScrollableScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>              left<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>              right<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>              top<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">AllGamesItem</span><span class="token punctuation">(</span>                game<span class="token punctuation">:</span> games<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> __<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>              height<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            itemCount<span class="token punctuation">:</span> games<span class="token punctuation">.</span>length<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="额外的东西🙌"><a href="#额外的东西🙌" class="headerlink" title="额外的东西🙌"></a>额外的东西🙌</h3><p>如果你想有一个日志来知道哪个是当前状态，哪个是下一个要添加的事件，你需要一个 Bloc Observer 类。您应该创建此类并将其初始化到您的主类中。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">AppBlocObserver</span> <span class="token keyword">extends</span> <span class="token class-name">BlocObserver</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token class-name">BlocBase</span> bloc<span class="token punctuation">,</span> <span class="token class-name">Change</span> change<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>bloc<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bloc <span class="token operator">is</span> <span class="token class-name">Cubit</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">onTransition</span><span class="token punctuation">(</span><span class="token class-name">Bloc</span> bloc<span class="token punctuation">,</span> <span class="token class-name">Transition</span> transition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransition</span><span class="token punctuation">(</span>bloc<span class="token punctuation">,</span> transition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>transition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// main class</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token class-name">BlocOverrides</span><span class="token punctuation">.</span><span class="token function">runZoned</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    blocObserver<span class="token punctuation">:</span> <span class="token class-name">AppBlocObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>必须为您的Flutter应用程序使用良好的状态管理。 Flutter bloc 是一个很好的选择，你可以看到它使用起来并不复杂，而且很容易理解如何使用它的主要概念。此外，它还为您提供了很多管理视图或小部件的方法。<br>就个人而言，我喜欢创建具有特定逻辑的小块，以使我的代码更清晰和可维护，而不是管理很多事情的大块，但如果你的逻辑需要你也可以这样做。</p><p>感谢您阅读本文，我希望您现在可以更好地理解 Flutter bloc 的工作原理，并且能够毫无问题地将这个惊人的库添加到您的项目中。如果这对您有帮助，我将非常感谢您的反馈和鼓掌！👏</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Patterns </tag>
            
            <tag> Beginners </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中的架构模式</title>
      <link href="/Architecture-patterns-in-Flutter.html"/>
      <url>/Architecture-patterns-in-Flutter.html</url>
      
        <content type="html"><![CDATA[<img src="/Architecture-patterns-in-Flutter/1.png" class="" title="示意图 width=400"><p>Flutter 拥有一个不断增长的状态管理解决方案生态系统。 <a href="https://flutter.dev/docs/development/data-and-backend/state-mgmt/options">Flutter文档</a>本身列出了 10 多个选项！弄清楚选择哪种解决方案是一项艰巨的任务。</p><span id="more"></span><p>在我们进入更多细节之前，让我们首先了解一个非常基本的概念。<br>Flutter 是一个声明式 UI 框架。这意味着我们需要呈现在特定的状态下Flutter UI效果。</p><pre class="line-numbers language-none"><code class="language-none">UI = *f(*state*)*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>牢记这一点有助于编写更好的与框架配合使用的Flutter代码。</p><p>现在让我们看一下最广泛采用的两种状态管理模式。</p><ul><li>业务逻辑组件 (BLoC) 模式</li><li>提供者模式</li></ul><p>注意：本文假设您熟悉 Flutter 和 dart 编程语言。</p><h2 id="Business-Logic-Component-BLoC"><a href="#Business-Logic-Component-BLoC" class="headerlink" title="Business Logic Component (BLoC)"></a>Business Logic Component (BLoC)</h2><h3 id="为什么要创建-BLoC？"><a href="#为什么要创建-BLoC？" class="headerlink" title="为什么要创建 BLoC？"></a>为什么要创建 BLoC？</h3><p>谷歌在 2018 年谷歌 I/O 开发者大会上介绍了 BLoC 模式。这种模式最初是由 Google Ads 团队在他们的 Flutter 应用中使用的。它的创建是为了处理复杂的状态变化，而这在当时的解决方案中是很难做到的。</p><h3 id="什么是-BLoC？"><a href="#什么是-BLoC？" class="headerlink" title="什么是 BLoC？"></a>什么是 BLoC？</h3><p>BLoC 是 UI = f(state) 概念的直接实现。它将这一概念与 dart 语言的基本部分 - Streams 结合在一起。</p><p>流是一系列异步事件。我们也可以将应用程序中的 UI 交互视为事件流。</p><p>BLoC 接收这些事件，对这些事件进行一些处理，并输出一个状态流。</p><p>flutter_bloc 就是这样一种状态管理包，它可以轻松实现 BLoC 模式。由于一切都建立在 dart 流之上，因此它对测试有很好的支持。</p><p>Flutter bloc 包还有一些配套包，可以帮助实现一些复杂的用例，例如恢复状态和添加 undo-redo 功能。</p><p>需要注意的一点是，BLoC 只是一个消耗事件并发出状态的组件。我们仍然需要使用一些东西在小部件树中提供这个 BLoC。通常，提供程序用于此目的。</p><h3 id="BLoC-是如何工作的？"><a href="#BLoC-是如何工作的？" class="headerlink" title="BLoC 是如何工作的？"></a>BLoC 是如何工作的？</h3><p>让我们创建一个 BLoC 来搜索城市并显示搜索结果列表。</p><ol><li>首先，我们创建 BLoC 将消费的事件。</li></ol><pre class="line-numbers language-none"><code class="language-none">abstract class CitiesEvent {}class SearchCities extends CitiesEvent {  String searchTerm;  SearchCities({    required this.searchTerm,  });}class SelectCity extends CitiesEvent {  int cityId;    SelectCity({    required this.cityId,  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建 UI 将使用的状态</li></ol><pre class="line-numbers language-none"><code class="language-none">abstract class CitiesState {}class CitiesLoading extends CitiesState {}class CitiesLoaded extends CitiesState {  List&lt;City&gt; cities;    CitiesLoaded({    required this.cities,  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建 BLoC。这里我们处理传入的事件并返回状态。</li></ol><pre class="line-numbers language-none"><code class="language-none">class CitiesBloc extends Bloc&lt;CitiesEvent, CitiesState&gt; {@overrideStream&lt;CitiesState&gt; mapEventToState(  CitiesEvent event,) async* {  if (event is SearchCities) {          // Set state to Loading    yield CitiesLoading();          // Process the event    final citiesSearchResults = await fetchCities(event.searchTerm);          // Set the state to Loaded with the search results    yield CitiesLoaded(cities: citiesSearchResults);  }  // Handle other states}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>要访问小部件树中的块，我们提供了 BlocProvider</li></ol><pre class="line-numbers language-none"><code class="language-none">BlocProvider(  create: (_) =&gt; CitiesBloc(),  child: Column(    children: const [      CitiesSearchBar(),      CitiesListPage(),    ],  ),),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>我们检索上面提供的 bloc。从 UI 向 BLoC 添加新状态。 BLoC 将处理这些事件并返回状态。</li></ol><pre class="line-numbers language-none"><code class="language-none">@overrideWidget build(BuildContext context) {  final CitiesBloc citiesBloc = Provider.of&lt;CitiesBloc&gt;(context);  return Padding(    padding: const EdgeInsets.only(left: 10.0),    child: TextFormField(      onChanged: (searchTerm) =&gt;          citiesBloc.add(CitiesEvent.searchCities(searchTerm)),    ),  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>UI 将消费这些状态并更新视图</li></ol><pre class="line-numbers language-none"><code class="language-none">BlocBuilder&lt;CitiesBloc, CitiesState&gt;(  builder: (context, state) {    if (state is CitiesLoading) return CircularProgressIndicator()    if (state is CitiesLoaded) return CitiesList(state.cities)  },),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，我们定义可以在应用程序中发生的事件。我们还定义了应用程序应该显示的状态。然后当用户与应用程序交互时，事件被添加到执行必要操作的 BLoC。 BLoC 然后发出由 UI 接收的状态。</p><p>简而言之，事件进入 BLoC，状态从 BLoC 出来。</p><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><h3 id="为什么要创建提供者模式？"><a href="#为什么要创建提供者模式？" class="headerlink" title="为什么要创建提供者模式？"></a>为什么要创建提供者模式？</h3><p>BLoC 对许多人来说很难理解。在大多数用例中，总是使用数据流似乎不是一个优雅的解决方案。需要一个更简单的解决方案来处理Flutter中的状态。</p><p>第二个问题是使用 <strong>InheritedWidget</strong> 很难在小部件树下提供一些数据。</p><h3 id="什么是提供者模式？"><a href="#什么是提供者模式？" class="headerlink" title="什么是提供者模式？"></a>什么是提供者模式？</h3><p>虽然，我们将这种方法称为提供者模式，但提供者包本身只是 <strong>InheritedWidget</strong> 的一个包装器，具有一些附加功能。它可以在小部件树下提供任何类型的对象。提供者本身不保持或改变状态。为此，我们可以使用 ChangeNotifier。 ChangeNotifier 是一个类，它为任何扩展它或将其用作 mixin 的类提供侦听功能。</p><h3 id="ChangeNotifier-的替代方案"><a href="#ChangeNotifier-的替代方案" class="headerlink" title="ChangeNotifier 的替代方案"></a>ChangeNotifier 的替代方案</h3><p>将侦听器添加到更改通知器是 O(1) 操作。移除侦听器并向其侦听器发送更新是一个 O(n) 操作。</p><p>除了更改通知器，我们还可以使用状态通知器。 state_notifier 是由创建提供程序包的同一作者创建的包，因此二者的集成非常好。它比更改通知器更有效，并且使测试更容易。</p><h3 id="提供者模式是如何工作的？"><a href="#提供者模式是如何工作的？" class="headerlink" title="提供者模式是如何工作的？"></a>提供者模式是如何工作的？</h3><p>让我们实现相同的城市搜索用例</p><p>1.首先我们创建一个扩展 <strong>ChangeNotifier</strong> 的类。</p><pre class="line-numbers language-none"><code class="language-none">class CitiesSearchModel extends ChangeNotifier {List&lt;City&gt; citiesList = [];void searchCities(String searchTerm) async {citiesList = await fetchCities(searchTerm);notifyListeners();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>与 BLoC 类似，我们首先需要在小部件树中提供此类。一种称为 <strong>ChangeNotifierProvider</strong> 的特殊类型的提供程序用于此目的。</li></ol><pre class="line-numbers language-none"><code class="language-none">ChangeNotifierProvider&lt;CitiesSearchModel&gt;(  builder: (context) =&gt; CitiesSearchModel(),  child: CitiesListPage(),);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>然后我们检索我们需要的模型类并调用 <strong>searchCities</strong> 函数。该模型将执行必要的数据获取，然后调用 **notifyListeners()**。</li></ol><pre class="line-numbers language-none"><code class="language-none">@overrideWidget build(BuildContext context) {  final CitiesBloc citiesBloc = Provider.of&lt;CitiesSearchModel&gt;(context);  return Padding(    padding: const EdgeInsets.only(left: 10.0),    child: TextFormField(      onChanged: (searchTerm) =&gt;          citiesBloc.searchCities(searchTerm),    ),  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>UI 将监听模型并更新视图。消费者小部件向模型添加了一个侦听器。每当调用 notifyListeners() 时，都会再次调用构建器并更新视图。</li></ol><pre class="line-numbers language-none"><code class="language-none">Consumer&lt;CitiesSearchModel&gt;(  builder: (context, model, child) {    return CitiesList(model.citiesList);  },)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么时候用什么"><a href="#什么时候用什么" class="headerlink" title="什么时候用什么"></a>什么时候用什么</h2><p>任何好的状态管理解决方案都应该满足这些基本要求</p><ul><li>分离 UI 和业务逻辑</li><li>让代码更容易测试</li><li>使代码更具可读性</li></ul><p>这两种方法都满足所有三个要求。但每个都有自己的缺点。</p><p>BLoC 模式具有陡峭的学习曲线。它为代码库添加了很多样板。</p><p>随着我们添加更多的侦听器，提供者模式变得更慢。理想的解决方案是两者的结合。我们需要为手头的工作选择正确的工具。</p><p>BLoC 非常强大，以流为骨干。但是，切记不可大材小用哟！</p><p>在需要 BLoC 提供的功能的情况下使用它。例如，一次有 2-3 个以上的侦听器处于活动状态，或者维护和浏览状态更改的历史记录，或者对传入事件进行去抖动和转换。</p><p>将提供者模式用于大多数（如果不是全部）状态管理需求。这是一个功能强大的解决方案，您可能永远不需要使用 BLoC。</p><h2 id="近期发展"><a href="#近期发展" class="headerlink" title="近期发展"></a>近期发展</h2><p>随着这两种方法在过去几年中变得更加成熟，对这些模式进行了一些更新，使其更易于使用。</p><p>BLoC 现在是 Cubit 类的子类。 Cubit 的工作方式与 BLoC 相同，但它试图通过用简单的函数替换事件类来减少我们需要用 BLoC 编写的一些样板。</p><p>提供程序包的创建者创建了一个名为riverpod 的新包。其网站上的标语为“提供者，但不同”。它的工作原理与提供程序相同，但试图修复原始包的一些缺陷。但原始的 provider 包仍然是 Flutter 官方文档中最受欢迎和推荐的解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找Flutter模板的5个最佳网站</title>
      <link href="/5-Best-Websites-for-Flutter-Templates.html"/>
      <url>/5-Best-Websites-for-Flutter-Templates.html</url>
      
        <content type="html"><![CDATA[<img src="/5-Best-Websites-for-Flutter-Templates/0.png" class="" title="示意图 width=400"><p>模板使 Flutter 开发变得简单快捷。您还可以从模板中获得一些设计灵感。<br>今天我将分享一些令人惊叹的网站，您可以获得免费的 Flutter 模板。</p><span id="more"></span><h3 id="Free-Flutter-Source"><a href="#Free-Flutter-Source" class="headerlink" title="Free Flutter Source"></a>Free Flutter Source</h3><p><a href="https://freefluttersource.com/">Free Flutter Source</a> 是一个免费的应用程序和教程库，用于下载源代码或复制示例、模板。它是开源的且易于使用。</p><img src="/5-Best-Websites-for-Flutter-Templates/1.png" class="" title="示意图 width=400"><h3 id="Get-Widget"><a href="#Get-Widget" class="headerlink" title="Get Widget"></a>Get Widget</h3><p><a href="https://www.getwidget.dev/">GetWidget</a> 将您的整体应用程序开发时间减少到至少 40%，因为它预先构建了干净的 UI 小部件组件，您可以在 Flutter 应用程序中使用它。</p><img src="/5-Best-Websites-for-Flutter-Templates/2.png" class="" title="示意图 width=400"><h3 id="Fluttermarket-com"><a href="#Fluttermarket-com" class="headerlink" title="Fluttermarket.com"></a>Fluttermarket.com</h3><p><a href="https://fluttermarket.com/">Fluttermarket.com</a> 为 iOS 和 Android 提供具有完整源代码的模板和主题。</p><img src="/5-Best-Websites-for-Flutter-Templates/3.png" class="" title="示意图 width=400"><h3 id="Flutter-Campus"><a href="#Flutter-Campus" class="headerlink" title="Flutter Campus"></a>Flutter Campus</h3><p><a href="https://www.fluttercampus.com/">FlutterCampus.com</a> 提供免费的 Flutter 教程、应用模板、Flutter 包、Flutter 指南。</p><img src="/5-Best-Websites-for-Flutter-Templates/4.png" class="" title="示意图 width=400"><h3 id="Start-Flutter"><a href="#Start-Flutter" class="headerlink" title="Start Flutter"></a>Start Flutter</h3><p><a href="https://startflutter.com/">StartFlutter.com</a> 是一个免费下载 Flutter 模板的库。所有主题都是开源的，可用于任何用途，甚至是商业用途。下载您喜欢的内容并开始使用！</p><img src="/5-Best-Websites-for-Flutter-Templates/5.png" class="" title="示意图 width=400"><p>希望你觉得这很有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Templates </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试一下这个极佳的文件夹结构吧</title>
      <link href="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project.html"/>
      <url>/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project.html</url>
      
        <content type="html"><![CDATA[<img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/1.png" class="" title="示意图 width=400"><p>一个快速发展且计划不断变化的项目对于每个开发人员来说都是一场噩梦。<br>摆脱这种情况的唯一方法是有一个合理的规划。</p><span id="more"></span><p>由于愚蠢的文件夹结构，我一直在挣扎。而且我不希望你们再经历所有这些无谓的挣扎。<br>在本文中，我将向您介绍我的文件夹结构，您也可以在项目中使用它。</p><p>我期望建立一个能够满足如下需求的目录结构：</p><ul><li>如果我想添加功能，易于扩展。</li><li>将我的业务逻辑与我的视图 (UI) 分开。</li><li>轻松移除任何模块。</li><li>易于识别我的组件在哪里。</li><li>如果需要，可以轻松更改任何路线。</li><li>易于更新我的主题。</li><li>如果需要，可以轻松连接到新的后端。</li></ul><p>就是这样，我们想要一些简单而灵活的东西。所以，请看我接下来的表演。</p><h3 id="让我们试试这个方法"><a href="#让我们试试这个方法" class="headerlink" title="让我们试试这个方法"></a>让我们试试这个方法</h3><p>我只是想让它变得简单。所以没有技术术语，只有一个简单的解释。</p><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/2.png" class="" title="示意图 width=400"><ul><li>视图：让我们将所有视图（屏幕）分组到一个文件夹中。进一步将视图分组到单独的模块中。您可能有身份验证、个人资料、入职培训等模块……</li></ul><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/3.png" class="" title="示意图 width=400"><ul><li>控制器：所有的业务逻辑和状态管理逻辑都在这里。您可以将您的提供者、块或任何其他状态管理逻辑的逻辑放入此文件夹。您甚至可以将其重命名为您的状态管理架构，如providers、 blocs、……</li></ul><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/4.png" class="" title="示意图 width=400"><ul><li>服务：进入您的应用程序的任何数据都必须来自这里。它可能正在连接 REST API 或任何数据库连接。</li></ul><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/5.png" class="" title="示意图 width=400"><ul><li>模型：将所有模型都放在这里，例如 user_model.dart、product_model.dart 或其他任何模型。我将发表另一篇关于如何使用模型使您的项目更有条理的文章。</li></ul><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/6.png" class="" title="示意图 width=400"><ul><li>配置：这里有所有控制你的应用程序的东西，比如常量、路由、主题……</li></ul><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/7.png" class="" title="示意图 width=400"><ul><li>Assets：在项目级别创建一个文件夹“assets”。通常将其命名为“assets”。当然了没有任何强制命名的要求。但一定要在整个项目中保持一致。<br> 此外，您可以根据assets类型（如图像、Html、字体……）对资源进行分组。</li></ul><img src="/Make-your-flutter-projects-scalable-%E2%80%94-Best-folder-structure-for-your-next-project/8.png" class="" title="示意图 width=400"><h3 id="这是唯一的方法吗？"><a href="#这是唯一的方法吗？" class="headerlink" title="这是唯一的方法吗？"></a>这是唯一的方法吗？</h3><p>一点都不！</p><p>您可以使用最适合您的任何架构或文件夹结构。</p><p>因为我觉得这个对我有用。所以，我希望它也对你们有用。</p><p>要不试一试？<br>看看它是否适合你。</p><p>随心所欲地做出改变，直到找到适合自己的东西。<br>如果你发现了比这更好的东西。请一定要告诉我，并分享给其他人哈！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter的MVVM设计模式</title>
      <link href="/Flutter-MVVM-Architecture.html"/>
      <url>/Flutter-MVVM-Architecture.html</url>
      
        <content type="html"><![CDATA[<img src="/Flutter-MVVM-Architecture/1.png" class="" title="示意图 width=400"><p>模型-视图-视图模型 (MVVM) 在软件开发方面是一种非常成熟的架构模式。 MVVM 有什么特别之处？</p><span id="more"></span><img src="/Flutter-MVVM-Architecture/2.jpg" class="" title="示意图 width=400"><p>我们需要在应用程序中放置一种架构，在 UI 和业务逻辑之间进行通信。<br>MVVM 就是其中之一，它能够将业务逻辑与 UI 分离，这看起来很容易做到，但请相信我，如果你错误的使用了架构中的某些内容或做任何不准确的事情，那么请做好在应用程序开发的后期阶段遇到大麻烦的准备吧！最终您将在应用程序中进行很多令人抓狂的事情，以此来补救你的程序。</p><p>在这里，我将通过一个简单的示例来解释 MVVM，它将为您提供足够的知识来在您的应用程序中实现。</p><p>MVVM 对于将业务逻辑从视图移动到 ViewModel 和 Model 很有用。 ViewModel 是 View 和 Model 之间的中介，它携带所有用户事件并返回结果。</p><p>关键的好处是允许视图和模型之间的真正分离以及您从中获得的更大效率的实现效果。这实际上意味着当您的模型需要更改时，可以轻松更改它而无需视图，反之亦然。</p><p>应用 MVVM 会产生三个关键问题：</p><ul><li>可维护性：- 表示层和逻辑松散耦合，因为此代码易于维护和重用。由于代码库会随着时间的推移而增加，这将帮助您区分它们。</li><li>可测试性：- ViewModel 比代码隐藏或事件驱动代码更容易进行单元测试。感谢具有分离逻辑的 MVVM😀</li><li>可扩展性：- 此架构为您提供保证，使代码能够在一段时间内获得可扩展性。但请记住，一定要先保持组件的可重用性。</li></ul><p> 因此，让我们分别浏览每个组件并尝试了解其用途。请在参考以下几点的同时查看图表，您将对流程有一个清晰的了解。</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>该模型主要工作任务是实时获取数据或与数据库相关的查询。<br>该层可以包含业务逻辑、代码验证等。该层与 ViewModel 交互以获取本地数据或实时数据。数据是响应 ViewModel 给出的。</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ViewModel 是 View 和 Model 之间的中介，它接受所有用户事件并向 Model 请求数据。一旦 Model 有数据，它就会返回给 ViewModel，然后 ViewModel 将该数据通知给 View。<br>ViewModel 可以被多个 View 使用，这意味着单个 ViewModel 可以为多个 View 提供数据。</p><img src="/Flutter-MVVM-Architecture/3.png" class="" title="示意图 width=400"><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>视图是用户与屏幕上显示的小部件交互的地方。这些用户事件请求一些导航到 ViewModel 的操作，而 ViewModel 的其余部分完成这项工作。一旦 ViewModel 拥有所需的数据，它就会更新 View。</p><p>现在，我们将通过演示 MVVM 架构的示例，为了通知数据，我们将使用 Provider 状态机制。</p><img src="/Flutter-MVVM-Architecture/4.png" class="" title="示意图 width=400"><p>MediaService.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:convert'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:io'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:meta/meta.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http/http.dart'</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/apis/app_exception.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MediaService</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> _baseUrl <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"https://itunes.apple.com/search?term="</span></span><span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">dynamic</span> responseJson<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>_baseUrl <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>      responseJson <span class="token operator">=</span> <span class="token function">returnResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">SocketException</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token class-name">FetchDataException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'No Internet Connection'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> responseJson<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@visibleForTesting</span>  <span class="token keyword">dynamic</span> <span class="token function">returnResponse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">dynamic</span> responseJson <span class="token operator">=</span> <span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseJson<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>        <span class="token keyword">throw</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">401</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token number">403</span><span class="token punctuation">:</span>        <span class="token keyword">throw</span> <span class="token class-name">UnauthorisedException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">500</span><span class="token punctuation">:</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">throw</span> <span class="token class-name">FetchDataException</span><span class="token punctuation">(</span>            <span class="token string-literal"><span class="token string">'Error occured while communication with server'</span></span> <span class="token operator">+</span>                <span class="token string-literal"><span class="token string">' with status code : </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">response<span class="token punctuation">.</span>statusCode</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MediaRepository.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/media.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/services/media_service.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MediaRepository</span> <span class="token punctuation">{</span>  <span class="token class-name">MediaService</span> _mediaService <span class="token operator">=</span> <span class="token class-name">MediaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Media</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchMediaList</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">dynamic</span> response <span class="token operator">=</span> <span class="token keyword">await</span> _mediaService<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> jsonData <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'results'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">List</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Media</span><span class="token punctuation">&gt;</span></span> mediaList <span class="token operator">=</span>        jsonData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tagJson<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Media</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>tagJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mediaList<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MediaViewModel.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/cupertino.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/apis/api_response.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/media.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/media_repository.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MediaViewModel</span> <span class="token keyword">with</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>  <span class="token class-name">ApiResponse</span> _apiResponse <span class="token operator">=</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">.</span><span class="token function">loading</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Fetching artist data'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Media</span> _media<span class="token punctuation">;</span>  <span class="token class-name">ApiResponse</span> <span class="token keyword">get</span> response <span class="token punctuation">{</span>    <span class="token keyword">return</span> _apiResponse<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Media</span> <span class="token keyword">get</span> media <span class="token punctuation">{</span>    <span class="token keyword">return</span> _media<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/// Call the media service and gets the data of requested media data of</span>  <span class="token comment">/// an artist.</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchMediaData</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Media</span><span class="token punctuation">&gt;</span></span> mediaList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">MediaRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchMediaList</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      _apiResponse <span class="token operator">=</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">.</span><span class="token function">completed</span><span class="token punctuation">(</span>mediaList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      _apiResponse <span class="token operator">=</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">setSelectedMedia</span><span class="token punctuation">(</span><span class="token class-name">Media</span> media<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _media <span class="token operator">=</span> media<span class="token punctuation">;</span>    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HomScreen.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/apis/api_response.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/model/media.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/view/widgets/player_list_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/view/widgets/player_widget.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:mvvm_flutter_app/view_model/media_view_model.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:provider/provider.dart'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HomeScreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  _HomeScreenState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_HomeScreenState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> _HomeScreenState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomeScreen</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token metadata function">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO: implement initState</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata function">@override</span>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> _inputController <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApiResponse</span> apiResponse <span class="token operator">=</span> <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaViewModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Media</span><span class="token punctuation">&gt;</span></span> mediaList <span class="token operator">=</span> apiResponse<span class="token punctuation">.</span>data <span class="token operator">as</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Media</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Media Player'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>            <span class="token class-name">Padding</span><span class="token punctuation">(</span>              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>                children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>                  <span class="token class-name">Expanded</span><span class="token punctuation">(</span>                    child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                      margin<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>                        color<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>accentColor<span class="token punctuation">.</span><span class="token function">withAlpha</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span>                          style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>                            fontSize<span class="token punctuation">:</span> <span class="token number">15.0</span><span class="token punctuation">,</span>                            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">,</span>                          controller<span class="token punctuation">:</span> _inputController<span class="token punctuation">,</span>                          onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                          onSubmitted<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaViewModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>                                  <span class="token punctuation">.</span><span class="token function">setSelectedMedia</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaViewModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                                      listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                                  <span class="token punctuation">.</span><span class="token function">fetchMediaData</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                          <span class="token punctuation">}</span><span class="token punctuation">,</span>                          decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>                            border<span class="token punctuation">:</span> <span class="token class-name">InputBorder</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span>                            enabledBorder<span class="token punctuation">:</span> <span class="token class-name">InputBorder</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span>                            focusedBorder<span class="token punctuation">:</span> <span class="token class-name">InputBorder</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span>                            prefixIcon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>                              <span class="token class-name">Icons</span><span class="token punctuation">.</span>search<span class="token punctuation">,</span>                              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                            hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Enter Artist Name'</span></span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            mediaList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mediaList<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>                <span class="token operator">?</span> <span class="token class-name">Expanded</span><span class="token punctuation">(</span>                    child<span class="token punctuation">:</span> <span class="token class-name">PlayerListWidget</span><span class="token punctuation">(</span>mediaList<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Media</span> media<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaViewModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setSelectedMedia</span><span class="token punctuation">(</span>media<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">:</span> <span class="token class-name">Expanded</span><span class="token punctuation">(</span>                    child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>                      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Search the song by Artist'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaViewModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>media <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>              <span class="token class-name">Align</span><span class="token punctuation">(</span>                  alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>bottomCenter<span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">PlayerWidget</span><span class="token punctuation">(</span>                    function<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MVVM 现在被大量使用，因为它支持事件驱动的方法，这与许多组件是基于事件执行密切相关。</p><p>以上所有源代码，您可以移步：<a href="https://github.com/reasonpun/my_100_goals/tree/main/goals_03">https://github.com/reasonpun/my_100_goals/tree/main/goals_03</a></p><!-- https://medium.com/flutterworld/flutter-mvvm-architecture-f8bed2521958 -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的介绍Flutter的MVVM设计模式</title>
      <link href="/An-Introduction-to-MVVM-in-Flutter.html"/>
      <url>/An-Introduction-to-MVVM-in-Flutter.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">在这篇文章中，我们将使用 MVVM 设计模式来编写一个完整的 Flutter 应用程序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><img src="/An-Introduction-to-MVVM-in-Flutter/1.jpeg" class="" title="示意图 width=400"><p>默认情况下，Flutter 应用程序不使用任何特定的设计模式。<br>这意味着开发人员需要自己负责选择和实现适合他们需求的模式。<br>由于Flutter的声明性特性，使得其成为 MVVM 设计模式的理想候选者。</p><h3 id="了解-MVVM"><a href="#了解-MVVM" class="headerlink" title="了解 MVVM"></a>了解 MVVM</h3><p>MVVM 代表模型-视图-视图模型。<br>基本思想是创建一个向视图提供数据的视图模型。视图可以使用视图模型提供的数据来填充自己。创建视图模型层允许您编写模块化代码，这些代码可以被多个视图使用。</p><p>MVVM 设计模式起源于微软。 </p><p>MVVM 大量用于编写 Windows Presentation Foundation (WPF) 应用程序。 MVVM 模式是 PresentationModel 的一个花哨名称。</p><p>由于设计模式与平台无关，因此它可以与任何框架一起使用，包括 Flutter。</p><p>在这篇文章中，我们将创建一个电影应用程序，它将根据输入的关键字获取电影并将其显示给用户。这个应用程序将基于 MVVM 原则创建。<br>在深入研究代码之前，请查看下面的动画以了解我们将要构建的应用程序。</p><img src="/An-Introduction-to-MVVM-in-Flutter/2.gif" class="" title="示意图 width=400"><h3 id="实现网络服务"><a href="#实现网络服务" class="headerlink" title="实现网络服务"></a>实现网络服务</h3><p>我们将使用<a href="http://www.omdbapi.com/">OMDb API</a>来获取电影。确保您在他们的网站上注册以获取 API 密钥。如果没有有效的 API 密钥，您将无法成功执行请求。</p><p>现在您已经注册了 OMDb 服务并收到了您的密钥，我们可以继续开发 Web 服务/客户端。 Web 服务使用 HTTP 包发出网络请求并下载 JSON 响应，但您可以随意使用任何您想要的网络包。</p><p>下载 JSON 后，将其灌入到电影模型以获取电影对象列表，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">import 'package:movies_app/models/movie.dart';import 'package:http/http.dart' as http; class Webservice {  Future&lt;List&lt;Movie&gt;&gt; fetchMovies(String keyword) async {    final url = "http://www.omdbapi.com/?s=$keyword&amp;apikey=YOURAPIKEYHERE";    final response = await http.get(url);    if(response.statusCode == 200) {       final body = jsonDecode(response.body);        final Iterable json = body["Search"];       return json.map((movie) =&gt; Movie.fromJson(movie)).toList();    } else {      throw Exception("Unable to perform request!");    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>电影模型实现如下：</p><pre class="line-numbers language-none"><code class="language-none">class Movie {  final String title;   final String poster;   Movie({this.title, this.poster});  factory Movie.fromJson(Map&lt;String, dynamic&gt; json) {    return Movie(      title: json["Title"],       poster: json["Poster"]    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>电影只是由标题和海报组成。它还公开了一个 fromJson 函数，它允许我们基于返回的JSON格式数据创建一个 Movie 对象。<br>我们使用模型来定义我们的电影对象，但实际上，它们是用来实现为数据传输对象 (DTO) 的服务的。<br>至此，我们拥有了所有需要的数据，下一步就是将其显示在屏幕上。在将数据显示在用户界面之前，我们必须创建负责向视图提供数据的视图模型。</p><h3 id="实现视图模型"><a href="#实现视图模型" class="headerlink" title="实现视图模型"></a>实现视图模型</h3><p>尽管您可以通过创建单个视图模型来获得所需的结果，但我们将在我们的应用程序中创建两个单独的视图模型。</p><p>一个视图模型 MoviesListViewModel 将用来表示电影列表数据并显示在整个屏幕上。<br>第二个视图模型 MovieViewModel 将表示一个单独的电影——它将显示在视图中。</p><p>视图模型的实现如下所示：</p><pre class="line-numbers language-none"><code class="language-none">class MovieListViewModel extends ChangeNotifier {  List&lt;MovieViewModel&gt; movies = List&lt;MovieViewModel&gt;();   Future&lt;void&gt; fetchMovies(String keyword) async {   // TODO   }}class MovieViewModel {  final Movie movie;   MovieViewModel({this.movie});  String get title {    return this.movie.title;   }  String get poster {    return this.movie.poster;   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MovieListViewModel 由 movies 属性组成，该属性将返回 MovieViewModel 对象的列表。 MovieViewModel 接受一个 Movie 对象并将标题和海报作为只读属性返回。下一步是使用 Web 服务获取电影。</p><h3 id="设置-ChangeNotifier-和-ChangeNotifierProvider"><a href="#设置-ChangeNotifier-和-ChangeNotifierProvider" class="headerlink" title="设置 ChangeNotifier 和 ChangeNotifierProvider"></a>设置 ChangeNotifier 和 ChangeNotifierProvider</h3><p>MovieListViewModel 中的 fetchMovies 方法会通过使用Web服务，从 OMDb API 检索电影。<br>实现如下图所示：</p><pre class="line-numbers language-none"><code class="language-none">class MovieListViewModel extends ChangeNotifier {  List&lt;MovieViewModel&gt; movies = List&lt;MovieViewModel&gt;();   Future&lt;void&gt; fetchMovies(String keyword) async {    final results =  await Webservice().fetchMovies(keyword);    this.movies = results.map((item) =&gt; MovieViewModel(movie: item)).toList();    print(this.movies);    notifyListeners();   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们更新了 MovieListViewModel 以从 ChangeNotifier 继承。 ChangeNotifier 允许我们发布更改通知，视图可以使用它来更新自身。<br>在我们使用网络服务获取电影后，我们调用 notifyListeners 函数，通知所有订阅者/听众。目前没有人收听，所以没有人得到消息：电影已经下载完毕。</p><p>为了用更新的 MovieListViewModel 通知视图，我们必须使用 ChangeNotifierProvider，它是 Provider 包的一部分。通过在pubspec.yaml文件中添加依赖来添加provider包，如下图：</p><pre class="line-numbers language-none"><code class="language-none">dependencies:  flutter:    sdk: flutter  # The following adds the Cupertino Icons font to your application.  # Use with the CupertinoIcons class for iOS style icons.  cupertino_icons: ^0.1.2  http: ^0.12.0+2  provider: ^3.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们需要找到一个从提供者那里注入值的好地方。<br>我们正在谈论的值是 MovieListViewModel 的一个实例，因为它扩展了 ChangeNotifier 并向侦听器发布通知。</p><p>在我们的例子中，我们可以使用 main.dart 文件并将值注入到 MovieListPage。这意味着 MovieListViewModel 将可用于 MovieListPage 及其所有子项。</p><pre class="line-numbers language-none"><code class="language-none">void main() =&gt; runApp(App());class App extends StatelessWidget {  @override  Widget build(BuildContext context) {    return MaterialApp(      title: "Movies",      home:       ChangeNotifierProvider(        create: (context) =&gt; MovieListViewModel(),         child: MovieListPage(),      )    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完美！最后一步是在屏幕上显示数据。</p><h3 id="显示电影"><a href="#显示电影" class="headerlink" title="显示电影"></a>显示电影</h3><p>对于我们的应用程序，我们将要求用户输入关键字并按键盘上的搜索键。这将调用 MovieListViewModel 上的 fetchMovies 方法，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Container(   padding: EdgeInsets.only(left: 10),   decoration: BoxDecoration(       color: Colors.grey,        borderRadius: BorderRadius.circular(10)   ),   child: TextField(       controller: _controller,       onSubmitted: (value) {       if(value.isNotEmpty) {           vm.fetchMovies(value);           _controller.clear();       }       },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fetchMovies 将根据关键字获取所有电影并触发 notifyListeners。为了获取 MovieListViewModel 的更新实例，我们将从provider包中获得帮助，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">@override Widget build(BuildContext context) { final vm = Provider.of&lt;MovieListViewModel&gt;(context);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过在 build 方法中添加 Provider，我们确保无论何时触发 notifyListener，我们都可以访问 MovieListViewModel 的实例。</p><p>现在，如果您运行您的应用程序，它将根据关键字获取电影并将其显示在用户界面上。</p><p>如果您想在页面加载时执行初始提取，则可以将 StatelessWidget 更新为 StatefulWidget 并从 initState 方法内部调用 fetchMovies，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">class _MovieListPageState extends State&lt;MovieListPage&gt; {  final TextEditingController _controller = TextEditingController();   @override  void initState() {    super.initState();    // you can uncomment this to get all batman movies when the page is loaded    Provider.of&lt;MovieListViewModel&gt;(context, listen: false).fetchMovies("batman");  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，我们为 Provider 传递了 listen: false ，这意味着这只是一次调用，并且 Provider 不会跟踪更改。</p><p>以上所有源代码，您可以移步：<a href="https://github.com/reasonpun/my_100_goals/tree/main/goals_02">https://github.com/reasonpun/my_100_goals/tree/main/goals_02</a></p><p>谢谢阅读！</p><!-- https://betterprogramming.pub/mvvm-in-flutter-edd212fd767a -->]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高移动应用开发速度的10大Flutter工具</title>
      <link href="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development.html"/>
      <url>/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development.html</url>
      
        <content type="html"><![CDATA[<p>Flutter 是让企业保持在数字化轨道上的最具吸引力和最出色的框架之一。<br>企业可以从多种 Flutter 应用开发工具中进行选择来开发应用。这些工具中的每一个都有可能使开发人员的编码更加敏捷和简单。</p><span id="more"></span><p>尽管得到了Google 的大力支持，但是由于Flutter的面向的方面很多，所以如果你想做的更加优秀，还是需要一些第三方开发工具帮助。作为开发者的你，应该熟悉许多优秀的 Flutter 开发工具。</p><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/1.jpeg" class="" title="示意图 width=400"><h3 id="Crashlytics"><a href="#Crashlytics" class="headerlink" title="Crashlytics:"></a>Crashlytics:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/2.png" class="" title="示意图 width=400"><p>即使您可以得到应用崩溃时发出的错误信息，但是，确定问题的原因也可能需要很长时间。<br>使用Crashlytics，并借助其仪表板不仅可以让您全面而清晰地了解您的软件用户正在经历的事情，还可以使用软件改进建议为您提供关于可能导致致命错误的参考建议。</p><p>崩溃检测功能在仪表板上的崩溃报告旁边，并通过指示可能的潜在原因（例如 SDK 缺陷和 API 滥用）来提供更多信息，这些原因在多个应用程序中是相似的。这可以作为进一步调查的起点，节省您的时间并加快您的流程。</p><h3 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase:"></a>Firebase:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/3.jpeg" class="" title="示意图 width=400"><p>Firebase 是一个来自 Google 的移动应用程序开发平台，具有强大的开发、处理和增强应用程序的功能。<br>本质上是一个开发人员可以依赖的工具集合，可以根据需求创建应用程序并对其进行扩展。 </p><p>旨在为开发者解决三个主要问题: </p><ul><li>快速开发应用 </li><li>充满信心地发布和监控应用程序 </li><li>吸引用户</li></ul><p>依赖这个平台的开发人员可以访问他们必须自己开发的服务，这使他们能够专注于提供强大的应用程序体验。<br>Google Firebase 平台的一些突出特性包括数据库、身份验证、推送消息、分析、文件存储等等。<br>由于这些服务基于云托管，开发者可以顺利地进行按需扩展，而没有任何麻烦。Firebase 目前是全球开发者所依赖的顶级应用开发平台之一。</p><h3 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio:"></a>Visual Studio:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/4.jpeg" class="" title="示意图 width=400"><p>Flutter 开发人员使用 Visual Studio Code 来运行任务、版本控制以及创建、调试云和 Web 应用程序。<br>Microsoft 为 macOS、Windows 和 Linux 创建了这个开源和免费的代码编辑器。<br>它归因于智能代码完成、调试支持、片段、语法高亮、代码重构和嵌入式 GIT。</p><p>Visual Studio Code 功能强大且轻量级，但无法处理功能更全面的 IDE（如 Visual Studio IDE）所采用的复杂工作流程。<br>它与 C++ 和 Python 完美配合。它高效且易于使用。</p><h3 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot:"></a>Screenshot:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/5.png" class="" title="示意图 width=400"><p>Screenshot是一个命令行程序，可以让你截取屏幕截图，是 Flutter 应用开发最高效的 IDE 之一。它还允许您立即将它们发布到状态栏。<br>然后可以轻松地将这些屏幕截图包含在您的 Flutter 应用程序中。<br>这些集成的屏幕截图还兼容 iOS 和 Android 设备。<br>因此，它似乎是开发人员中最受欢迎的 Flutter 应用程序开发工具之一。</p><h3 id="Speech-to-Text"><a href="#Speech-to-Text" class="headerlink" title="Speech to Text:"></a>Speech to Text:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/6.png" class="" title="示意图 width=400"><p>该插件包含一组类，可以方便地在 Flutter 中使用底层平台的语音识别功能。<br>它支持安卓、iOS和网络。<br>该库的目标用例是命令和短语，而不是持续的口语转换或始终在线的聆听。</p><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio:"></a>Android Studio:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/android-studio-logo.webp" class="" title="示意图 width=400"><p>大量使用 Flutter 平台创建应用程序的开发人员使用 Android Studio。<br>这是用于创建有用应用程序的最高效的 IDE 之一。<br>它包括小部件编辑、语法突出显示和代码完成功能。<br>下载和安装了Android Studio 之后，你就不需要有额外的担心了，因为它还支持您在 Android 设备或模拟器上设计和启动应用程序。</p><h3 id="Push-Notifications"><a href="#Push-Notifications" class="headerlink" title="Push Notifications:"></a>Push Notifications:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/7.jpg" class="" title="示意图 width=400"><p>Push Notifications非常适合提高用户参与度并提醒用户关注最新信息。 Google 的 Firebase Cloud Messaging (FCM) 是一项免费（是的，免费！）跨平台消息服务。它使得向一系列平台上的特定用户组发送通知变得简单。我将在本文中向您展示如何在 Android 和 iOS 上设置推送通知；如果您只想在其中一个平台上进行设置，则可以跳过特定于平台的部分。</p><h3 id="Panache"><a href="#Panache" class="headerlink" title="Panache:"></a>Panache:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/8.png" class="" title="示意图 width=400"><p>Panache 是 Fl​​utter 的material编辑器，可让您为应用构建material主题。您可以更改颜色、形状、样式和其他主题功能，然后将 dart 文件保存到 Drive 文件夹。<br>您可以让 Flutter 开发人员使用 Panache 为您的应用程序生成定制且具有视觉吸引力的material和主题。<br>Panache 是完全免费和开源的，允许您评估代码。<br>Panache 目前被超过 4000 万开发人员和测试人员使用。</p><h3 id="Flutter-Stripe"><a href="#Flutter-Stripe" class="headerlink" title="Flutter Stripe:"></a>Flutter Stripe:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/9.jpg" class="" title="示意图 width=400"><p>Stripe 会为您收集所有付款数据。<br>通常，Stripe、Square 或 Braintree 等服务会为您提供存储应用程序收集的所有付款信息，但它们会将 UI 部分留给开发人员。<br>这意味着必须处理所有那些无聊的事情，比如卡片验证、3D 身份验证等。</p><h3 id="Pusher"><a href="#Pusher" class="headerlink" title="Pusher:"></a>Pusher:</h3><img src="/Top-10-Flutter-Tools-to-Increase-Speed-of-Mobile-App-Development/10.png" class="" title="示意图 width=400"><p>Pusher 是一项托管服务，可让您轻松地将实时数据和功能添加到您的移动和在线应用程序中。</p><p>作为最受欢迎的软件开发工具包之一，Flutter 在移动应用程序开发人员中越来越受欢迎。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发者们，你们也许需要这5个神奇的工具</title>
      <link href="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7.html"/>
      <url>/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7.html</url>
      
        <content type="html"><![CDATA[<p>世上有着数以万计的工具，这些工具都不同程度上为我们的开发提供了很大的帮助，也许你正在使用着这样的工具，不过，你想不想来看看我今天给你们推荐的这5款相当神奇的工具捏？</p><img src="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7/1.jpeg" class="" title="示意图 width=400"><span id="more"></span><ol><li>Xcodes</li></ol><pre class="line-numbers language-none"><code class="language-none">这是一款非常好用的工具，它可以非常简单的管理你已经安装的多款不同版本的Xcode，包括：安装和切换哟<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用过的人都知道，支持多个Xcode版本并与betas保持同步十分惹人恼怒，而且还会消耗大量磁盘空间。打开官网一个个查找您需要的一个 Xcode 版本非常烦人！</p><p>现在，福利来了，使用Xcodes这款软件，你可以非常简单的下载并且管理所有你需要的Xcode的版本。不仅可以查看已经安装的版本，还能通过简单的点击获取到不同的版本，只需要点击一下哟。</p><p>价格？是免费的，哈！<br>如果你现在就像去尝试，那么请移步<a href="https://github.com/RobotsAndPencils/XcodesApp/">GitHub</a>。</p><img src="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7/2.png" class="" title="示意图 width=400"><ol start="2"><li>DevCleaner for Xcode</li></ol><pre class="line-numbers language-none"><code class="language-none">如果您想回收用于各种 Xcode 缓存的数十 GB 存储空间 - 这个工具适合您！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>旧的 Xcode 和 iOS 版本、派生数据、文档和日志……我们的 Mac 上堆积了很多垃圾。 DevCleaner 会清除您的开发人员目录并列出所有不需要的垃圾。🧹</p><p>您可以选择要保存的内容，也可以选择一键删除不需要的内容。这样，您可以在短时间内节省大量的硬盘空间。使用此工具，您会真真切切的感受到减少很多磁盘空间的快感。</p><p>Price: free</p><p>价格？使用是免费的，但是存在应用内付费情况</p><p>登录<a href="https://apps.apple.com/de/app/devcleaner-for-xcode/id1388020431?mt=12">Mac App Store</a> 去下载吧</p><img src="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7/3.jpg" class="" title="示意图 width=400"><ol start="3"><li>ControlRoom</li></ol><pre class="line-numbers language-none"><code class="language-none">掌控你的 iOS 模拟器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个应用程序可以增强您的模拟器！ 🚀</p><p>它提供对语言和位置设置的便捷访问，并允许更改时间、电池电量和网络状态。它还可以触发推送通知并模拟位置变化。</p><p>价格？免费的</p><p>下载：克隆 <a href="https://github.com/twostraws/ControlRoom">GitHub</a> 项目并使用 Xcode 构建项目。使用这个应用程序可能稍微有一些难度，但对开发人员的你来说应该没什么问题吧 😉</p><img src="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7/4.png" class="" title="示意图 width=400"><ol start="4"><li>SwiftAlyzer</li></ol><pre class="line-numbers language-none"><code class="language-none">使用这个软件之后，你可以想看谷歌地图一样查看你的Swift代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SwiftAlyzer可以分析和可视化您的项目。了解您的应用程序的结构，以及包含哪些类、结构、协议和枚举，以及相互之间的关系。</p><p>没事的时候用用，你会发现这个应用程序和我一样有用😁</p><p>价格？免费</p><p>下载：需要在其<a href="https://swiftalyzer.com/">网站</a>下载。</p><img src="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7/5.png" class="" title="示意图 width=400"><ol start="5"><li>Fireworks</li></ol><pre class="line-numbers language-none"><code class="language-none">Swift 的粒子效果<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您是否曾经创建过粒子效果来为您的应用程序添加特殊的触感？<br>如果是这样，您将知道需要多少尝试和错误才能以您想要的方式获得 CAEmitterLayer 和 CAEmitterCells。</p><p>Fireworks 是一个创建粒子效果的编辑器。您可以更改效果的各个方面并立即查看结果。<br>最棒的是：它会生成 Swift 代码，因此您可以使用刚刚配置的效果。</p><p>这个应用程序是每个使用粒子效果的人必备的！ 🎆</p><p>价格: 免费 (网站), 4.99$ (Mac App Store)</p><p>下载: 可以从其<a href="https://www.fireworksapp.xyz/">网站</a>下载这个app。您也可以从 [Mac App Store](您也可以从 Mac App Store 购买) 购买。</p><img src="/iOS%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC%EF%BC%8C%E4%BD%A0%E4%BB%AC%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E8%BF%995%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E5%B7%A5%E5%85%B7/6.gif" class="" title="示意图 width=400"><p>感谢您的阅读，我希望，通过这篇文章让您找到了一个新的应用程序来试用。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具篇 </tag>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始使用flutter和flame创建手机游戏</title>
      <link href="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F.html"/>
      <url>/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F.html</url>
      
        <content type="html"><![CDATA[<p>为啥要做游戏开发呢？<br>不得不承认，游戏是一个非常让人着迷的活动（孩子们不要沉迷哟）。<br>我很喜欢玩游戏，虽然不是非常非常痴迷，但是也因此入手了好几部游戏机，其实我一直心心念念的向入手一部小霸王（此处可以认为是软广，小霸王不要忘了给我广告费，哈哈）红白机，和我的孩子一起怀念一下我小时候的快乐。<br>你们是不是也有这样的情愫呢？</p><span id="more"></span><p>游戏之所以这么吸引人，也许是因为，他可以从简单和线性的游戏玩法到真正复杂的涉及 3D、几乎真实的物理引擎、逼真的图形、程序生成的世界以及适应玩家选择的故事情节。</p><p>有很多很多的人，肯定都像木辛老师一样，想做出属于自己的精美、好玩的游戏。如果你在这一群人里边，那么恭喜你，本篇内容将带领你入门一款经典的游戏引擎。不过，本篇更多的关注的是理论知识，暂时没有涉猎实际开发效果，也并没有讲到如何发布游戏。所以，如果你想巩固游戏开发过程中的理论知识，建议你好好读读这篇文章哈。</p><p>编写过程中难免会有纰漏，如果恰巧您发现了这些问题，可以给我留言或者私信告诉我，我会以最快的速度修正，再次非常感谢！</p><h2 id="阅前必备技能"><a href="#阅前必备技能" class="headerlink" title="阅前必备技能"></a>阅前必备技能</h2><p>本文将假设您已经是一名开发人员，并且对开发软件的概念有扎实的掌握。<br>当然了，如果您是新手，那也没有关系，只要您对游戏开发有足够的兴趣，这也是可以的。</p><p>虽然，兴趣是第一老师，是催动你进步的助力，但是这还不算准备就绪。开始游戏，你还需要一台电脑，足够让你配置好开发所需要的环境，以便于可以编写和编译代码。<br>更好一些的，如果你恰巧配备了一台Android手机，那么你就可以在其上进行软件的测试和实际的使用体验啦。<br>SO，欲善其事，先来利其器吧！</p><p>使用Flutter编写的程序可以被编译和构建在Android手机和iOS手机上边。<br>Android手机用的十分广泛，所以本章节会主要以Android手机为例，你可以通过准备的Android设备进行开发和调试，一旦你完成了这个程序，就可以很轻易的通过不同的构建命令实现iOS设备上的运行。</p><p>再一次假设，你已经顺利完成了如下步骤：</p><ol><li>Microsoft Visual Studio Code：使用任何IDE或者文本编辑工具都可以编写程序，当然了，如果你是一个新手，那么强烈推荐你使用VSCode，它将会给你带来一个与众不同的感觉。<br>一定要从官网下载软件哟，否则一不小心下载到流氓软件就不好了。<br>还有一件挺重要的事情，安装好VScode之后可以安装一下Flutte和Dart的插件，虽然这个不是必须要的，但是配置好了以后，对你的开发工作会有很大的帮助。</li></ol><p>如下两个准备，必须要做，一定要做，不得不做吖。<br>Android SDK：如果你想编写Android程序的话，这个一定要有。<br>如果你觉得一步步地配置太麻烦，也可以直接下载Android Studio开发工具，这样就可以一键完成所有配置。<br>当然了，也有一些同学不想安装这个“巨大”的工具，指向最小化安装，那么你只需要安装SDK就可以啦。<br>接下来的这个“装备”，你是必须、必须、必须一定要安装的，否则你就没有办法开发Flutter程序啦！<br>Flutter SDK/Framework：除了Flutter还有Flame这个插件，这个才是我们今天内容的主角，使用这两个玩意才能最终完成游戏的开发。</p><h2 id="那么，接下来让我们开始游戏开发之旅吧"><a href="#那么，接下来让我们开始游戏开发之旅吧" class="headerlink" title="那么，接下来让我们开始游戏开发之旅吧!"></a>那么，接下来让我们开始游戏开发之旅吧!</h2><p>让我们先从一个非常非常简单的开始。<br>我们这款游戏是这样的，在一整个黑色的屏幕中有一块白色的方块，我们把它放置在屏幕的正中间，当你点击这个白色的方块的时候，它就会变成绿色，这样你就赢了（不要太简单啦）。</p><p>我们暂时先不用比较复杂的元素，所以，在这个游戏中我么不会使用图片文件什么的。</p><p>所以，现在正式开始！</p><h2 id="第一步，创建一个Flutter程序项目"><a href="#第一步，创建一个Flutter程序项目" class="headerlink" title="第一步，创建一个Flutter程序项目"></a>第一步，创建一个Flutter程序项目</h2><p>打开终端（就是计算机中可以输入命令行的东东），并且定位到你要创建的项目目录下，然后执行如下命令：</p><pre class="line-numbers language-none"><code class="language-none">$ flutter create boxgame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令使用 Flutter 命令行工具为您初始化和引导一个基本的移动应用程序。</p><p>如果需要，您可以选择除 boxgame 以外的任何名称。只需确保将所有 boxgame 实例替换为您在后续操作中使用的任何内容。</p><p>此时，您可以在 Visual Studio Code 中打开生成的 boxgame 文件夹，也可以使用以下命令立即运行您的应用程序：</p><pre class="line-numbers language-none"><code class="language-none">$ cd boxgame$ flutter run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一次运行新创建的应用程序可能需要一段时间。当移动应用程序运行时，您应该会看到如下内容：</p><img src="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/1.png" class="" title="第一次运行新项目 width=400"><h2 id="第二步：安装Flame插件并且清理一下项目"><a href="#第二步：安装Flame插件并且清理一下项目" class="headerlink" title="第二步：安装Flame插件并且清理一下项目"></a>第二步：安装Flame插件并且清理一下项目</h2><pre class="line-numbers language-none"><code class="language-none">注意：从这里开始，我们将项目目录称为 ./。如果你的游戏项目在 ~/boxgame 中，./lib/main.dart 指的是 ~/boxgame/lib/main.dart 中的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 Visual Studio Code 并打开上一步创建的 boxgame 目录。</p><p>由于我们将使用简单而强大的 Flame 插件，因此我们需要将其添加到我们的应用程序将依赖的 Dart 包列表中。在 IDE 的左侧，您将看到项目文件夹中的文件列表。打开 ./pubspec.yaml 并在依赖项下的 cupertino_icons 行下方添加以下行（注意缩进）。</p><pre class="line-numbers language-none"><code class="language-none">flame: ^1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你应该会看到像我这里差不多的样子：</p><img src="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/2.png" class="" title="VSC打开的样子"><p>如果您使用的是 Visual Studio Code，IDE 将在保存文件时自动为您安装插件。</p><p>您可以通过打开终端、导航到项目文件夹并运行 flutter packages get 来手动完成。</p><p>下一步是清理主代码，删除掉Flutter 项目中./lib/main.dart 文件中所有内容，并将其替换为空程序。</p><p>空程序只有一行：void main() {}。</p><p>您会注意到的一件事是，我们将 import 语句留在了顶部。我们将在稍后启动游戏时运行 runApp 方法时使用material库。您现在应该有如下所示的内容：</p><img src="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/3.png" class="" title="清空主程序的样子"><p>另一件事是 ./test 文件夹中的文件显示错误。如果您没有使用 Visual Studio Code，这可能不会显示，但您的应用程序将不会运行。</p><p>测试（和测试驱动的开发）超出了本教程的范围，所以要解决这个问题，只需删除整个测试文件夹。</p><h2 id="第三步：设置游戏循环逻辑"><a href="#第三步：设置游戏循环逻辑" class="headerlink" title="第三步：设置游戏循环逻辑"></a>第三步：设置游戏循环逻辑</h2><p>现在我们要设置游戏循环……</p><p>但是什么是游戏循环？<br>游戏循环是游戏的核心。计算机反复运行的一组指令。</p><p>游戏中通常有个概念叫做FPS。它代表每秒帧数。这意味着如果您的游戏以 60 fps 运行，则计算机每秒运行您的游戏循环 60 次。</p><p>简而言之：一帧 = 一次游戏循环。</p><p>一个基本的游戏循环由两部分组成，更新和渲染。</p><img src="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/game-loop.png" class="" title="game_loop"><p>更新部分处理对象的移动（如角色、敌人、障碍物、地图本身）和其他需要更新的东西（例如计时器）。</p><p>大部分动作都发生在这里。</p><p>例如，计算敌人是否被子弹击中或计算敌人是否接触主角(主角通常不喜欢这样)。</p><p>渲染部分在屏幕上绘制所有对象。这是一个单独的进程，因此一切都是同步的。</p><h2 id="为啥需要同步捏？"><a href="#为啥需要同步捏？" class="headerlink" title="为啥需要同步捏？"></a>为啥需要同步捏？</h2><p>想象一下，如果你正更新主角的位置呐。如果这个主角没啥“异议（没有变化）”，那么一切皆无恙。</p><p>但是，说来不巧，正好有一颗子弹就在几个像素之外。您恰巧更新了子弹，并且它击中了您的角色。</p><p>现在，主角死了，所以你不要拔出子弹。而此时，您绘制完角色垂死动画的第一帧，在下一个周期中，您将跳过更新角色，改为渲染他垂死动画的第一帧（而不是第二帧）。</p><p>这会给你的游戏一种生涩的感觉。想象一下玩射击游戏，你射击一个敌人，他没有倒下，你再次射击，但在子弹击中之前他就死了，死了，死了，了。。。</p><p>非同步渲染的抖动性能可能并不明显（尤其是在每秒运行 60 帧时），但如果这种情况发生得太频繁，玩家就会感觉你这款游戏是不是还没搞完，直接就弃了。</p><p>SO，您是真希望计算所有内容，并且当所有对象的状态都计算并最终确定之后，才会绘制屏幕上。</p><h2 id="使用Flame"><a href="#使用Flame" class="headerlink" title="使用Flame"></a>使用Flame</h2><p>Flame 已经有处理这些边边角角的代码了，所以我们只需要关注编写实际的更新和渲染过程。</p><p>但首先，我们的应用程序需要做两个准备：一个是全屏，一个是竖屏锁定。</p><p>Flame 还为这些提供了实用功能。因此，让我们将它们添加到我们的代码中。</p><p>以下这几行代码请添加到文件的顶部：</p><pre class="line-numbers language-none"><code class="language-none">import 'package:flame/flame.dart';import 'package:flutter/services.dart';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在 main 函数中，我们可以直接使用Flame.device静态调用的方式，使用 fullscreen 和 setOrientation 函数，一定要耐心等待哟，因为这些函数返回一个 Future。</p><pre class="line-numbers language-none"><code class="language-none">await Flame.device.fullScreen();await Flame.device.setOrientation(DeviceOrientation.portraitUp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：Futures、async 和 await 是编码实践，允许您“等待”一个较长的进程完成而不会阻塞其他所有内容。如果您有兴趣了解它们，</p><a href="https://www.dartlang.org/tutorials/language/futures" title="可以从 Dart 的官方网站阅读此页面" target=""></a> 。<p>为了能够等待 Futures，上下文必须在异步函数中。所以让我们把 main 函数转换成一个异步函数。</p><pre class="line-numbers language-none"><code class="language-none">void main() async {<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，您应该有如下所示的内容：</p><img src="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/4.png" class="" title="使用flame"><p>要利用 Flame 插件提供的游戏循环机制，我们必须创建一个 Flame 的 Game 类的子类。为此，请在 ./lib 下创建一个新文件并将其命名为 box-game.dart。</p><p>然后我们将编写一个名为 BoxGame 的类（如果你知道类是如何工作的，你可以使用任何类）来扩展 Flame 的 Game 类。</p><pre class="line-numbers language-none"><code class="language-none">import 'dart:ui';import 'package:flame/game.dart';class BoxGame extends Game {  void render(Canvas canvas) {    // TODO: implement render  }  void update(double t) {    // TODO: implement update  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们分解一下：我们导入 Dart 的 ui 库，这样就可以使用 Canvas 类，然后使用 Size 类。<br>我们导入 Flame 的游戏库，其中包括正在扩展的 Game 类。其他所有内容都是具有两种方法的类定义：更新和渲染。这些方法会覆盖父类（也称为超类）的同名方法。</p><pre class="line-numbers language-none"><code class="language-none">注意：@override 注释在 Dart 2 中是可选的，所以，如果你找不到它也不找着急，这是正常的。 new 关键字也是可选的，所以我们也不会使用它。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下一步是创建此 BoxGame 类的实例并将其小部件属性传递给 runApp。</p><p>让我们回到 ./lib/main.dart 并在文件的最顶部插入以下行：</p><pre class="line-numbers language-none"><code class="language-none">import 'package:boxgame/box-game.dart';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该行确保 BoxGame 类可以在 main.dart 中使用。<br>接下来，创建 BoxGame 类的实例并将其小部件属性传递给 runApp 函数。<br>在 main 函数的末尾（右大括号 } 上方）插入以下行。</p><pre class="line-numbers language-none"><code class="language-none">BoxGame game = BoxGame();runApp(game.widget);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在我们的移动应用程序就可以称作是一个游戏啦！</p><p>如果你运行游戏，你只会看到一个空白/黑屏，因为屏幕上还没有绘制任何东西。</p><p>您的 main.dart 文件应如下所示：</p><img src="/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8flutter%E5%92%8Cflame%E5%88%9B%E5%BB%BA%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/5.png" class="" title="run_app"><h2 id="第四步：绘制界面"><a href="#第四步：绘制界面" class="headerlink" title="第四步：绘制界面"></a>第四步：绘制界面</h2><p>在屏幕上绘图之前，我们必须提前知道屏幕的大小。<br>Flutter 在屏幕上绘图时使用逻辑像素，因此您不必担心调整游戏对象的大小。</p><p>一英寸的设备包含大约 96 个逻辑像素。因此，假设我们将手机作为我们的发布平台。大多数现代和主流手机的尺寸都差不多，因为我们的游戏非常简单，我们不必担心尺寸。</p><p>Flame 建立在这个大小系统之上，而 Game 类实际上有一个我们可以覆盖的调整大小的函数。这个函数接受一个 Size 参数，我们可以通过这个参数确定屏幕的大小（以逻辑像素为单位）。</p><p>首先，让我们在类级别声明一个变量。这个变量（也称为实例变量）将保存屏幕的大小，并且仅在屏幕改变大小时更新（对于我们的游戏应该只发生一次）。这也是在屏幕上绘制对象时的基础。这个变量的类型应该是 Size。与传递给 resize 函数的内容相同。</p><pre class="line-numbers language-none"><code class="language-none">class BoxGame extends Game {  Size screenSize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>screenSize 变量将被初始化为 null。在检查我们是否知道渲染过程中的屏幕大小时，这将很有帮助。稍后再谈。</p><p>接下来，让我们在 ./lib/box-game.dart 中添加重载函数resize()。</p><pre class="line-numbers language-none"><code class="language-none">void resize(Size size) {  screenSize = size;  super.resize(size);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：超类的 resize 函数实际上是空的，但调用我们要覆盖的超类的超函数是个好主意。除非我们完全想重写该函数。所以，让我们先把它留在这里吧。</p><p>另一个需要注意的地方：实例变量是可以从类的所有方法/函数访问的变量。例如，您可以在调整大小时设置它，然后在渲染时获取它的值。</p><p>您的代码应如下所示：</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Flame </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I am Back</title>
      <link href="/I-am-Back.html"/>
      <url>/I-am-Back.html</url>
      
        <content type="html"><![CDATA[<p>我回来啦！以后会时不时更新一下哈。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读 吴军《谷歌方法论》- 为什么学习语文</title>
      <link href="/2019-03-22-%E5%90%B4%E5%86%9B-%E8%B0%B7%E6%AD%8C%E6%96%B9%E6%B3%95%E8%AE%BA-%E8%AF%AD%E6%96%87%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%84%8F%E4%B9%89.html"/>
      <url>/2019-03-22-%E5%90%B4%E5%86%9B-%E8%B0%B7%E6%AD%8C%E6%96%B9%E6%B3%95%E8%AE%BA-%E8%AF%AD%E6%96%87%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%84%8F%E4%B9%89.html</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要学习语文。"><a href="#为什么要学习语文。" class="headerlink" title="为什么要学习语文。"></a>为什么要学习语文。</h3><p>思考如下两个问题：</p><ul><li>如果把语文放在所有的课程中，如何看待它的意义？</li><li>对比去年的语文水平，你觉得学习语文有什么意义？</li></ul><!--more--><p>通过以上两个问题的思考，我们可以得出以下四个结论：</p><ul><li>学习语文的目的是将其他学科（如数学，历史和科学学科）融会贯通，增加自己在这些学科的理解深度；</li><li>通过语文的学习，可以提升自己对已习得知识表述的准确性；通俗的讲就是增强自己的表达能力；</li><li>语文水平的提高，自己做的事情更加职业化、专业化，其他人更容易接受自己的见解；</li><li>语文的学习，可以提高个人的素养，提升个人的气质。</li></ul><p>一言以蔽之，语文的学习不仅能增加理解能力，还能增强表述能力，提升个人对其他学科的学习能力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 谷歌方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内田光子-关于一流水准的思考</title>
      <link href="/2019-03-14-%E5%86%85%E7%94%B0%E5%85%89%E5%AD%90-%E5%85%B3%E4%BA%8E%E4%B8%80%E6%B5%81%E6%B0%B4%E5%87%86%E7%9A%84%E6%80%9D%E8%80%83.html"/>
      <url>/2019-03-14-%E5%86%85%E7%94%B0%E5%85%89%E5%AD%90-%E5%85%B3%E4%BA%8E%E4%B8%80%E6%B5%81%E6%B0%B4%E5%87%86%E7%9A%84%E6%80%9D%E8%80%83.html</url>
      
        <content type="html"><![CDATA[<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/album/piano-sonata-no-16-in-c-k-545-sonata-facile-i-allegro/83736233?i=83736570"></iframe><blockquote><p>内田光子从小学习钢琴，后来因为父亲在奥地利担任外交官，全家移居维也纳，她考入了维也纳音乐学院，师从理查·豪瑟（Richard Hauser）、威廉·肯普夫（Wilhelm Kempff）和阿什肯纳齐（Vladimir Ashkenazy）等人，14 岁时首次在维也纳金色大厅登台表演。20 岁时获得贝多芬钢琴比赛冠军，第二年获得肖邦国际钢琴比赛亚军，随后成为世界上为数不多的钢琴独奏家。<br>内田光子一生把所有的时间都花在了练习音乐和在世界各地巡回表演上，以至于一辈子未婚，她自己讲，她的工作性质也不适合组成家庭，可以讲她把自己献给了音乐。2009 年英国女王授予她女爵士的封号。</p></blockquote><p>先说一下文章中的这首曲子，是她演奏的莫扎特非常简单的《第 16 号钢琴奏鸣曲》（K.545）（这首曲子有个副标题 Sonata facile 意思是“单纯的奏鸣曲”）。</p><p>这首奏鸣曲有多简单呢？大约钢琴考过 7 级的孩子都能弹，但是就是这样一首简单的曲子，内田光子却能弹出精彩。</p><h4 id="那么演奏家是怎么划分的呢？"><a href="#那么演奏家是怎么划分的呢？" class="headerlink" title="那么演奏家是怎么划分的呢？"></a>那么演奏家是怎么划分的呢？</h4><blockquote><p>音乐演奏家的划分方法<br>一般人演奏钢琴，第一步是做到演奏准确，这是对初学者的要求，做到这一点就达到了计算机工程师中“码农”的水平。<br>第二步则是做到弹出来好听，这里面就要求有比较娴熟的手法，和一点简单的专业技巧了，特别是对某些音符的特殊处理。到这个水平，大约相当于钢琴考过 10 级的水平，和第五级的工程师相当。<br>再往上，演奏者就要能弹奏得如行云流水一般流畅动听，这就进入到专业入门的水平。在美国钢琴十级之上还有专业级的考试，要想通过专业级的考试就需要达到这样的水准。<br>如果想在艺术上更上一层楼，需要把音乐弹出层次感，这时一架钢琴发出的音乐像是几层不同的旋律叠加在一起的，听众会听得如痴如醉，这相当于三级工程师。<br>当然，艺术没有止境，再往上就需要超出技巧的范畴，需要对音乐和人生有深刻的理解了，到了这个水平就能很好地诠释音乐了，这时的演奏家可以被称为当代一流的演奏家或者历史上二流的，内田光子大约在这个水平，或者略高一点。<br>再往上，则是被称为几十年出一个的奇才，他们放到历史的长河中也堪称一流，比如 19 世纪的演奏家肖邦、李斯特（Franz Liszt）和克拉拉（Clara，舒曼的妻子），20 世纪的鲁宾斯坦（Arthur Rubinstein）或者弗拉基米尔·霍洛维茨（Vladimir Horowitz）。</p></blockquote><p>可以说，真正一流的大师是在任何小事情上都能体现一流水准的人。很多人会觉得，某件事情太简单，它体现不出我的水平，其实反倒是小事情能够见真功夫。很多人讲 iPhone 设计得好，在它简单的设计背后，体现出设计者的匠心独运，产品经理和工程师们精益求精的特点。这才是一流的本质。</p><h4 id="总结一下一流和二流、三流的区别"><a href="#总结一下一流和二流、三流的区别" class="headerlink" title="总结一下一流和二流、三流的区别"></a>总结一下一流和二流、三流的区别</h4><pre class="line-numbers language-none"><code class="language-none">1. 区分一流和二流、三流并不需要通过什么复杂难做的大事，一流的人可以从平凡中显示出伟大。通俗地讲，就是能炒好土豆丝。2. 俄罗斯有句谚语，“虽然雄鹰有时飞得比麻雀还低，但是麻雀永远飞不到雄鹰能达到的高度”。因此，一流能达到的高度是二流、三流所达不到的。3. 即便是天赋很好，有贵人相助的人，最终成为大家公认的一流人物，也需要花很长时间，并且需要不断努力。有些人少年一朝成名，便忘乎所以，其实他们距离一流的水准还差得远呢。很多省市的高考前几名，不过是现代的方仲永罢了。4.由于一流人才站的高度比常人高，因此他们的职业生涯可以特别长。5. 最后，也是最关键的一点。正如罗曼·罗兰（Romain Rolland）所说，人要成为伟大，而不是显得伟大。对大家来讲，要成为一流，而不是显得像一流。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后，简单地概括一流的几个特点：首先他们能将看似平凡的事情做得不平凡，其次他们都具有自己的特点，三流的人是可以互相替代的，但是一流的人则不能。"><a href="#最后，简单地概括一流的几个特点：首先他们能将看似平凡的事情做得不平凡，其次他们都具有自己的特点，三流的人是可以互相替代的，但是一流的人则不能。" class="headerlink" title="最后，简单地概括一流的几个特点：首先他们能将看似平凡的事情做得不平凡，其次他们都具有自己的特点，三流的人是可以互相替代的，但是一流的人则不能。"></a>最后，简单地概括一流的几个特点：首先他们能将看似平凡的事情做得不平凡，其次他们都具有自己的特点，三流的人是可以互相替代的，但是一流的人则不能。</h3><blockquote><p>要有本事把小事情做好，并且一辈子都要不断努力。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 硅谷来信 </tag>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读吴军《硅谷来信》心得笔记 - 第一篇</title>
      <link href="/2019-03-11-%E5%90%B4%E5%86%9B-%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1-%E7%AC%94%E8%AE%B0-01.html"/>
      <url>/2019-03-11-%E5%90%B4%E5%86%9B-%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1-%E7%AC%94%E8%AE%B0-01.html</url>
      
        <content type="html"><![CDATA[<p>Google能够从一个小公司成长为全球巨无霸的IT，<strong>企业创始人</strong>的作用非常大。</p><!--more--><p>*** 首要掌握的技能：切忌固守在自己根深蒂固的思维模式中！ ***</p><p>创始人可以从如下三步入手：</p><h3 id="第一件事情是招人。"><a href="#第一件事情是招人。" class="headerlink" title="第一件事情是招人。"></a>第一件事情是招人。</h3><p><strong>找合适的人，把重要的事情交给他们做，而不是事必躬亲，即不要做太多的细节管理（Micro Management）。</strong></p><blockquote><p>作为一个公司的创始人，他需要花很多时间找到各个关键岗位最重要的人，一旦找到那样的人，就相信那些人的能力好了。Google到2002年已经有四百人的时候，包括创始人在内的几个高管还要面试每一位HR已经决定录取的员工，因为招人实在太重要了，面试占掉了他们四分之一的时间。</p></blockquote><blockquote><p>人招不好，不仅耽误事情，而且常常是请神容易送神难，早去的员工常常占据了很重要的位置，除非他们能够和公司一同成长，否则公司长大之后，他们的工作很难安排。让他们当主管吧，他们又不具有相应的能力和潜力；继续让他们做非常具体的工作吧，他们会觉得创始人太薄情，甚至会纠集一些老员工对抗新来的主管。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">1. 小公司招人的一个重要的原则，就是对方除了能力和品性能够胜任工作之外，还必须具有非常强的主动性。2. 录用的人应该高出现有员工的平均水平。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第二件事情是起到刹车的作用，而不是引擎的作用。"><a href="#第二件事情是起到刹车的作用，而不是引擎的作用。" class="headerlink" title="第二件事情是起到刹车的作用，而不是引擎的作用。"></a>第二件事情是起到刹车的作用，而不是引擎的作用。</h3><p><strong>一个管理有序的公司，动力应该来自于底层，刹车应该来自于高层，这样公司既有活力，也有秩序。</strong></p><blockquote><p>Google公司在发展到一百人的规模时，创始人、CEO和几个其他高管，每周要花一天的时间听下面员工介绍自己的项目。他们只负责一件事情，就是确定员工做的事情是该做的事情，而不至于让公司的业务太分散。至于该怎么做，他们从来不发表什么建议，因为既然是精心挑选出来的员工，就相信他们有能力将要做的事情做好。如果用一个词概括这些高管们在审核项目时的作用，就是刹车。</p></blockquote><h3 id="第三件事情是确立公司的价值观和企业文化。"><a href="#第三件事情是确立公司的价值观和企业文化。" class="headerlink" title="第三件事情是确立公司的价值观和企业文化。"></a>第三件事情是确立公司的价值观和企业文化。</h3><p><strong>一个公司价值观的确立，企业文化的确立，是在它成立的初期。</strong></p><pre class="line-numbers language-none"><code class="language-none">创始人自己的任务就是：找到适合公司自己的商业模式，在早期让整个公司都认可它的价值观。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个创始人如果能做好这样三件事情，已经不容易了，具体的事情应该让下面的人做，自己不要干预太多。当一个创始人能够找到称职的主管工程、销售和行政的负责人，并且足够信任他们，那么公司就步入正轨了。如果创始人像诸葛亮那样事必躬亲，不仅会把自己累死，还会把公司做死。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 硅谷来信 </tag>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs STEP-1</title>
      <link href="/2017-01-21-Emacs-STEP-1.html"/>
      <url>/2017-01-21-Emacs-STEP-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Emacs学习入门-STEP－1"><a href="#Emacs学习入门-STEP－1" class="headerlink" title="Emacs学习入门 STEP－1"></a>Emacs学习入门 STEP－1</h2><p>摘自（ <a href="http://blog.csdn.net/redguardtoo/article/details/7222501">一年成为Emacs高手（像神一样使用编辑器）</a> ）</p><!--more--><h3 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h3><ul><li><p>不要着急从Lisp入手，先着手短小练习，培养兴趣，逐步提高－－以实际问题作为切入点</p></li><li><p>站在巨人的肩膀上</p><ul><li>Copy高手的配置文件 <a href="http://www.sanityinc.com/">世界级大师 Steve Purcell</a>的<a href="https://github.com/purcell/emacs.d">Emacs 配置</a></li><li>关键是要实干.一个很好的治愈方法就是把<a href="http://planet.emacsen.org/">http://planet.emacsen.org/</a> 上约4000篇文章通读一遍</li><li>加入社区更上一层楼<ul><li><a href="https://www.reddit.com/r/emacs/">https://www.reddit.com/r/emacs/</a></li><li><a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=oJTwQvgfgMM">https://www.youtube.com/watch?feature=player_embedded&amp;v=oJTwQvgfgMM</a></li></ul></li><li>多读书<ul><li><a href="https://www.emacswiki.org/">https://www.emacswiki.org/</a></li><li>Bob Glickstein的<a href="https://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611">Writing GNU Emacs Extensions</a></li><li><a href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Lee 提供付费Lisp教程</a></li><li><a href="http://steve-yegge.blogspot.com.au/2008/01/emergency-elisp.html">Steve Yegge的Emacs Lisp教程</a></li></ul></li></ul></li><li><p>第三方插件</p><ul><li><a href="https://www.emacswiki.org/emacs/Evil">Evil</a>: 将 Emacs变为Vim</li><li><a href="http://orgmode.org/">Org</a>: org-mode,全能的笔记工具</li><li><a href="https://github.com/company-mode/company-mode">company-mode</a> :自动完成输入,支持各种语言和后端</li><li><a href="https://github.com/magnars/expand-region.el">expand-region</a>快捷键选中文本,可将选择区域伸缩</li><li><a href="https://github.com/nonsequitur/smex">smex</a> :让输入命令变得飞快</li><li><a href="https://github.com/joaotavora/yasnippet">yasnippet</a> :强大的文本模板输入工具</li><li><a href="https://www.emacswiki.org/emacs/FlyMake">flymake</a> :对不同语言做语法检查</li><li><a href="https://github.com/abo-abo/swiper/blob/master/ivy.el">ivy</a> or <a href="https://github.com/emacs-helm/helm">helm</a> :自动完成,在其上有插件完成具体功能</li><li><a href="https://www.emacswiki.org/emacs/InteractivelyDoThings">ido</a>和helm类似,helm和ido可同时用</li><li><a href="https://github.com/mooz/js2-mode">js2-mode</a> :javascript的主模式,自带语法解释器</li><li><a href="https://www.emacswiki.org/emacs/emacs-w3m">w3m</a> :网络浏览器(需安装命令行工具w3m)</li><li><a href="https://github.com/skeeto/emacs-web-server">simple-httpd</a>: Lisp 写的 Web 服务器</li><li><a href="https://github.com/nschum/window-numbering.el">window-numbering.el</a> :跳转到不同的子窗口</li><li><a href="https://github.com/fxbois/web-mode">web-mode</a> :支持各种 HTML 文件</li><li><a href="https://github.com/magit/magit">magit</a> :玩转git</li><li><a href="https://github.com/syohex/emacs-git-gutter">git-gutter.el</a> :标记版本控制的diff(支持subversion)</li></ul></li><li><p>学习org-mode : <a href="http://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html">http://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html</a></p></li><li><p>行动 行动 行动</p></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>不需要刻意的去记快捷键，随用随记</li><li>用 <a href="https://www.emacswiki.org/emacs/Smex">Smex</a>,可飞快输入命令,快捷键实际上不需要了</li><li>如下载了第三方插件,如果发觉其有问题,可以在<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html">不碰该插件原始代码的情况下修复</a>.</li><li>插件服务器关闭了,应可以在<a href="https://github.com/redguardtoo/elpa-mirror">自带的U盘上快速建立镜像</a>.</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>官方插件仓库<a href="https://elpa.gnu.org/">https://elpa.gnu.org</a>下载安装插件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vagrant部署Rails项目</title>
      <link href="/2016-11-04-Using-Vagrant-for-Rails-Development.html"/>
      <url>/2016-11-04-Using-Vagrant-for-Rails-Development.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Vagrant 是一个自动化工具，可以在你的电脑的虚拟机里自动搭建一个开发环境。这就意味着你本地开发环境可以完全与生产服务器上保持一致，你的合作小伙伴也可以和你保持高度一致的运行环境。</p><!--more--><p>自个儿的Rails的开发环境也不会随着你开发机的变化而变化。另外，你可以在分分钟内启动一个可能需要在12个月以后重新访问的项目，那时你会感谢自己在项目初期使用了这个工具。</p><p>我们会使用<a href="https://www.chef.io/chef/">Chef</a>完成虚拟机开发环境的自动部署。chef会负责为我们的系统配置Ruby和所有依赖的包。非常适合快速开发（It’s pretty RAD）。</p><p>BB的够多的了，让我们开始吧！</p><h2 id="配置Vagrant"><a href="#配置Vagrant" class="headerlink" title="配置Vagrant"></a>配置Vagrant</h2><p>首先，开始执行之前确认下本机至少有1G的空闲内存，因为Vagrant会在你的虚拟机中启动一个完整的操作系统，用来执行Rails程序。</p><p>第一步，在本机安装Vagrant和VirtualBox。</p><ul><li><a href="https://www.vagrantup.com/downloads.html">移步这里下载安装Vagrant</a></li><li><a href="https://www.virtualbox.org/wiki/Downloads">移步这里下载安装VirtualBox</a></li></ul><p>虚拟机是运行在VirtualBox里的，这些都是后台运行的程序，只能通过SSH进行交互。</p><p>其次，我们需要安装Vagrant的两个插件。</p><ul><li>vagrant-vbguest 自动安装各种Guest扩展程序</li><li>vagrant-librarian-chef 让我们可以在机器启动的时候自动执行chef</li></ul><pre class="line-numbers language-none"><code class="language-none">vagrant plugin install vagrant-vbguestvagrant plugin install vagrant-librarian-chef-nochef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个可能需要些时间才能执行完毕。</p><pre class="line-numbers language-none"><code class="language-none">➜  ds git:(dev) vagrant plugin install vagrant-vbguestInstalling the 'vagrant-vbguest' plugin. This can take a few minutes...Installed the plugin 'vagrant-vbguest (0.13.0)'!➜  ds git:(dev) vagrant plugin install vagrant-librarian-chef-nochefInstalling the 'vagrant-librarian-chef-nochef' plugin. This can take a few minutes...Installed the plugin 'vagrant-librarian-chef-nochef (0.2.0)'!➜  ds git:(dev)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建Vagrant配置文件"><a href="#创建Vagrant配置文件" class="headerlink" title="创建Vagrant配置文件"></a>创建Vagrant配置文件</h2><p>首要的，进入需要配置chef的Rails项目目录，并执行如下命令。</p><pre class="line-numbers language-none"><code class="language-none">➜  ds git:(dev) vagrant initA `Vagrantfile` has been placed in this directory. You are nowready to `vagrant up` your first virtual environment! Please readthe comments in the Vagrantfile as well as documentation on`vagrantup.com` for more information on using Vagrant.➜  ds git:(dev) ✗ touch Cheffile➜  ds git:(dev) ✗ lsCheffile     README.md    app          config.ru    log          tmpGemfile      Rakefile     bin          db           public       vendorGemfile.lock Vagrantfile  config       lib          test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此会生成Vagrantfile和Cheffile两个文件。</p><h2 id="Cheffile"><a href="#Cheffile" class="headerlink" title="Cheffile"></a>Cheffile</h2><p>现在，我们可以配置Chef文件了。这个文件和我们的Rails的gem 文件类似，只不过是用于Chef的。这个文件中会定义很多Chef cookbooks用来在稍后的Vagrantfile中指挥Vagrant配置我们的环境的具体内容。</p><p>我们仅仅只需要黏贴如下代码到Cheffile中：</p><pre class="line-numbers language-none"><code class="language-none">site "http://community.opscode.com/api/v1"cookbook 'apt'cookbook 'build-essential'cookbook 'mysql', '5.5.3'cookbook 'ruby_build'cookbook 'nodejs'cookbook 'rbenv', git: 'https://github.com/aminin/chef-rbenv'cookbook 'vim'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vagrantfile"><a href="#Vagrantfile" class="headerlink" title="Vagrantfile"></a>Vagrantfile</h2><p>Vagrantfile 定义了虚拟机中的操作系统和Chef的配置项。</p><p>我们会使用Ubuntu 16.04 xenial 64-bit和4G的内存这个版本配置（如果你用的32位的系统，只需要改成xenial32即可）。还需要打开虚拟机的3000端口，这样，我们通过本地浏览器就可以访问虚拟机上的Rails服务了。不过至少到现在为止，我们已经在虚拟机中通过Chef配置好了Ruby2.3.1和MySQL。</p><p>Vagrantfile文件的内容如下：</p><pre class="line-numbers language-none"><code class="language-none"># -*- mode: ruby -*-# vi: set ft=ruby :VAGRANTFILE_API_VERSION = "2"Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|  # Use Ubuntu 16.04 Xenial Xerus 64-bit as our operating system  config.vm.box = "ubuntu/xenial64"  # Configurate the virtual machine to use 4GB of RAM  config.vm.provider :virtualbox do |vb|    vb.customize ["modifyvm", :id, "--memory", "4048"]  end  # Forward the Rails server default port to the host  config.vm.network :forwarded_port, guest: 3000, host: 3000  # Use Chef Solo to provision our virtual machine  config.vm.provision :chef_solo do |chef|    chef.cookbooks_path = ["cookbooks", "site-cookbooks"]    chef.add_recipe "apt"    chef.add_recipe "nodejs"    chef.add_recipe "ruby_build"    chef.add_recipe "rbenv::user"    chef.add_recipe "rbenv::vagrant"    chef.add_recipe "vim"    chef.add_recipe "mysql::server"    chef.add_recipe "mysql::client"    # Install Ruby 2.3.1 and Bundler    # Set an empty root password for MySQL to make things simple    chef.json = {      rbenv: {        user_installs: [{          user: 'vagrant',          rubies: ["2.3.1"],          global: "2.3.1",          gems: {            "2.3.1" =&gt; [              { name: "bundler" }            ]          }        }]      },      mysql: {        server_root_password: ''      }    }  endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行Vagrant"><a href="#执行Vagrant" class="headerlink" title="执行Vagrant"></a>执行Vagrant</h2><p>至此，我们已经配置好了Vagrant和Chef。我们将启动Vagrant虚拟主机，并通过ssh登陆进去！</p><pre class="line-numbers language-none"><code class="language-none"># The commented lines are the output you should see when you run these commandsvagrant up#==&gt; default: Checking if box 'ubuntu/xenial64' is up to date...#==&gt; default: Clearing any previously set forwarded ports...#==&gt; default: Installing Chef cookbooks with Librarian-Chef...#==&gt; default: The cookbook path '/Users/chris/code/test_app/site-cookbooks' doesn't exist. Ignoring...#==&gt; default: Clearing any previously set network interfaces...#==&gt; default: Preparing network interfaces based on configuration...#    default: Adapter 1: nat#==&gt; default: Forwarding ports...#    default: 3000 =&gt; 3000 (adapter 1)#    default: 22 =&gt; 2222 (adapter 1)#==&gt; default: Running 'pre-boot' VM customizations...#==&gt; default: Booting VM...#==&gt; default: Waiting for machine to boot. This may take a few minutes...#    default: SSH address: 127.0.0.1:2222#    default: SSH username: vagrant#    default: SSH auth method: private key#    default: Warning: Connection timeout. Retrying...#==&gt; default: Machine booted and ready!#==&gt; default: Checking for guest additions in VM...#==&gt; default: Mounting shared folders...#    default: /vagrant =&gt; /Users/chris/code/test_app#   default: /tmp/vagrant-chef-1/chef-solo-1/cookbooks =&gt; /Users/chris/code/test_app/cookbooks#==&gt; default: VM already provisioned. Run `vagrant provision` or use `--provision` to force itvagrant ssh#Welcome to Ubuntu 16.04 LTS (GNU/Linux 3.13.0-24-generic x86_64)## * Documentation:  https://help.ubuntu.com/## System information disabled due to load higher than 1.0##  Get cloud support with Ubuntu Advantage Cloud Guest:#    http://www.ubuntu.com/business/services/cloud###vagrant@vagrant-ubuntu-xenial-64:~$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首次启动vagrant需要很长很长很长时间，因为需要准备chef文件中设置的诸多配置项，之后再次执行的话，不再执行Chef就会快很多了。</p><p>如果修改了Vagrantfile和Cheffile文件，你需要使用如下命令重新使机器配置生效</p><pre class="line-numbers language-none"><code class="language-none">vagrant provision<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在Vagrant中使用Rails"><a href="#在Vagrant中使用Rails" class="headerlink" title="在Vagrant中使用Rails"></a>在Vagrant中使用Rails</h2><p>Vagrant会创建一个名字为/vagrant的共享文件夹，可以是虚拟机和本机之间做文件共享。如果进入/vagrant目录下并执行ls命令，会看到Rails项目的所有文件。</p><pre class="line-numbers language-none"><code class="language-none">bundle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在虚拟机中安装所有需要的gem。</p><pre class="line-numbers language-none"><code class="language-none">rbenv rehash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保我们刚刚安装的gem是可用的。</p><pre class="line-numbers language-none"><code class="language-none">rake db:create &amp;&amp; rake db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建和迁移数据库。</p><p>该目录下的Rails服务器通过3000端口对外提供服务。可以通过localhost:3000访问Rails。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Vagrant是一个非常Diao的工具，非常方便，通过见得的Chef配置文件，我们可以随时随地使用。<br>如果你需要再次配置一个Vagrant机器，或者是你的合作小伙伴需要配置一个的话，你们只需要执行</p><pre class="line-numbers language-none"><code class="language-none">vagrant up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p><p>Q&amp;A</p><ul><li><p>执行vagrant up命令失败<br>A：请检查 VirtualBox的版本是否与Vagrant下载扩展的版本一致，我本地使用的是5.0.24 。</p><pre class="line-numbers language-none"><code class="language-none">==&gt; default: Machine booted and ready![default] GuestAdditions versions on your host (4.3.28) and guest (5.0.24) do not match.mesg: ttyname failed: Inappropriate ioctl for devicemesg: ttyname failed: Inappropriate ioctl for device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外Vagrant 1.8.4与 VirtualBox5.1.x版本不兼容。</p><pre class="line-numbers language-none"><code class="language-none">➜  ds git:(dev) ✗ vagrant up --provider=virtualboxNo usable default provider could be found for your system.Vagrant relies on interactions with 3rd party systems, known as"providers", to provide Vagrant with resources to run developmentenvironments. Examples are VirtualBox, VMware, Hyper-V.The easiest solution to this message is to install VirtualBox, whichis available for free on all major platforms.If you believe you already have a provider available, make sure itis properly installed and configured. You can see more details aboutwhy a particular provider isn't working by forcing usage with`vagrant up --provider=PROVIDER`, which should give you a more specificerror message for that particular provider.➜  ds git:(dev) ✗ cat /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>需要安装ruby-dev</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ruby-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>PostgresSQL 头文件</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install libpq-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vagrant </tag>
            
            <tag> Rails </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oryx2 终端用户文档</title>
      <link href="/2016-04-06-Oryx2-end-user-doc.html"/>
      <url>/2016-04-06-Oryx2-end-user-doc.html</url>
      
        <content type="html"><![CDATA[<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>注意：你必须已经按照<a href="http://reasonpun.com/2015/12/21/Oryx2-Admin-Docs/">管理员文档</a>中提到的配置好了你的集群。</p><p>下载最新的Oryx版本，包括批处理层，实时计算层和服务层的jar文件和sh脚本。</p><p>或者，源码编译他们并从deploy/bin/获取最新的脚本。</p><span id="more"></span><p>拷贝二进制和脚本到hadoop集群的机器上。他们可以会被部署到不同的机器，或者是被部署到一个测试机器上。实时和批处理层应该运行且只能运行在一台机器上（The Speed and Batch Layers should run on at most one machine, each），服务层则可以运行于多个节点上。</p><p>创建一个配置文件，可以简单的拷贝例子中的conf/als-example.conf。并修改host名称，端口和目录。实际上，选择hdfs上已经存在的数据和模型目录便于用户运行Oryx 二进制命令。</p><p>拷贝该配置文件，并重命名为oryx.conf，将他放到每个机器的上二进制命令和脚本相同的目录下。</p><p>执行如下命令开始这3个层的运行：</p><pre class="line-numbers language-none"><code class="language-none">./oryx-run.sh batch./oryx-run.sh speed./oryx-run.sh serving<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数–layer-jar your-layer.jar and –conf your-config.conf可以指定某一层特定位置的jar文件和配置文件。也可以使用–jvm-args直接传递更多的参数给Spark驱动程序，比如：–jvm-args=”-Dkey=value”</p><p>这都不需要在同一台机器上，但是也不一定（如果配置特殊指定批处理和实时处理层，服务层API不同的端口）。服务层可以运行在多个机器上。</p><p>举个例子，批处理层SparkUI运行在启动脚本所在的机器的4040端口（除非通过配置更改）。一个简单的基于web端的控制台的服务层默认是运行在8080端口的。</p><p>完美！</p><h3 id="尝试下ALS的例子吧"><a href="#尝试下ALS的例子吧" class="headerlink" title="尝试下ALS的例子吧"></a>尝试下ALS的例子吧</h3><p>如果你已经使用了上述的配置，你就已经可以运行一个基于ALS的推荐程序实例。<br>自获取GroupLens 100K的数据集，并且找到u.data文件，这个文件的内容需要转换成csv格式：</p><pre class="line-numbers language-none"><code class="language-none">tr '\t' ',' &lt; u.data &gt; data.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将这些数据放入服务层，使用本地的命令行工具，如下：</p><pre class="line-numbers language-none"><code class="language-none">wget --quiet --post-file data.csv --output-document - \  --header "Content-Type: text/csv" \  http://your-serving-layer:8080/ingest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你使用tail命令查看输入的内容，可以看到如下数据：</p><pre class="line-numbers language-none"><code class="language-none">196,242,3.0,881250949186196,242,3.0,881250949186,302,3.0,89171774222,377,1.0,878887116244,51,2.0,880606923166,346,1.0,886397596298,474,4.0,884182806...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很快的，你也可以看到批处理层已经开始触发一个新的计算了。这个例子被配置为5分钟一个周期。</p><p>数据首先会被写入HDFS。默认配置被写入hdfs:///user/example/Oryx/data/目录下。且目录以时间戳命名，每一部分都包含Hadoop part-r-* 文件，都是以文本的序列话文件的方式存储。虽然不是纯文本，打印出来的话，还是有一部分是可以识别的，因为这其实真的是文本。</p><pre class="line-numbers language-none"><code class="language-none">SEQorg.apache.hadoop.io.Textorg.apache.hadoop.io.Text����^�]�XسN�22,377,1.0,87888711662...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>模型计算开始。这些批处理层会以大量的新的分布式的作业形式展现。在这个例子中，Spark UI可以通过<a href="http://your-batch-layer:4040访问。">http://your-batch-layer:4040访问。</a></p><p>模型计算是非常快的，执行完毕以后会合并PMML和支持数据文件并存储到目录hdfs:///user/example/Oryx/model/下。举个例子，model.pmml 的内容如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;PMML xmlns="http://www.dmg.org/PMML-4_2" version="4.2.1"&gt;    &lt;Header&gt;        &lt;Application name="Oryx"/&gt;        &lt;Timestamp&gt;2014-12-18T04:48:54-0800&lt;/Timestamp&gt;    &lt;/Header&gt;    &lt;Extension name="X" value="X/"/&gt;    &lt;Extension name="Y" value="Y/"/&gt;    &lt;Extension name="features" value="10"/&gt;    &lt;Extension name="lambda" value="0.001"/&gt;    &lt;Extension name="implicit" value="true"/&gt;    &lt;Extension name="alpha" value="1.0"/&gt;    &lt;Extension name="XIDs"&gt;56 168 222 343 397 ...     ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The X/ and Y/ subdirectories next to it contain feature vectors, like:</p><pre class="line-numbers language-none"><code class="language-none">[56,[0.5746282834154238,-0.08896614131333057,-0.029456222765775263,  0.6039821219690552,0.1497901814774658,-0.018654312114339863,  -0.37342063488340266,-0.2370768843521807,1.148260034028485,  1.0645643656769153]][168,[0.8722769882777296,0.4370416943031704,0.27402044461549885,  -0.031252701117490456,-0.7241385753098256,0.026079081002582338,  0.42050973702065714,0.27766923396205817,0.6241033215856671,  -0.48530795198811266]]...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用tail命令查看更新的内容。<br>这些数据会很快放入服务层，此时访问/ready会返回200 OK。</p><pre class="line-numbers language-none"><code class="language-none">wget --quiet --output-document - --server-response \  http://your-serving-layer:8080/ready...  HTTP/1.1 200 OK  Content-Length: 0  Date: Tue, 1 Sep 2015 13:26:53 GMT  Server: Oryx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wget --quiet --output-document -  http://your-serving-layer:8080/recommend/17...50,0.7749542842056966275,0.7373013861581563258,0.731818692628511181,0.7049967175706345127,0.704518989947498121,0.701463102979374115,0.6954683387287907288,0.677488971102402225,0.6663619887033064285,0.6398968471343595<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>恭喜！实时推荐系统搭建完毕！可以通过Ctrl-C关闭。</p><h3 id="API手册"><a href="#API手册" class="headerlink" title="API手册"></a>API手册</h3><p>Oryx 支持多种端到端的程序，包括服务层的REST 接口。</p><h3 id="协同过滤和推荐"><a href="#协同过滤和推荐" class="headerlink" title="协同过滤和推荐"></a>协同过滤和推荐</h3><ul><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Recommend.html">/recommend</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/RecommendToMany.html">/recommendToMany</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/RecommendToAnonymous.html">/recommendToAnonymous</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/RecommendWithContext.html">/recommendWithContext</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Similarity.html">/similarity</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/SimilarityToItem.html">/similarityToItem</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/KnownItems.html">/knownItems</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Estimate.html">/estimate</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/EstimateForAnonymous.html">/estimateForAnonymous</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Because.html">/because</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/MostSurprising.html">/mostSurprising</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/PopularRepresentativeItems.html">/popularRepresentativeItems</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/MostActiveUsers.html">/mostActiveUsers</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/MostPopularItems.html">/mostPopularItems</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/MostActiveUsers.html">/mostActiveUsers</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/AllItemIDs.html">/item/allIDs</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Ready.html">/ready</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Preference.html">/pref</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/als/Ingest.html">/ingest</a></li></ul><h3 id="分类-回归"><a href="#分类-回归" class="headerlink" title="分类 / 回归"></a>分类 / 回归</h3><ul><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/rdf/Predict.html">/predict</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/rdf/ClassificationDistribution.html">/classificationDistribution</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/rdf/Ready.html">/ready</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/rdf/Train.html">/train</a></li></ul><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><ul><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/kmeans/Assign.html">/assign</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/kmeans/DistanceToNearest.html">/distanceToNearest</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/kmeans/Ready.html">/ready</a></li><li><a href="http://oryx.io/apidocs/com/cloudera/oryx/app/serving/kmeans/Add.html">/add</a></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><a href="https://github.com/OryxProject/oryx/blob/master/app/conf/als-example.conf">app/conf/als-example.conf</a></li><li><a href="https://github.com/OryxProject/oryx/blob/master/app/conf/kmeans-example.conf">app/conf/kmeans-example.conf</a></li><li><a href="https://github.com/OryxProject/oryx/blob/master/app/conf/rdf-example.conf">app/conf/rdf-example.conf</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>玩转 Oryx2 （一）</title>
      <link href="/2016-04-08-set-up-oryx-env.html"/>
      <url>/2016-04-08-set-up-oryx-env.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>CDH 5.5.2, Parcel<ul><li>HDFS</li><li>YARN</li><li>Zookeeper</li><li>Kafka</li><li>Spark (on YARN)</li></ul></li></ul><span id="more"></span><h3 id="下载最新版本"><a href="#下载最新版本" class="headerlink" title="下载最新版本"></a>下载最新版本</h3><ul><li><p>进入<a href="https://github.com/OryxProject/oryx/releases/tag/oryx-2.1.2">下载页面</a>，分别下载</p><ul><li>compute-classpath.sh</li><li>oryx-batch-2.1.2.jar</li><li>oryx-run.sh</li><li>oryx-serving-2.1.2.jar</li><li>oryx-speed-2.1.2.jar</li></ul></li><li><p>下载conf文件</p><ul><li><p>以ALS为例，在源码目录oryx/app/conf下<a href="https://github.com/OryxProject/oryx/blob/master/app%2Fconf%2Fals-example.conf">als-example.conf</a></p></li><li><p>并将其重命名为oryx.conf（注：文件需要和每个层的JAR文件放在同一个目录下）</p></li><li><p>修改conf文件</p></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none"># 现阶段只需要修改这么几个字段就OK了kafka-brokers = "data-mining-46.slave:9092,data-mining-47.slave:9092,data-mining-48.slave:9092,data-mining-49.master:9092"zk-servers = "data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka"hdfs-base = "hdfs:///Oryx"oryx {id = "ALSExample"als {  rescorer-provider-class = null}input-topic {  broker = ${kafka-brokers}  lock = {    master = ${zk-servers}  }...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 oryx]# ./oryx-run.sh kafka-setupInput   ZK      data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        Kafka   data-mining-46.slave:9092,data-mining-47.slave:9092,data-mining-48.slave:9092,data-mining-49.master:9092        topic   OryxInputUpdate  ZK      data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        Kafka   data-mining-46.slave:9092,data-mining-47.slave:9092,data-mining-48.slave:9092,data-mining-49.master:9092        topic   OryxUpdateAll available topics:Input topic OryxInput does not exist. Create it? yCreating topic OryxInputError while executing topic command : org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /brokers/ids[2016-04-08 16:53:09,383] ERROR org.I0Itec.zkclient.exception.ZkNoNodeException: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode =NoNode for /brokers/ids        at org.I0Itec.zkclient.exception.ZkException.create(ZkException.java:47)        at org.I0Itec.zkclient.ZkClient.retryUntilConnected(ZkClient.java:995)        at org.I0Itec.zkclient.ZkClient.getChildren(ZkClient.java:675)        at org.I0Itec.zkclient.ZkClient.getChildren(ZkClient.java:671)        at kafka.utils.ZkUtils.getChildren(ZkUtils.scala:537)        at kafka.utils.ZkUtils.getSortedBrokerList(ZkUtils.scala:172)        at kafka.admin.AdminUtils$.createTopic(AdminUtils.scala:243)        at kafka.admin.TopicCommand$.createTopic(TopicCommand.scala:107)        at kafka.admin.TopicCommand$.main(TopicCommand.scala:60)        at kafka.admin.TopicCommand.main(TopicCommand.scala)Caused by: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /brokers/ids        at org.apache.zookeeper.KeeperException.create(KeeperException.java:111)        at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)        at org.apache.zookeeper.ZooKeeper.getChildren(ZooKeeper.java:1468)        at org.apache.zookeeper.ZooKeeper.getChildren(ZooKeeper.java:1496)        at org.I0Itec.zkclient.ZkConnection.getChildren(ZkConnection.java:114)        at org.I0Itec.zkclient.ZkClient$4.call(ZkClient.java:678)        at org.I0Itec.zkclient.ZkClient$4.call(ZkClient.java:675)        at org.I0Itec.zkclient.ZkClient.retryUntilConnected(ZkClient.java:985)        ... 8 more (kafka.admin.TopicCommand$)Status of topic OryxInput:yUpdate topic OryxUpdate does not exist. Create it?Creating topic OryxUpdateError while executing topic command : org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /brokers/ids[2016-04-08 16:53:11,094] ERROR org.I0Itec.zkclient.exception.ZkNoNodeException: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /brokers/ids        at org.I0Itec.zkclient.exception.ZkException.create(ZkException.java:47)        at org.I0Itec.zkclient.ZkClient.retryUntilConnected(ZkClient.java:995)        at org.I0Itec.zkclient.ZkClient.getChildren(ZkClient.java:675)        at org.I0Itec.zkclient.ZkClient.getChildren(ZkClient.java:671)        at kafka.utils.ZkUtils.getChildren(ZkUtils.scala:537)        at kafka.utils.ZkUtils.getSortedBrokerList(ZkUtils.scala:172)        at kafka.admin.AdminUtils$.createTopic(AdminUtils.scala:243)        at kafka.admin.TopicCommand$.createTopic(TopicCommand.scala:107)        at kafka.admin.TopicCommand$.main(TopicCommand.scala:60)        at kafka.admin.TopicCommand.main(TopicCommand.scala)Caused by: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /brokers/ids        at org.apache.zookeeper.KeeperException.create(KeeperException.java:111)        at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)        at org.apache.zookeeper.ZooKeeper.getChildren(ZooKeeper.java:1468)        at org.apache.zookeeper.ZooKeeper.getChildren(ZooKeeper.java:1496)        at org.I0Itec.zkclient.ZkConnection.getChildren(ZkConnection.java:114)        at org.I0Itec.zkclient.ZkClient$4.call(ZkClient.java:678)        at org.I0Itec.zkclient.ZkClient$4.call(ZkClient.java:675)        at org.I0Itec.zkclient.ZkClient.retryUntilConnected(ZkClient.java:985)        ... 8 more (kafka.admin.TopicCommand$)Error while executing topic command : Topic OryxUpdate does not exist on ZK path data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka[2016-04-08 16:53:11,833] ERROR java.lang.IllegalArgumentException: Topic OryxUpdate does not exist on ZK path data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        at kafka.admin.TopicCommand$.alterTopic(TopicCommand.scala:119)        at kafka.admin.TopicCommand$.main(TopicCommand.scala:62)        at kafka.admin.TopicCommand.main(TopicCommand.scala) (kafka.admin.TopicCommand$)Status of topic OryxUpdate:[root@data-mining-49 oryx]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="此时出现了一个问题："><a href="#此时出现了一个问题：" class="headerlink" title="此时出现了一个问题："></a>此时出现了一个问题：</h3><pre class="line-numbers language-none"><code class="language-none">Error while executing topic command : org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /brokers/ids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个问题应该是：CDH没有启动Kafka服务没有启动。通过CDH后台启动Kafka服务（如果没有添加Kafka服务，则需要先添加）。</p><p>![Kafka Service](/assets/images/posts/oryx/add-kafka-service.png)</p><p>此时重新执行setup命令：</p><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 oryx]# ./oryx-run.sh kafka-setupInput   ZK      data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        Kafka   data-mining-47.slave:9092,data-mining-48.slave:9092        topic   OryxInputUpdate  ZK      data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        Kafka   data-mining-47.slave:9092,data-mining-48.slave:9092        topic   OryxUpdateAll available topics:Input topic OryxInput does not exist. Create it? yCreating topic OryxInputCreated topic "OryxInput".Status of topic OryxInput:Topic:OryxInput PartitionCount:4        ReplicationFactor:1     Configs:        Topic: OryxInput        Partition: 0    Leader: 140     Replicas: 140   Isr: 140        Topic: OryxInput        Partition: 1    Leader: 141     Replicas: 141   Isr: 141        Topic: OryxInput        Partition: 2    Leader: 140     Replicas: 140   Isr: 140        Topic: OryxInput        Partition: 3    Leader: 141     Replicas: 141   Isr: 141Update topic OryxUpdate does not exist. Create it? yCreating topic OryxUpdateCreated topic "OryxUpdate".Updated config for topic "OryxUpdate".Status of topic OryxUpdate:Topic:OryxUpdate        PartitionCount:1        ReplicationFactor:1     Configs:retention.ms=86400000,max.message.bytes=16777216        Topic: OryxUpdate       Partition: 0    Leader: 140     Replicas: 140   Isr: 140[root@data-mining-49 oryx]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK！</p><h3 id="需要将如上的二进制脚本都同步到其他集群的节点上了"><a href="#需要将如上的二进制脚本都同步到其他集群的节点上了" class="headerlink" title="需要将如上的二进制脚本都同步到其他集群的节点上了"></a>需要将如上的二进制脚本都同步到其他集群的节点上了</h3><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 data]# scp -r oryx/ root@192.168.1.48:/data/compute-classpath.sh    100% 1893     1.9KB/s   00:00oryx-run.sh             100%   13KB  13.2KB/s   00:00oryx-batch-2.1.2.jar    100%   26MB  26.0MB/s   00:00oryx-serving-2.1.2.jar  100%   33MB  33.0MB/s   00:01oryx-speed-2.1.2.jar    100%   26MB  26.0MB/s   00:00oryx.conf               100%   1884  1.8KB/s    00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接下来我们需要找一个可用的数据集："><a href="#接下来我们需要找一个可用的数据集：" class="headerlink" title="接下来我们需要找一个可用的数据集："></a>接下来我们需要找一个可用的数据集：</h3><p><a href="http://files.grouplens.org/datasets/movielens/ml-100k.zip">MovieLens 100K Dataset</a>，</p><p>将这个数据集的格式修改下：</p><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 ml-100k]# tr '\t' ',' &lt; u.data &gt; data.csv[root@data-mining-49 ml-100k]# tail data.csv806,421,4,882388897676,538,4,892685437721,262,3,877137285913,209,2,881367150378,78,3,880056976880,476,3,880175444716,204,5,879795543276,1090,1,87479579513,225,2,88239915612,203,3,879959583[root@data-mining-49 ml-100k]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据准备完毕，我们可以通过</p><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 oryx]# ./oryx-run.sh kafka-input --input-file data.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令导入系统， 同时打开另一个终端窗口，通过命令</p><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 oryx]# ./oryx-run.sh kafka-tailInput   ZK      data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        Kafka   data-mining-47.slave:9092,data-mining-48.slave:9092        topic   OryxInputUpdate  ZK      data-mining-46.slave:2181,data-mining-47.slave:2181,data-mining-48.slave:2181/kafka        Kafka   data-mining-47.slave:9092,data-mining-48.slave:9092        topic   OryxUpdate279,64,1,875308510646,750,3,888528902654,370,2,887863914617,582,4,883789294913,690,3,880824288660,229,2,891406212421,498,4,892241344495,1091,4,888637503806,421,4,882388897676,538,4,892685437721,262,3,877137285913,209,2,881367150378,78,3,880056976880,476,3,880175444716,204,5,879795543276,1090,1,87479579513,225,2,88239915612,203,3,879959583<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实时跟踪输入导入情况，当数据全部导入完毕后，用户可以手动的通过Ctrl-C关闭这个命令。</p><p>如果以上全部成功了，可以关闭这些进程。集群至此已经准备好运行Oryx了。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class="line-numbers language-none"><code class="language-none">./oryx-run.sh batch./oryx-run.sh speed./oryx-run.sh serving<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>blablabla…..好多输出，先不要管他。</p><p>确认服务层启动成功以后，可以导入数据（难道刚才导数据是测试用的？）</p><pre class="line-numbers language-none"><code class="language-none">wget --quiet --post-file data.csv --output-document -  --header "Content-Type: text/csv" http://192.168.1.49:8080/ingest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>批处理层已经开始触发一个新的计算了。</p><p>此时看看HDFS中的数据是这样的：</p><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 oryx]# hdfs dfs -ls /OryxFound 2 itemsdrwxr-xr-x   - hdfs supergroup          0 2016-04-08 18:40 /Oryx/datadrwxr-xr-x   - hdfs supergroup          0 2016-04-08 18:40 /Oryx/model^[[A[root@data-mining-49 oryx]# hdfs dfs -ls /Oryx/dataFound 1 itemsdrwxr-xr-x   - hdfs supergroup          0 2016-04-08 18:40 /Oryx/data/oryx-1460112000000.data[root@data-mining-49 oryx]# hdfs dfs -ls /Oryx/modelFound 3 itemsdrwxr-xr-x   - hdfs supergroup          0 2016-04-08 18:41 /Oryx/model/.checkpointdrwxr-xr-x   - hdfs supergroup          0 2016-04-08 18:40 /Oryx/model/.temporarydrwxr-xr-x   - hdfs supergroup          0 2016-04-08 18:40 /Oryx/model/1460112018440[root@data-mining-49 oryx]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表明数据已经ok了，通过API确认计算是否完成</p><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 ~]# wget --quiet --output-document - --server-response http://192.168.1.49:8080/ready  HTTP/1.1 200 OK  Content-Length: 0  Date: Fri, 08 Apr 2016 10:43:27 GMT  Server: Oryx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK！</p><h3 id="我们来查看下推荐结果"><a href="#我们来查看下推荐结果" class="headerlink" title="我们来查看下推荐结果"></a>我们来查看下推荐结果</h3><pre class="line-numbers language-none"><code class="language-none">[root@data-mining-49 ~]# wget --quiet --output-document -  http://192.168.1.49:8080/recommend/1750,0.8234792673029006127,0.7889597890898585181,0.7442612769082189275,0.7263787714764476258,0.7164891492575407121,0.700639194343239115,0.697495789732784288,0.6787936894688755285,0.669647410511970525,0.6603603088587988[root@data-mining-49 ~]# wget --quiet --output-document -  http://192.168.1.49:8080/recommend/806173,1.08470471354667164,1.01426794147118937,0.9939510896801949183,0.991823517833836422,0.964462065137922869,0.945814429782331202,0.942016797140240711,0.9270770070143044135,0.9227914617804345191,0.9215727103874087[root@data-mining-49 ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完美结束。</p><p>这貌似是走的批处理逻辑，中途实时计算层挂鸟</p><pre class="line-numbers language-none"><code class="language-none">16/04/08 18:42:38 INFO SparkContext: Successfully stopped SparkContext16/04/08 18:42:38 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 0.0 failed 4 times, most recent failure: Lost task 0.3 in stage 0.0 (TID 3, data-mining-47.slave): java.io.IOException: org.apache.spark.SparkException: Failed to get broadcast_0_piece0 of broadcast_0        at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1177)        at org.apache.spark.broadcast.TorrentBroadcast.readBroadcastBlock(TorrentBroadcast.scala:165)        at org.apache.spark.broadcast.TorrentBroadcast._value$lzycompute(TorrentBroadcast.scala:64)        at org.apache.spark.broadcast.TorrentBroadcast._value(TorrentBroadcast.scala:64)        at org.apache.spark.broadcast.TorrentBroadcast.getValue(TorrentBroadcast.scala:88)        at org.apache.spark.broadcast.Broadcast.value(Broadcast.scala:70)        at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:62)        at org.apache.spark.scheduler.Task.run(Task.scala:88)        at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:214)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:745)Caused by: org.apache.spark.SparkException: Failed to get broadcast_0_piece0 of broadcast_0        at org.apache.spark.broadcast.TorrentBroadcast$$anonfun$org$apache$spark$broadcast$TorrentBroadcast$$readBlocks$1$$anonfun$2.apply(TorrentBroadcast.scala:138)        at org.apache.spark.broadcast.TorrentBroadcast$$anonfun$org$apache$spark$broadcast$TorrentBroadcast$$readBlocks$1$$anonfun$2.apply(TorrentBroadcast.scala:138)        at scala.Option.getOrElse(Option.scala:120)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咱们下一篇再找找原因吧。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://oryx.io/docs/admin.html">http://oryx.io/docs/admin.html</a></li><li><a href="http://oryx.io/docs/endusers.html">http://oryx.io/docs/endusers.html</a></li><li><a href="http://oryx.io/docs/developer.html">http://oryx.io/docs/developer.html</a></li><li><a href="http://oryx.io/docs/performance.html">http://oryx.io/docs/performance.html</a></li><li><a href="http://oryx.io/apidocs/index.html">http://oryx.io/apidocs/index.html</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oryx2 开发者文档</title>
      <link href="/2016-04-06-Oryx2-developer-doc.html"/>
      <url>/2016-04-06-Oryx2-developer-doc.html</url>
      
        <content type="html"><![CDATA[<h3 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h3><ul><li><a href="http://git-scm.com/">git</a>, 或者一个支持git的IDE</li><li><a href="http://maven.apache.org/">Apache Maven</a> 3.2.1 或者更新版本</li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java JDK</a> (不能只有JRE) 7 或者更新版本</li></ul><p>以上需要已经安装到了你的开发环境中。</p><span id="more"></span><h2 id="Building"><a href="#Building" class="headerlink" title="Building"></a>Building</h2><p>克隆代码到你本地，并且编译：</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/OryxProject/oryx.git oryxcd oryxmvn -DskipTests package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会编译出如下的二进制的jar文件：</p><ul><li>批处理层: deploy/oryx-batch/target/oryx-batch-2.1.2.jar</li><li>实时处理层: deploy/oryx-speed/target/oryx-speed-2.1.2.jar</li><li>服务层: deploy/oryx-serving/target/oryx-serving-2.1.2.jar</li></ul><p>友情提醒，如果你对开发Oryx感兴趣，可以根据这个<a href="https://help.github.com/articles/fork-a-repo">分支</a>克隆自己的分支，然后就可以提交修改了。</p><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><p>如果使用Java8编译，需要添加参数-Pjava8 并且测试这里的指令。</p><h3 id="Platform-Only"><a href="#Platform-Only" class="headerlink" title="Platform Only"></a>Platform Only</h3><p>默认的编译包括基于Spark MLlib和其他库的端到端的ML程序。如果只是编译lambda和ML层，需要通过参数-P!app-tier关闭其他的选项。注意，在bash中，！需要转义： -P!app-tier。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>mvn 测试会执行所有的但愿测试用例。也同时会执行所有的集成测试，这个可能会需要稍微长点的时间。</p><h2 id="模型对应表"><a href="#模型对应表" class="headerlink" title="模型对应表"></a>模型对应表</h2><p>主要的模型和他们对应的层：</p><table><thead><tr><th></th><th>Serving</th><th>Speed</th><th>Batch</th></tr></thead><tbody><tr><td>Binary</td><td>oryx-serving</td><td>oryx-speed</td><td>oryx-batch</td></tr><tr><td>App</td><td>oryx-app-serving</td><td>oryx-app-mllib oryx-app</td><td>oryx-app-mllib oryx-app</td></tr><tr><td>ML</td><td></td><td>oryx-ml</td><td>oryx-ml</td></tr><tr><td>Lambda</td><td>oryx-lambda-serving</td><td>oryx-lambda</td><td>oryx-lambda</td></tr></tbody></table><p>支持的模型，比如：<a href="https://github.com/OryxProject/oryx/tree/master/framework/oryx-common">oryx-common</a>, <a href="https://github.com/OryxProject/oryx/tree/master/app/oryx-app-common">oryx-app-common</a>, <a href="https://github.com/OryxProject/oryx/tree/master/framework/oryx-api">oryx-api</a>, and <a href="https://github.com/OryxProject/oryx/tree/master/app/oryx-app-api">oryx-app-api</a> 没有在这里列出了。</p><h2 id="实现一个Oryx-程序"><a href="#实现一个Oryx-程序" class="headerlink" title="实现一个Oryx 程序"></a>实现一个Oryx 程序</h2><p>Oryx 中的“app 层”，是实现了推荐的真实的批处理，实时，服务层逻辑，集群和分类。然而，任何实现都需要使用到Oryx。他们也可以混合和匹配。举个例子，你可以重新实现ALS-related推荐的批处理层，但是仍然使用原来的ALS的服务层和实时计算层。</p><h3 id="创建一个程序"><a href="#创建一个程序" class="headerlink" title="创建一个程序"></a>创建一个程序</h3><p>在每个例子中，创建一个自定义的批处理层，实时计算层或者服务层的程序都需要实现com.cloudera.oryx.api中的几个关键的Java接口或者Scala的特性。这些接口/特性可以在项目的oryx-api模型中找到。</p><table><thead><tr><th></th><th>Java</th><th>Scala</th></tr></thead><tbody><tr><td>Batch</td><td>batch.BatchLayerUpdate</td><td>batch.ScalaBatchLayerUpdate</td></tr><tr><td>Speed</td><td>speed.SpeedModelManager</td><td>speed.ScalaSpeedModelManager</td></tr><tr><td>Serving</td><td>serving.ServingModelManager</td><td>serving.ScalaServingModelManager</td></tr></tbody></table><p>com.cloudera.oryx.api也包含大量的关键的类和接口，举个例子，<a href="https://github.com/OryxProject/oryx/blob/master/framework/oryx-api/src/main/java/com/cloudera/oryx/api/serving/OryxResource.java">serving.OryxResource</a>  是一个入口，用来编译自定义的JAX-RS 端点，但是不需要使用。</p><h3 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h3><p>进入你的程序的这些接口/特性，添加一个com.cloudera.oryx:oryx-api的依赖，scope字段需要填写“provided”，在Maven中，需要添加如下依赖：<br>In Maven, this would mean adding a dependency like:</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;com.cloudera.oryx&lt;/groupId&gt;    &lt;artifactId&gt;oryx-api&lt;/artifactId&gt;    &lt;scope&gt;provided&lt;/scope&gt;    &lt;version&gt;2.1.2&lt;/version&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些artifacts被放在了<a href="https://repository.cloudera.com/artifactory/cloudera-repos/">Cloudera</a>这个分支下，因此在编译的时候需要引用这个分支：</p><pre class="line-numbers language-none"><code class="language-none">&lt;repositories&gt;  &lt;repository&gt;    &lt;id&gt;cloudera&lt;/id&gt;    &lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos/&lt;/url&gt;  &lt;/repository&gt;&lt;/repositories&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个最小的实例可以访问<a href="https://github.com/OryxProject/oryx/tree/master/app/example">example/</a> 这里。</p><p>”Word Count” 这个程序是按照空格将行分割成独立的单词，然后统计出排重后的单词出现的次数。</p><p>编译代码后生成一个JAR文件，包含了程序实现和所有第三方的diam，如果使用Maven，可以通过mvn package命令。</p><h3 id="编译-Word-Count-例子"><a href="#编译-Word-Count-例子" class="headerlink" title="编译 Word Count 例子"></a>编译 Word Count 例子</h3><p>举例：编译样例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">cd app/examplemvn package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的JAR包在target/example-2.1.2.jar。</p><h3 id="自定义Oryx程序"><a href="#自定义Oryx程序" class="headerlink" title="自定义Oryx程序"></a>自定义Oryx程序</h3><p>当发布一个源自Oryx的预打包程序，在某些情况下，有可能会提供一个扩展的实现，从而可以自定义他们的行为。举例，ALS推荐程序暴露了com.cloudera.oryx.app.als.RescorerProvider接口。这些特定程序API类可以在模块oryx-app-api中找到。这些接口的实现也可以在独立模式下被编译，打包，部署。</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;com.cloudera.oryx&lt;/groupId&gt;    &lt;artifactId&gt;oryx-app-api&lt;/artifactId&gt;    &lt;scope&gt;provided&lt;/scope&gt;    &lt;version&gt;2.1.2&lt;/version&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布程序"><a href="#发布程序" class="headerlink" title="发布程序"></a>发布程序</h2><p>拷贝生成的JAR文件–myapp.jar，放到需要执行的Oryx 二进制JAR文件相同的目录下。</p><p>修改Oryx的配置文件，以便于引用自定义的批处理，实时计算和服务层的实现。<br>当执行批处理，实时计算和服务层时，需要添加–app-jar myapp.jar到oryx-run.sh命令行中。</p><h3 id="发布-Word-Count-例子"><a href="#发布-Word-Count-例子" class="headerlink" title="发布 Word Count 例子"></a>发布 Word Count 例子</h3><p>举例，如果已经编译好了上述的“word count”的程序，你可以执行这个程序，直接引用wordcount-example.conf这个配置文件：</p><pre class="line-numbers language-none"><code class="language-none">./oryx-run.sh batch --conf wordcount-example.conf --app-jar example-2.1.2.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>… 对于实时计算和服务层也是同样的。</p><pre class="line-numbers language-none"><code class="language-none">curl -X POST http://.../add/foo%20bar%20baz...curl http://.../distinct{"foo":2,"bar":2,"baz":2}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件本身已经配置好了主机名称和<a href="http://www.cloudera.com/content/www/en-us/downloads/quickstart_vms.html">Cloudera Quickstart VM</a>的参数。事实上，这个例子可以作为一个集群配置的例子：<a href="http://oryx.io/docs/admin.html#cloudera_quickstart_vm_setup">Cloudera Quickstart VM Setup</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oryx2 性能优化文档</title>
      <link href="/2016-04-07-Oryx2-performance-doc.html"/>
      <url>/2016-04-07-Oryx2-performance-doc.html</url>
      
        <content type="html"><![CDATA[<p>这里收集了各种意见，经验法则和基准测试相关的性能：做这些不同的工作需要多少资源。</p><span id="more"></span><h2 id="硬件和集群设计"><a href="#硬件和集群设计" class="headerlink" title="硬件和集群设计"></a>硬件和集群设计</h2><p>一般情况下，对硬件或者集群没有特别的要求。集群资源的需求主要取决于基于Spark的作业，这些往往是内存密集型和CPU密集型的，但是一般不会是I/O绑定的。如果数据的采集率非常的高，Kafka可能需要一些特殊的考虑。在这两种情况下，针对其他任何的Kafka或者Spark作业并没有不同的标准。</p><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>因为Kafka是底层传输数据的，存储要求的采集和存放数据对于Kafka也就是这样的。查看<a href="http://kafka.apache.org/performance.html">Kafka 性能</a>中提到的内容。一般情况下，Kafka并不会接近瓶颈，也能够像其他Kafka的使用一样调整资源占用大小。</p><h3 id="批处理层"><a href="#批处理层" class="headerlink" title="批处理层"></a>批处理层</h3><p>批处理层独特的地方是模型的构建, and the element that is of most interest to benchmark are likely the model building processes implemented in the app tier, on top of MLlib. Here again, the resources required to build a model over a certain amount of data are just that of the underlying MLlib implementations of ALS, k-means and decision forests.</p><p>MLlib的任何性能优化或者是基准测试都适用于这些基于MLlib预制的实现的批处理层，这对于Oryx也是一样的。</p><h3 id="JVM-优化"><a href="#JVM-优化" class="headerlink" title="JVM 优化"></a>JVM 优化</h3><p>Choosing the number of Spark executors, cores and memory is a topic in its own right.</p><p>很自然的，更多的executors意味着更多的核心和内存。但是数量是不能超多集群上机器的总数量的；请查看：oryx.batch.streaming.num-executors。</p><p>更多的核，意味着可能会有更多的并发进程。在典型的模型构建进程中，如果能达到任务总数的三分之一或者2分之一的话，这将是非常有用的。你可以观察到任务的数量，以及Spark UI中批处理层固有的并发情况。在这数量之下，核数再多也无法增加更多的并发了。少一些是可以的，无非就是增加了点运行时间。当然，在批处理的时间间隔内，充足的核数可以保证批处理的顺利完成。核的数量可以通过oryx.batch.streaming.executor-cores进行配置。</p><p>如果你的作业发生了内存溢出，驱动器和executors可能需要更多的内存。如果你注意到在批处理层的”存储”标签页中并不是100%的RDD被缓存住了，那么更多的内存可能会有所帮助。查看：oryx.batch.streaming.executor-memory。</p><p>oryx-run.sh脚本的–jvm-args参数是用来为所有的JVM进程设置内存参数的。举个例子，通过设置 -XX:+UseG1GC ，会达到一个比较合理的效果。</p><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>REST API 后端服务器是Tomcat。配置文件是没有暴露给用户的，但是对于他的负载已经做了合理的调整。Tomcat容器本身开销很小，不需要担心性能问题。</p><p>最可能感兴趣的是项目中提供的关于CPU密集型程序实现的性能问题，而不是框架本身。</p><h3 id="基准测试-交替最小二乘法推荐"><a href="#基准测试-交替最小二乘法推荐" class="headerlink" title="基准测试: 交替最小二乘法推荐"></a>基准测试: 交替最小二乘法推荐</h3><p>由于ALS实现的程序的服务层的大多数的操作是，会在内存中实时的计算一个非常大的矩阵，所以这个程序是最具有挑战性的了。大概其的规则如下：</p><p>如果需要运行类似的基准测试，可以使用LoadBenchmark，可以按照如下的配置：</p><pre class="line-numbers language-none"><code class="language-none">mvn -DskipTests clean installcd app/oryx-app-serving...mvn -Pbenchmark \ -Doryx.test.als.benchmark.users=1000000 \ -Doryx.test.als.benchmark.items=5000000 \ -Doryx.test.als.benchmark.features=250 \ -Doryx.test.als.benchmark.lshSampleRate=0.3 \ -Doryx.test.als.benchmark.workers=2 \ integration-test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><ul><li>内存需求是成线性的：(users + items) x features</li><li>-XX:+UseStringDeduplication 在 Java 8中是非常有用的 (reflected below)</li><li>At scale, 1M users or items ~= 500-1000M of heap required, depending on features</li></ul><p>  Example steady-state heap usage (Java 8):</p><table><thead><tr><th>Features</th><th>Users+Items (M)</th><th>Heap (MB)</th></tr></thead><tbody><tr><td>50</td><td>2</td><td>1400</td></tr><tr><td>50</td><td>6</td><td>2600</td></tr><tr><td>50</td><td>21</td><td>7500</td></tr><tr><td>250</td><td>2</td><td>3000</td></tr><tr><td>250</td><td>6</td><td>7500</td></tr><tr><td>250</td><td>21</td><td>25800</td></tr></tbody></table><h3 id="请求延迟，吞吐量"><a href="#请求延迟，吞吐量" class="headerlink" title="请求延迟，吞吐量"></a>请求延迟，吞吐量</h3><ul><li>Recommend and similarity computation time scales linearly with items x features</li><li>A single request is parallelized across CPUs; max throughput and minimum latency is already achieved at about 1-2 concurrent requests</li><li>Locality sensitive hashing decreases processing time roughly linearly; 0.33 ~= 1/0.33 ~= 3x faster (setting too low adversely affects result quality)</li></ul><p>  Below are representative throughput / latency measurements for the /recommend endpoint using<br>  a 32-core Intel Xeon 2.3GHz (Haswell), OpenJDK 8 and flags -XX:+UseG1GC -XX:+UseStringDeduplication. Heap size was comfortably large enough for the data set in each case. The tests were run with 1-3 concurrent request at a time, as necessary to achieve near-full CPU utilization.</p><p><em>With LSH (sample rate = 0.3)</em></p><table><thead><tr><th>Features</th><th>Items (M)</th><th>Throughput (qps)</th><th>Latency (ms)</th></tr></thead><tbody><tr><td>50</td><td>1</td><td>437</td><td>7</td></tr><tr><td>250</td><td>1</td><td>151</td><td>13</td></tr><tr><td>50</td><td>5</td><td>84</td><td>24</td></tr><tr><td>250</td><td>5</td><td>36</td><td>56</td></tr><tr><td>50</td><td>20</td><td>14</td><td>69</td></tr><tr><td>250</td><td>20</td><td>6</td><td>162</td></tr></tbody></table><p><em>Without LSH (sample rate = 1.0)</em></p><table><thead><tr><th>Features</th><th>Items (M)</th><th>Throughput (qps)</th><th>Latency (ms)</th></tr></thead><tbody><tr><td>50</td><td>1</td><td>74</td><td>27</td></tr><tr><td>250</td><td>1</td><td>23</td><td>44</td></tr><tr><td>50</td><td>5</td><td>13</td><td>80</td></tr><tr><td>250</td><td>5</td><td>5</td><td>191</td></tr><tr><td>50</td><td>20</td><td>4</td><td>282</td></tr><tr><td>250</td><td>20</td><td>1</td><td>708</td></tr></tbody></table><h3 id="JVM-优化-1"><a href="#JVM-优化-1" class="headerlink" title="JVM 优化"></a>JVM 优化</h3><p>机器上运行（多个）服务层，使用越多的可用的核，意味着可以提供更多的并发请求处理能力。在ALS中，一些请求，比如/recommend 可以在一个请求中通过多核计算完成。</p><p>内存的需求主要是由加载进内存的模型的需求控制的。对于大的模型，比如ALS，这就意味着需要确保服务层有足够的内存以保证不会导致GC崩溃。查看oryx.serving.memory。</p><p>-XX:+UseG1GC remains a good garbage collection setting to supply with –jvm-args. In Java 8, -XX:+UseStringDeduplication can reduce memory requirements by about 20%.</p><h3 id="实时计算层"><a href="#实时计算层" class="headerlink" title="实时计算层"></a>实时计算层</h3><p>实时计算层驱动进程类似服务层那样也是需要大量内存的，因为他也是需要加载一个模型到内存中的。驱动进程的内存是通过oryx.speed.streaming.driver-memory控制的，也需要和服务层内存一样设置，并且也需要JVM的一些flags支持。</p><p>这也是一个Spark Streaming 作业，也需要想批处理层那样配置executors。一般情况下，需要更少的处理和更低的时间延迟。</p><p>Executors will have to be sized to consume input Kafka partitions fully in parallel; the number of cores times number of executors should be at least the number of Kafka partitions.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字volatile</title>
      <link href="/2016-03-08-Java-keyword-volatile.html"/>
      <url>/2016-03-08-Java-keyword-volatile.html</url>
      
        <content type="html"><![CDATA[<p>翻译自：<a href="http://tutorials.jenkov.com/java-concurrency/volatile.html">http://tutorials.jenkov.com/java-concurrency/volatile.html</a></p><h3 id="Java-Volatile-关键字"><a href="#Java-Volatile-关键字" class="headerlink" title="Java Volatile 关键字"></a>Java Volatile 关键字</h3><p>Java关键字volatile标识一个变量“被存储在主内存中”。更准确的说法是：每次volatile变量会从主内存中读取，而不是从CPU缓存；每次volatile变量的写操作会写入主内存，而不仅仅是CPU缓存。</p><p>实际上，自Java5开始，volatile关键字保证的是volatile声明的变量都是写入和读取自主内存的。以下将会详细讲解。</p><!--more--><h3 id="Java-volatile保证可见性"><a href="#Java-volatile保证可见性" class="headerlink" title="Java volatile保证可见性"></a>Java volatile保证可见性</h3><p>Java中volatile关键字保证了线程之间变量修改的可见性。这个可能会有点抽象，因此让我详细讲解下。</p><p>在多线程程序中，由于性能的原因，在操作非volatile变量的时候，每个线程会将变量自主内存拷贝🈯️CPU缓存。如果你的计算机是多核的，每个线程就会运行在不同的CPU上。也就是说，每个线程会拷贝变量到不同的CPU缓存中。见插图：</p><p>![volatile](/assets/images/posts/volatile/java-volatile-1.png)</p><p>使用非volatile变量，当JVM自主内存读取数据到CPU缓存，或者自CPU缓存写入主内存时，是没有保证的。这可能会引起很多问题，接下来章节中会降到。</p><p>设想一种情况，多个线程可以访问类似如下的同一个共享对象，这个对象包含一个计数器变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另一个设想，只有线程1改变计数变量，但是线程1和线程2都可能经常读取这个计数变量。</p><p>如果计数变量没有被声明为volatile，那么自CPU缓存回写到主内存的过程中，就无法保证这个计数变量的值了。也就是说，技术变量的值在通过CPU缓存写会主内存的过程中发生了改变。如图：</p><p>![volatile 2](/assets/images/posts/volatile/java-volatile-2.png)</p><p>这个问题是因为线程并没有得到最新的值，另外那个线程并没有将最新的变量写回主内存，这就是所谓的“可见”问题。某一个线程的更新并没有被另外的线程获取。</p><p>通过声明计数变量为volatile，那么这个计数变量所有的更新都会立即被写回主内存。同时，所有的读操作都会直接通过主内存。如下既是如何声明计数变量为volatile类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>声明一个变量为volatile由此可以保证了变量的写操作对于其他线程都是可见的。</p><h3 id="The-Java-volatile-Happens-Before-Guarantee"><a href="#The-Java-volatile-Happens-Before-Guarantee" class="headerlink" title="The Java volatile Happens-Before Guarantee"></a>The Java volatile Happens-Before Guarantee</h3><p>自Java5开始，volatile关键字保证的不止是变量的主内存读和写，实际上还包含：</p><ul><li><p>如果线程A写入一个volatile变量，此时线程B读取了相同的volatile变量，那么此时所有的变量在写入volatile变量前对线程A是可见的，同时也对线程B在读取了volatile变量后也是可见的。</p></li><li><p>volatile变量的读写指令不能促使JVM重新排序（只要JVM发现排序不会改变程序的行为，基于性能的原因，JVM会进行排序）。前后的指令会被排序，但是volatile得读写不会混入这些指令。无论如何，指令都会follow一个volatile变量的读写，并且保证这种操作发生在读或者写之后。</p></li></ul><p>这个需要更深入的解释。</p><p>当一个线程写入一个volatile变量时，并不止这个volatile变量自己写入了主内存。同时所有被线程修改的变量在写入volatile变量之前都会被回写到主内存。当一个线程读取一个volatile变量时，他会同时读取主内存中所有其他的变量，这些变量都是和volatile变量一同写入主内存的。</p><p>看例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Thread A:</span>    sharedObject<span class="token punctuation">.</span>nonVolatile <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    sharedObject<span class="token punctuation">.</span>counter     <span class="token operator">=</span> sharedObject<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// Thread B:</span>    <span class="token keyword">int</span> counter     <span class="token operator">=</span> sharedObject<span class="token punctuation">.</span>counter<span class="token punctuation">;</span>    <span class="token keyword">int</span> nonVolatile <span class="token operator">=</span> sharedObject<span class="token punctuation">.</span>nonVolatile<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为线程A在写入volatile变量sharedObject.counter之前写入了非volatile变量sharedObject.nonVolatile，那么当线程A写入sharedObject.counter时，sharedObject.nonVolatile 和 sharedObject.counter 都会被写入主内存。</p><p>由于线程B开始的时候读取volatile类型的sharedObject.counter，那么sharedObject.counter and sharedObject.nonVolatile都会使用线程B自主内存读取到CPU缓存。等到线程B读取sharedObject.nonVolatile时，就会看到线程A写入的值。</p><p>开发者可能会使用这种扩展的可见性，保证了线程之间变量的可见性。只需要声明一个或者非常少的volatile变量替换掉每个变量都声明为volatile。如下是一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exchanger</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span>   object       <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> hasNewObject <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> newObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hasNewObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//wait - do not overwrite existing new object</span>        <span class="token punctuation">}</span>        object <span class="token operator">=</span> newObject<span class="token punctuation">;</span>        hasNewObject <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//volatile write</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>hasNewObject<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//volatile read</span>            <span class="token comment">//wait - don't take old object (or null)</span>        <span class="token punctuation">}</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> object<span class="token punctuation">;</span>        hasNewObject <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//volatile write</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程A通过调用put()持续的写入对象。线程B通过take()持续的获取对象。这个类只有在线程A调用put()和线程B调用take()时，通过使用volatile变量才能工作正常。</p><p>如果JVM在不改变排序指令的语义的基础上实现，那么JVM则会通过记录JAVA指令优化性能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>hasNewObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//wait - do not overwrite existing new object</span><span class="token punctuation">}</span>hasNewObject <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//volatile write</span>object <span class="token operator">=</span> newObject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到volatile变量hasNewObject在被实际设置前已经被执行。对于JVM，这看上去完全合法。这两个写入变量的值相对于另外一个是独立的。</p><p>然而，排序执行的指令会有损对象变量的可见性。首先，线程B可能在线程A设置新值之前将hasNewObject设置为true。其次，甚至没法保证当新值写入对象后回写到主内存。</p><p>为了防止如上述情况的发生，volatile关键字采用“发生前保证”机制。”发生前保证“机制保证读和写volatile变量的指令不能被排序。前后指令可以被排序，但是volatile读或者写指令发生前后不能被排序。</p><p>举个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sharedObject<span class="token punctuation">.</span>nonVolatile1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>sharedObject<span class="token punctuation">.</span>nonVolatile2 <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>sharedObject<span class="token punctuation">.</span>nonVolatile3 <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>sharedObject<span class="token punctuation">.</span><span class="token keyword">volatile</span>     <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//a volatile variable</span><span class="token keyword">int</span> someValue1 <span class="token operator">=</span> sharedObject<span class="token punctuation">.</span>nonVolatile4<span class="token punctuation">;</span><span class="token keyword">int</span> someValue2 <span class="token operator">=</span> sharedObject<span class="token punctuation">.</span>nonVolatile5<span class="token punctuation">;</span><span class="token keyword">int</span> someValue3 <span class="token operator">=</span> sharedObject<span class="token punctuation">.</span>nonVolatile6<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JVM会排序前3个指令，只要他们在volatile写指令之前。</p><p>同样的，只要volatile写入质量发生在后三个指令之前，那么后三个指令就会被排序。在此之前，这三个指令中任何一个指令都不会被排序。<br>That is basically the meaning of the Java volatile happens before guarantee.</p><h3 id="volatile-并不总是适用的"><a href="#volatile-并不总是适用的" class="headerlink" title="volatile 并不总是适用的"></a>volatile 并不总是适用的</h3><p>即使volatile关键字保证了所有的volatile变量直接从主内存读取，所有的写操作都是直接写入主内存，但是存在声明了volatile而仍然不够的情况。</p><p>之前提过的，只有线程1写入共享的counter变量，声明为volatile的时候才能确保线程2总是能获取最新的写入值。</p><p>事实上，多线程甚至能写入一个共享的volatile变量，如果这个新写入的值不依赖于旧数据的话就将正确的值存入主内存。换句话说, 如果一个线程写入一个值到共享的volatile变量，并不会马上将读取的值用于下一个值得话。</p><p>一旦一个线程首次读取一个volatile变量的值，并且需要基于这个值生成一个新的共享volatile变量值，那么这个volatile变量就不能保证正确的可见性。读取volatile变量的值并且写入新值得很短的间隙，就会创建一个竞争的条件：多个线程会读取同一个volatile变量的值，并且生成一个新的值，当回写进主内存后就会覆盖掉其他的值。</p><p>多线程增加相同的计数器值得这种情况，准确的说对于volatile变量是不适用的。一下片段讲话详细讲述这种情况。</p><p>设想，如果线程1读取共享计数变量，他的值是0，并放入CPU的缓存，使其加1，但是这样的改变并不会回写如主内存。线程2此时可以自主内存读取相同的计数器变量，但是读到的值仍然是0，并将这个值放入了自己的CPU缓存。线程2也可以对其加1，并且可以回写到主内存。这种情况详见下图：</p><p>![volatile 3](/assets/images/posts/volatile/java-volatile-3.png)</p><p>线程1和线程2此时并不是同步的。这个共享计数器的值应该是2，但是每个线程在自己的CPU缓存中存放的值却是1，在主内存中的值是0.这已经完全乱了！即使最后每个线程回写这个共享计数变量的值到主内存，这个值也是错误的。</p><h3 id="volatile在什么时候是适用的"><a href="#volatile在什么时候是适用的" class="headerlink" title="volatile在什么时候是适用的?"></a>volatile在什么时候是适用的?</h3><p>就像之前提到过的，如果是两个线程都需要读取和写入一个共享变量，那么此时适用volatile关键字是不适用的。那么就需要使用synchronized来保证读和写的原子性。读写volatile变量不会阻塞线程的读写。为了实现这一点，你必须使用synchronized关键字。</p><p>作为synchronized可供选择，需要采用java.util.concurrent包中的某一个。比如AtomicLong，AtomicReference或者其他的任意一个。</p><p>在这种情况下，只有一个线程读写volatile变量的值，其他线程只是读取变量，那么读取线程就可以通过volatile变量保证可以读取到最新的写入值。如果没有volatile变量，则这个过程就不能被保证。</p><p>volatile关键字可以被用在32和64位变量中。</p><h3 id="volatile-性能注意事项"><a href="#volatile-性能注意事项" class="headerlink" title="volatile 性能注意事项"></a>volatile 性能注意事项</h3><p>volatile变量的读写会触发变量在主内存中的读写。主内存中的读写会比CPU缓存消耗的代价高。使用volatile变量同样会阻止普通性能增强指令的排序。因此，只能在确实需要增加变量可见性基础上使用volatile变量。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html">http://www.ibm.com/developerworks/cn/java/j-jtp06197.html</a></li><li><a href="http://www.infoq.com/cn/articles/ftf-java-volatile">http://www.infoq.com/cn/articles/ftf-java-volatile</a></li><li><a href="http://www.infoq.com/cn/articles/java-memory-model-4">http://www.infoq.com/cn/articles/java-memory-model-4</a></li><li><a href="http://sakyone.iteye.com/blog/668091">http://sakyone.iteye.com/blog/668091</a></li><li><a href="https://zh.wikipedia.org/wiki/Volatile%E5%8F%98%E9%87%8F">https://zh.wikipedia.org/wiki/Volatile%E5%8F%98%E9%87%8F</a></li><li><a href="http://www.cnblogs.com/aigongsi/archive/2012/04/01/2429166.html">http://www.cnblogs.com/aigongsi/archive/2012/04/01/2429166.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式处理Nginx</title>
      <link href="/2016-01-24-Reg-Nginx.html"/>
      <url>/2016-01-24-Reg-Nginx.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-日志配置格式"><a href="#Nginx-日志配置格式" class="headerlink" title="Nginx 日志配置格式"></a>Nginx 日志配置格式</h1><pre class="line-numbers language-none"><code class="language-none">log_format  main        '[$upstream_addr] $remote_addr [$time_local] "$request" $status '        '"$request_body" $body_bytes_sent "$http_referer" "$http_user_agent" '        'RESP:$upstream_response_time '        'REQ:$request_time';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><pre class="line-numbers language-none"><code class="language-none">[192.168.1.5:80] 19.78.22.51 [31/Dec/2015:13:59:02 +0800] "POST /api/mbbb/dup_msg_send?pallow_dubbing=0&amp;partner_msgs_id=279&amp;roles_id=23&amp;score=6700&amp;section_id=512&amp;whole_audio=200.m4a&amp;device_id=112222f0fc3&amp;lang=zh-CN&amp;trigger=user&amp;user_id=516487&amp;v=ios_7.0.3 HTTP/1.1" 200 "audio_fragment=00280%22%3A%7B%22pitch%22%3A47%2C%22rhythm%22%3A95%2C%22tone%22%3A75%7D%2C%226800278%22%3A%7B%22pitch%22%3A70%2C%22rhythm%22%3A90%2%7D%2C%226800276%22%3A%7B%22pitch%22%3A60%2C%22rhythm%22%3A82%2C%22tone%22D&amp;content=hhhhhh%E5%B0%8F%E5%AB%A9%E8%8D%89" 51 "-" "paipao/7.0.3 (iPhone; iOS 9.2; Scale/2.00)" RESP:0.166 REQ:0.167[192.168.1.5:80, 192.169.1.33:88] 60.12.246.5 [31/Dec/2015:23:59:02 +0800] "GET /api/mppb/notice/list?device_id=112233fe6a6d991f&amp;lang=zh-CN&amp;user_id=6120&amp;v=ios_7.0.3 HTTP/1.1" 200 "-" 54 "-" "paipao/7.0.3 (iPhone; iOS 9.2; Scale/2.00)" RESP:0.006 REQ:0.006<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h2><pre class="line-numbers language-none"><code class="language-none">p = re.compile(            r"\[\-?[\d.\:]*[\ \,]*?.*?\]\ [\d.\:]*\ \[(\d+)/(\w+)/(\d+)\:(\S+)\ [\S]+\]\ \"(\S+)\ (\S+)\ .*?\"\ (\d+)\ \"(.*?)\"\ (\d+)\ \"([^\"]*)\"\ \".*?\" .*?")m = re.findall(p, line)day = m[0][0]month = m[0][1]year = m[0][2]ttime = m[0][3]method = m[0][4]request = m[0][5]status = m[0][6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scala版本"><a href="#Scala版本" class="headerlink" title="Scala版本"></a>Scala版本</h2><pre class="line-numbers language-none"><code class="language-none">val regex = new Regex( """\[\-?[\d.\:]*[\ \,]*?.*?\]\ [\d.\:]*\ \[(\d+)/(\w+)/(\d+)\:(\S+)\ [\S]+\]\ \"(\S+)\ (\S+)\ .*?\"\ (\d+)\ \"(.*?)\"\ (\d+)\ \"([^\"]*)\"\ \".*?\" .*?""")val regex(day, month, year, time, method, request, status, postData, bytes, refer) = line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="http://www.jianshu.com/p/5d8c802be13d">http://www.jianshu.com/p/5d8c802be13d</a></li><li><a href="https://segmentfault.com/a/1190000002727070">https://segmentfault.com/a/1190000002727070</a></li><li><a href="http://desert3.iteye.com/blog/1001568">http://desert3.iteye.com/blog/1001568</a></li><li><a href="http://stackoverflow.com/questions/996536/regex-in-python">http://stackoverflow.com/questions/996536/regex-in-python</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spark优化</title>
      <link href="/2016-01-04-Spark-tuning.html"/>
      <url>/2016-01-04-Spark-tuning.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spark-优化"><a href="#Spark-优化" class="headerlink" title="Spark 优化"></a>Spark 优化</h2><p>由于Spark内存计算特性，Spark程序会由集群上的如下因素决定其性能</p><ul><li>CPU</li><li>网络带宽</li><li>内存</li></ul><p>通常来说，如果配置适当的内存，那么瓶颈就是带宽。但是有些时候，有需要做些优化，比如以序列化的形式存储RDD，从而降低内存的占用。</p><span id="more"></span><p>此会从两方面分析</p><ul><li>数据序列化</li><li>内存优化</li></ul><h3 id="Data-Serialization"><a href="#Data-Serialization" class="headerlink" title="Data Serialization"></a>Data Serialization</h3><p>序列化在分布式计算程序中占有非常重要的地位。迟缓的序列化格式，或者消费一个超大的字节数据，都会大大的减缓计算速度。所以，第一件事应该先尝试优化Spark程序。Spark试图达到在易用性（允许你定义任何的Java类型）和性能两方面达到一种平衡，并且提供两种序列化库：</p><ul><li><p>Java序列化：缺省情况下，Spark使用Java的ObjectOutputStream框架序列化对象，<br>  从而可以和任何实现了java.io.Serializable接口的类一起玩耍。也可以更紧密的控制扩展了java.io.Externalizable的序列化的性能。Java的序列化是非常丰富的，但是速度奇慢，并且会导致很多类产生大量的序列化格式。</p></li><li><p>Kryo序列化：Spark也可以使用Kryo库（Version2）非常迅速的序列化对象。Kryo比Java序列化快很多并且更大的压缩率（通常是10x），但是并不支持所有的类型，另外也需要你在程序中注册类以获得最好的性能。</p></li></ul><p>你可以选择通过设置SparkConf或者调用conf.set(“spark.serializer”, “org.apache.spark.serializer.KryoSerializer”)来使用Kryo初始化Job。这样设置的话，不仅可以配置通过worker节点间shuffling数据，还能将RDD序列化到磁盘上。Kryo不是缺省配置的原因是由于自定义注册的要求决定的，同时我们也想在网络密集型应用中使用它。</p><p>Spark automatically includes Kryo serializers for the many commonly-used core Scala classes covered in the AllScalaRegistrar from the Twitter chill library.</p><p>使用Kryo注册自定义类，需要使用registerKryoClasses方法。</p>  <pre class="line-numbers language-none"><code class="language-none">val conf = new SparkConf().setMaster(...).setAppName(...)conf.registerKryoClasses(Array(classOf[MyClass1], classOf[MyClass2]))val sc = new SparkContext(conf)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Kryo文档描述了更多高级的注册选项，比如添加自定义序列代码。</p><p>如果你的对象非常大，则需要增加spark.kryoserializer.buffer配置参数。这个值缺省为2，但是这个值需要足够大足以保存序列号的对象。</p><p>最后，如果你没有注册自定义类，Kryo仍然会起作用，但是它不得不存储每个对象的全部类，这样是非常浪费的。</p><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><p>内存优化的方法有3个方面需要考虑的：你的对象使用的总内存量（你可能希望全部数据都放到内存里），对象存取成本，GC的开销（如果你有非常高的对象交换频率）</p><p>默认情况下，Java对象可以被快速的访问，但是会轻易的耗尽它们字段中比“raw”数据多2到5倍的空间的因子。这取决于多个因素：</p><ul><li>每个独立的Java对象包含一个“对象头”，16字节长度并包含诸如只想它的类的一些信息。<br>  对于一个非常小的数据来说（比如Int），这个可能比数据本身都要大一些。</li><li>Java字符串有大约40字节的对象头，比“raw”数据要多（因为它们按照字符串数组的形式保存，并且还包含扩展数据，比如说数据的长度），<br>  由于采用了UTF-16编码格式，所以在字符串内部，存储一个字符需要占用2个字节的空间。因此10个字符就可以轻易的消耗掉60字节空间。</li><li>普通的集合对象，比如说HashMap和LinkedList，使用的是链式数据结构，对于每个实体都存在一个“wrapper”对象（比如 Map.Entry）。这个对象不仅包含头，链表中还有指向下一个对象的指针（通常需要8个字节）。</li><li>私有类型的集合经常以“装箱”对象的形式存储，比如java.lang.Integer。</li></ul><p>这一章讨论的是如何确定对象的内存占用情况，和改进的方法－不止保护改变你的数据结构，另外还需要以一种序列号的形式存储数据。然后我们就可以覆盖到优化Spark缓存和Java GC的知识了。</p><h4 id="搞清楚内存消耗"><a href="#搞清楚内存消耗" class="headerlink" title="搞清楚内存消耗"></a>搞清楚内存消耗</h4><p>测试一个数据集消耗内存的总量最好的方式创建一个RDD，并放到缓冲中，通过web页面查看存储情况。这个页面的内容可以显示RDD到底占有了多少内存。</p><p>估算一个分区数据消耗的内存，可以使用SizeEstimator’s estimate的方法，这是一种非常有用的方式去试验不同的数据结构去减少内存的使用，即可以确定广播变量占用空间可以消耗每个可执行堆的情况。</p><h4 id="优化数据结构"><a href="#优化数据结构" class="headerlink" title="优化数据结构"></a>优化数据结构</h4><p>首选的降低内存消耗的方法是避免使用具有Java的特性导致的开销，比如基于指针的数据结构核包装类。有多种方式可以做到：</p><ul><li>设计你的数据结构以提升对象数组和原始类型，用来替换标准的Java或者Scala的集合类（比如：HashMap）。<br>  fastutil类库为原始类型提供了适当的集合类型，可以兼容Java的标准库。</li><li>尽量避免包含大量小对象核指针的嵌套数据结构。</li><li>考虑使用数字类型的ID或者枚举对象来替代字符串行的key。</li><li>如果你的RAM不足32GB，可以通过设置JVM的-XX:+UseCompressedOops参数，修改指针默认占用8字节为4个字节。也可以讲这些参数加到spaspark-env.sh中。</li></ul><h4 id="序列化的RDD存储"><a href="#序列化的RDD存储" class="headerlink" title="序列化的RDD存储"></a>序列化的RDD存储</h4><p>通过以上的优化，你的对象仍然很大从而影响到高效的存储的话，一种更加简单的减少内存使用的方法是通过RDD的持久化API序列化StorageLevels，从而使他们以序列化的方式存储，比如MEMORY_ONLY_SER。Spark这时就可以将每个RDD作为一个大字节数组分区存储。唯一的不足是，序列化存储的数据每次读取的时候会很慢，这个取决于每个对象的反序列化（on the fly）。我们强烈建议使用Kryo作为缓存序列化数据的方法，这样可以比Java序列化占用更少的空间（甚至是原始的Java对象）</p><h4 id="GC优化"><a href="#GC优化" class="headerlink" title="GC优化"></a>GC优化</h4><p>JVM 的GC可能会是一个问题，当你的程序在存储一个RDD方面存在一个很大的『churn』。（他不会是一个大问题，如果只是每次读取一个RDD，并多次操作）当Java需要逐渐的用新对象替换旧对象时，GC就会追踪你的所有Java对象，找到并替换掉。这里的重点指出的，GC的执行成本是与Java对象的个数成正比的，因此使用更少对象的数据结构可以大大降低GC的成本（比如一个Int类型的数组替换LinkedList的数组）。更好的方法是持久化被序列化之后的对象，如上述，在每个RDD分区里只会存在一个对象（一个字节数组）。在尝试其他技术之前，如果GC是一个问题，那么第一件事就是尝试序列化的缓存。</p><p>你的任务的占用的活动内存核缓存在你节点上的RDD之间的干扰也会导致GC出现问题（需要执行任务所需的内容总量）。我们将会讨论怎样控制分配给RDD缓存的空间以减少这种影响。</p><h5 id="衡量GC的影响"><a href="#衡量GC的影响" class="headerlink" title="衡量GC的影响"></a>衡量GC的影响</h5><p>GC优化的第一步需要先手机统计数据：GC发生的频率和发费的时间。这个可以通过添加设置java参数-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps实现。（详情见传递Java参数到Spark任务的指南）下一次你的Spark任务执行时，你就可以在每个worker的日志中看到关于GC事件的信息。注意，这些日志时存放到worker节点上的，并不是在driver 程序上。</p><h5 id="缓冲大小优化"><a href="#缓冲大小优化" class="headerlink" title="缓冲大小优化"></a>缓冲大小优化</h5><p>GC一个重要的配置参数是分配给缓存RDD使用的内存总量。缺省情况下，Spark会使用配置给executor memory (spark.executor.memory) 60%的内存量缓冲RDD。也就是说40%的内存是用于在任务执行过程中任何其它的对象。</p><p>当你的任务速度缓慢，并且发现JVM GC频率特别频繁或者出现内存溢出的问题时，降低这个值会对降低内存消耗提供帮助。修改这个值可以通过设置spark.storage.memoryFraction，比如修改成50%，则可以conf.set(“spark.storage.memoryFraction”, “0.5”)。结合使用序列化缓存，使用更少的缓存就可以充分的减轻大部分的GC问题。</p><h5 id="高级GC优化"><a href="#高级GC优化" class="headerlink" title="高级GC优化"></a>高级GC优化</h5><p>更进一步的GC优化，我们首先需要理解一些基本的JVM管理内存管理知识：</p><ul><li>Java堆空间被划分为两个部分Young 和 Old。Young generation用来保存短周期的对象，同时Old generation是用来保持长周期对象。</li><li>Young generation被进一步划分为3部分：Eden, Survivor1, Survivor2。</li><li>一个简单的关于垃圾回收程序的描述：当Eden满了的时候，a minor GC is run on Eden and objects that are alive from Eden and Survivor1 are copied to Survivor2。Survivor部分是可以交换的。如果一个对象已经旧了或者Survivor2满了，他就会被移动到旧的部分。最后，当旧的部分接近满的时候，一个满的GC就会被唤起。</li></ul><p>Spark中GC优化的目标是确保只有需要长久存在的RDD才会被存储在Old generation，Young generation有足够的空间处处短周期的对象。这就可以帮助避免full GCs在任务执行过程中收集临时任务。这里的一些步骤可能会比较有用：</p><ul><li>通过检查GC的状态检查是否存在多个垃圾回收。如果一个full GC在一个任务结束之前被多次唤醒，这就意味着没有足够的可用内存涌来执行任务。</li><li>In the GC stats that are printed，如果OldGen接近满的状态的话，就减少缓存的内存总量。这个可以通过设置spark.storage.memoryFraction property来达成。缓存更少的对象总比减慢任务执行速度要好的多！</li><li>如果存在很多的次要collections而不是很多的主要的GCs，给Eden分配更多的内存会有所帮助。你可以设置Eden稍微高些的内存给每个任务。如果Eden表示成E，那么可以通过设置Young generation的参数大小为-Xmn=4/3*E。（The scaling up by 4/3 is to account for space used by survivor regions as well.）</li><li>举个例子，如果你的任务正在从HDFS中读取数据，任务使用的内存被标记为数据的块大小。<br>  注意，解压后的数据块大约是之前数据的2～3倍。因此我们希望有3或者4个任务的工作空间，并且HDFS块的大小是64M，我们就可以估算出Eden大小大约是4<em>3</em>64MB。</li><li>通过修改新的设置来监测垃圾回收的频率和时间</li></ul><p>我的经验得出GC优化的改进取决于你的程序和可用的内存总量。在网上有很多优化选项的描述，但是再进一步，管理full GC的频率可以有助于降低顶层限制。</p><h3 id="其它需要考虑的事情"><a href="#其它需要考虑的事情" class="headerlink" title="其它需要考虑的事情"></a>其它需要考虑的事情</h3><h4 id="并行的水平"><a href="#并行的水平" class="headerlink" title="并行的水平"></a>并行的水平</h4><p>节点不会被充分利用，除非喂每个操作设置了足够高的并行水平。Spark会自动设置“map”任务的数量执行每个文件以和他的大小保持一致（尽管你可以通过SparkContext.textFile的可选参数控制），并且对于分布式的“reduce”操作，比如groupByKey 和 reduceByKey，会使用最大的父RDD的分区数。你可以传递并行的level作为第二个参数，活着设置spark.default.parallelism配置属性改变默认值。通常情况下，我们建议在节点上每个CPU内核执行2～3个任务。</p><h4 id="降低任务的内存使用"><a href="#降低任务的内存使用" class="headerlink" title="降低任务的内存使用"></a>降低任务的内存使用</h4><p>有时，你可能得到OutOfMemoryError错误，但是这并不是因为你的Rdd不适合你的内存，而是因为任务中的其中一个的设置，比如其中一个reduce任务执行groupByKey时太大。Spark的shuffle操作（sortByKey, groupByKey, reduceByKey, join等）会创建一个哈希表并且每个任务会执行grouping操作，这个通常情况下也会很大。此时最简单的解决办法是增加并行的水平，以降低任务的输入集大小。Spark可以高效的支持任务，因为它可以重复利用一个executor JVM，并且有很低的任务加载消耗，所以你可以安全的增加并发水平，甚至超过你节点上核心的数目。</p><h4 id="广播大变量"><a href="#广播大变量" class="headerlink" title="广播大变量"></a>广播大变量</h4><p>使用SparkContext上可用的广播功能可以明显的减少每个序列化任务的大小，和通过节点加载任务的消耗。如果你的任务使用来自driver程序的大的对象（比如：静态查找表），试着转化成一个广播变量。Spark打印出主节点上每个任务的序列化后的大小，从而你可以通过这个决定你的任务是否过大；通常的任务大于20KB就值得优化了。</p><h4 id="数据的位置"><a href="#数据的位置" class="headerlink" title="数据的位置"></a>数据的位置</h4><p>数据的位置可能是影响Spark作业的最主要的一个影响因素。如果数据和代码被放置在一起的话，计算速度会明显加快。但是如果代码和数据是分开的，不同的两块数据会被移动到一起。特别是，传输序列化的代码比数据块要快很多，这是因为代码的大小比数据小很多。Spark构建调度的主要原则就是由数据的位置决定的。</p><p>数据的位置到底距离操作他的代码多近的距离才合适呢？这里存在多个级别（自近及远）：</p><ul><li>PROCESS_LOCAL  数据和代码在同一个JVM中，这种方式是最好的一种情况</li><li>NODE_LOCAL 数据在同一个节点。比如说在HDFS的同一个节点，或者相同节点的不同executor。<br>  这种方式比PROCESS_LOCAL稍微慢些，因为这种情况下，数据需要在不同进程中传输</li><li>NO_PREF data is accessed equally quickly from anywhere and has no locality preference</li><li>RACK_LOCAL 数据在同一个服务器机架。数据在同一个机架的不同的服务器上的话，数据需要通过网络进行传输，typically through a single switch</li><li>ANY 数据分布在网络的各个地方，并且不在同一个机架</li></ul><p>Spark更倾向于调度最好的locality级别的所有任务，但是这并不是经常发生的。在这种情况下，不在处理数据的任何空闲executor，Spark都会选择更低的locality级别。这有两种选择：</p><ul><li>等待同一个服务器上的任务，直到对应的CPU闲下来才执行</li><li>立即执行一个新任务，并通过移动数据到更远的节点执行</li></ul><p>Spark通常会稍微等一下，以等待CPU执行完毕。一旦超时，他就会将远端的数据传递给空闲的CPU。不同级别的等待超时回退可以单独配置，或者在一个参数中集中修改；前往配置页查看spark.locality参数详情。如果你的任务are long and see poor locality，你也可以修改设置，但是缺省值是完全可以满足要求的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是一个简短的介绍，其中指出了你可能需要了解的优化Spark应用的最主要的要点，数据序列化和内存优化。对于大多数的程序来说，选择Kryo序列化，并且以序列化形式保存数据可以解决大部分一般的性能问题。Feel free to ask on the Spark mailing list about other tuning best practices.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python关键字:yield</title>
      <link href="/2016-01-02-Python-keyword-yield.html"/>
      <url>/2016-01-02-Python-keyword-yield.html</url>
      
        <content type="html"><![CDATA[<p>注：以下代码实验环境均为</p><pre class="line-numbers language-none"><code class="language-none">➜  ~  pythonPython 2.7.10 (default, Oct 23 2015, 18:05:06)[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwinType "help", "copyright", "credits" or "license" for more information.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="Yield关键字"><a href="#Yield关键字" class="headerlink" title="Yield关键字"></a>Yield关键字</h3><p>理解yield关键字之前需要先明白什么是迭代。</p><h4 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h4><p>建立一个列表之后，可以逐项的读取列表中的元素，这就是一个可迭代的对象：</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; list = [1, 2, 3, 4]&gt;&gt;&gt; for i in list:...     print i...1234&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用列表生成器建立一个列表，同样也是创建了一个可迭代的对象：</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; list = [x * 2 for x in range(3)]&gt;&gt;&gt; list[0, 2, 4]&gt;&gt;&gt; for i in list:...     print i...024&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用for .. in .. 的方式处理：链表，字符串等，这就叫做一个迭代器。但是这样会将数据存放到内存中，如果数据量过大的话，就非常不适合了。</p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p><a href="http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html">生成器是可以迭代的，但是你 只可以读取它一次 ，因为它并不把所有的值放在内存中，它是实时地生成数据</a></p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; g = (x * 2 for x in range(3))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x10978ca00&gt;&gt;&gt;&gt; for i in g:...     print i...024&gt;&gt;&gt; for i in g:...     print i...&gt;&gt;&gt;&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h4><p>yield 是一个类似return的关键字，但是这个函数返回的是生成器。</p><p>同时我们可以利用 isgeneratorfunction 判断一个特殊的 generator 函数</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; mg = createGenerator()&gt;&gt;&gt; print (mg)&lt;generator object createGenerator at 0x10978c9b0&gt;&gt;&gt;&gt; for i in mg:...     print i...024&gt;&gt;&gt; from inspect import isgeneratorfunction&gt;&gt;&gt; isgeneratorfunction(mg)False&gt;&gt;&gt; isgeneratorfunction(createGenerator)True&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：<em>当你调用这个函数的时候，函数内部的代码并不立马执行</em> ，而是返回一个生成器对象。只有当使用for进行迭代的时候，函数内的代码才会执行。</p><h4 id="控制资源访问"><a href="#控制资源访问" class="headerlink" title="控制资源访问"></a>控制资源访问</h4><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; class Bank():...     crisis = False...     def createAtm(self):...             while not self.crisis:...                     yield "$100"...&gt;&gt;&gt;&gt;&gt;&gt; bank = Bank()&gt;&gt;&gt; atm = bank.createAtm()&gt;&gt;&gt; print(atm.next())$100&gt;&gt;&gt; print(atm.next())$100&gt;&gt;&gt; print(atm.next())$100&gt;&gt;&gt; print(atm.next())$100&gt;&gt;&gt; atm.crisis = TrueTraceback (most recent call last):  File "&lt;stdin&gt;", line 1, in &lt;module&gt;AttributeError: 'generator' object has no attribute 'crisis'&gt;&gt;&gt; bank.crisis = True&gt;&gt;&gt; print (atm.next())Traceback (most recent call last):  File "&lt;stdin&gt;", line 1, in &lt;module&gt;StopIteration&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用yield的话，这个类执行createAtm之后就会导致系统资源耗尽（或者说是无限循环）</p><h4 id="使用yield可以是程序非常优美，虽然python程序本身就会很优美"><a href="#使用yield可以是程序非常优美，虽然python程序本身就会很优美" class="headerlink" title="使用yield可以是程序非常优美，虽然python程序本身就会很优美"></a>使用yield可以是程序非常优美，虽然python程序本身就会很优美</h4><h5 id="生成斐波那契（Fibonacci）数列"><a href="#生成斐波那契（Fibonacci）数列" class="headerlink" title="生成斐波那契（Fibonacci）数列"></a>生成斐波那契（Fibonacci）数列</h5><p>许多初学者都会这么写</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; def fab(max):...     n, a, b = 0, 0, 1...     while n &lt; max:...             print b...             a, b = b, a + b...             n = n + 1...&gt;&gt;&gt; fab(5)11235&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用yield改写一个版本</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; def fab(max):...     n, a, b = 0, 0, 1...     while n &lt; max:...             yield b...             a, b = b, a + b...             n = n + 1...&gt;&gt;&gt;&gt;&gt;&gt; for n in fab(5):...     print n...11235&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单描述下"><a href="#简单描述下" class="headerlink" title="简单描述下"></a>简单描述下</h4><p>for 语句在碰到生成器 generator 的时候，</p><p>调用</p><pre class="line-numbers language-none"><code class="language-none">generator.__next__()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取生成器的返回值。</p><pre class="line-numbers language-none"><code class="language-none">__next__()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以Fibonacci为例：for每次调用，可以理解为执行了一次generator() 执行到 yield 的时候，生成器返回了n的值并停止。<br>这就像普通函数碰到 return 时一样，剩下的代码都被忽略了。</p><p>不同的地方在于，python 会记录这个停止的位置。 当再次执行generator()的时候，python 从这个停止位置开始执行而不是开头， 也就是说这次返回了1。再执行generator()，则返回2，当执行到返回5的时候，已经没有 yield 语句了， 就抛出了 StopIteration 。这和其他迭代器是类似的，当然在for中是不会抛出异常的。</p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>在<a href="https://www.python.org/dev/peps/pep-0342/">PEP 342</a>中加入了将值传给生成器的支持。PEP 342加入了新的特性，能让生成器在单一语句中实现，生成一个值（像从前一样），接受一个值，或同时生成一个值并接受一个值。<br>我们用前面那个关于素数的函数来展示如何将一个值传给生成器。这一次，我们不再简单地生成比某个数大的素数，而是找出比某个数的等比级数大的最小素数（例如10， 我们要生成比10，100，1000，10000 … 大的最小素数）。</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import math&gt;&gt;&gt; def getPrimes(number):...     while True:...             if isPrime(number):&gt;&gt;&gt;                     '''...                     yield关键字返回number的值，...                     而other = yield foo "返回foo的值，...                     这个值返回给调用者的同时，将other的值也设置为那个值"。...                     可以通过send方法来将一个值”发送“给生成器。&gt;&gt;&gt;                     '''...                     number = yield number...             number += 1...&gt;&gt;&gt; def printSuccessivePrimes(iterations, base=10):...     printGenerator = getPrimes(base)&gt;&gt;&gt;     '''...     用send来“启动”一个生成器时（就是从生成器函数的第一行代码执行到第一个yield语句的位置），必须发送None。因为此时生成器还没有走到第一个yield语句，如果send一个真实的值，这时是没有人去“接收”它的。一旦生成器启动了，我们就可以像上面那样发送数据了&gt;&gt;&gt;     '''...     printGenerator.send(None)...     for power in range(iterations):&gt;&gt;&gt;             '''...             打印的是generator.send的结果，send在发送数据给生成器的同时还返回生成器通过yield生成的值&gt;&gt;&gt;             '''...             print(printGenerator.send(base ** power))...&gt;&gt;&gt; def isPrime(number):...     if number &gt; 1:...             if number == 2:...                     return True...             if number % 2 == 0:...                     return False...             for current in range(3, int(math.sqrt(number) + 1), 2):...                     if number % current == 0:...                             return False...             return True...     return False...&gt;&gt;&gt;&gt;&gt;&gt; printSuccessivePrimes(10)2111011009100071000031000003100000191000000071000000007&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python 使用yield的关键思想</p><ul><li>generator是用来产生一系列值的</li><li>yield则像是generator函数的返回结果</li><li>yield唯一所做的另一件事就是保存一个generator函数的状态</li><li>generator就是一个特殊类型的迭代器（iterator）</li><li>和迭代器相似，我们可以通过使用next()来从generator中获取下一个值</li><li>通过隐式地调用next()来忽略一些值</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html">http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html</a></li><li><a href="http://www.dabeaz.com/coroutines/index.html">http://www.dabeaz.com/coroutines/index.html</a></li><li><a href="https://docs.python.org/2/tutorial/classes.html">https://docs.python.org/2/tutorial/classes.html</a></li><li><a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</a></li><li><a href="http://www.pydanny.com/python-yields-are-fun.html">http://www.pydanny.com/python-yields-are-fun.html</a></li><li><a href="http://dhcmrlchtdj.github.io/sia/post/2012-11-20/python_yield.html">http://dhcmrlchtdj.github.io/sia/post/2012-11-20/python_yield.html</a></li><li><a href="http://www.oschina.net/translate/improve-your-python-yield-and-generators-explained">http://www.oschina.net/translate/improve-your-python-yield-and-generators-explained</a></li><li><a href="http://www.pythonclub.org/python-basic/yield">http://www.pythonclub.org/python-basic/yield</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/">https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/</a></li><li><a href="https://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">https://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/</a></li><li><a href="http://pythontips.com/2013/09/29/the-python-yield-keyword-explained/">http://pythontips.com/2013/09/29/the-python-yield-keyword-explained/</a></li><li><a href="http://blog.jobbole.com/28506/">http://blog.jobbole.com/28506/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yield </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oryx2 简介</title>
      <link href="/2015-12-21-Oryx2-Overview.html"/>
      <url>/2015-12-21-Oryx2-Overview.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>![Oryx2](/assets/images/posts/oryx/OryxLogoMedium.png)</p><p>Oryx2是专注于进行大规模，实时机器学习框架，遵循lambda规则，基于Apache Spark和Apache Kafka构建。</p><p>Oryx 不仅是构建应用程序的框架，而且包含 协同过滤，分类，回归和聚类的打包的端到端的应用。</p><span id="more"></span><p>包含3层</p><ul><li>lambda层<ul><li>批量处理</li><li>快速处理</li><li>服务</li></ul></li><li>ML抽象层</li><li>端到端实现层</li></ul><p>从另一个角度，可以看成是一系列链接的元素</p><ul><li>批处理层：依据历史数据进行离线处理</li><li>实时处理层：通过增量数据流，实时更新结果</li><li>服务层：通过模型的传递实现异步查询API</li><li>数据传输层：在外部数据源与处理层之间传输数据</li></ul><p>The project</p><ul><li>may be reused tier by tier for example, the packaged app tier can be ignored, and it can be a framework for building new ML applications.</li><li>It can be reused layer by layer too: for example, the Speed Layer can be omitted if a deployment does not need incremental updates.</li><li>It can be modified piece-by-piece too: the collaborative filtering application’s model-building batch layer could be swapped for a custom implementation based on a new algorithm outside Spark MLlib while retaining the serving and speed layer implementations.</li></ul><p>![Architecture](/assets/images/posts/oryx/Architecture.png)</p><h3 id="Lambda层实现"><a href="#Lambda层实现" class="headerlink" title="Lambda层实现"></a>Lambda层实现</h3><h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>  数据传输机制其实就是一个Kafka的Topic。任何一个进程（包含且不局限与服务层）都可以向topic中写入数据，并通过实时处理和批处理层查看。<br>  Kafka Topic也可以用来模型和模型之间的更新，并被实时处理层和服务层消费。</p><h4 id="批处理层"><a href="#批处理层" class="headerlink" title="批处理层"></a>批处理层</h4><p>  批处理层是以Spark Streaming进程的方式实现的，运行在Hadoop Cluster节点上，并读取来自Kafka topic的输入数据。 Streaming 进程会有一个很长的运行周期-若干小时甚至一天。会使用Spark存储当前会话数据到HDFS中，然后合并HDFS上的所有历史数据，之后重新初始化构建新的结果数据。并将新的结果重新写入HDFS，同时发不到Kafka更新topic中。</p><h4 id="实时处理层"><a href="#实时处理层" class="headerlink" title="实时处理层"></a>实时处理层</h4><p>  实时处理层也是由Spark Streaming进程实现的，同样读取Kafka topic输入数据。但是他存在比较短的运行周期，比如秒级别。会持续消费更新topic中的新模型，并生产新的模型。也会回写更新topic。</p><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>  服务层监听更新topic上的模型以及模型更新。在内存中持久化模型状态。<br>  会暴露顶层方法的 HTTP REST API 用于查询内存中的模型。大部分接口都支持大规模的部署。<br>  每个接口都可以接收新的数据并写入Kafka，以此在实时处理层和批处理层可见。</p><h4 id="配置和部署"><a href="#配置和部署" class="headerlink" title="配置和部署"></a>配置和部署</h4><p>  程序是基于Java实现的，依赖<br>    * Spark 1.3.x+<br>    * Hadoop 2.6.x+<br>    * Tomcat 8.x+<br>    * Kafka 0.8.2+<br>    * Zookeeper 等。</p><p>  配置文件通过 <a href="https://github.com/typesafehub/config">Typesafe Config</a> 的方式实现整个系统的部署配置。<br>  包括： 批处理，实时处理，服务层逻辑关键的接口类的实现</p><p>  每个层的二进制形式分开进行打包和部署的，每个都是以可执行的Java的jar包的形式存在并包含所有必须的服务。</p><h3 id="ML层实现"><a href="#ML层实现" class="headerlink" title="ML层实现"></a>ML层实现</h3><p>  ML层对上述通用接口方法做了简单的专一话的实现，实现了通用ML需求，并且对应用暴露了机器学习特有的接入接口。</p><p>  举个例子，实现了批量处理层，用于自动更新测试集和训练集进程。可以调用应用提供的函数来评估测试机模型。通过尝试不同的超参数值，选择出最佳结果。通过PMML管理模型的序列号。</p><h3 id="端到端应用实现"><a href="#端到端应用实现" class="headerlink" title="端到端应用实现"></a>端到端应用实现</h3><p>  除了作为一种框架，Oryx2 包含完整的三中机器学习需要的批处理层，实时处理层，服务层。<br>  开箱即用，或者作为自定义程序的基础：</p><pre><code>* 基于最小二乘法的协同过滤/推荐* 基于k-means的聚类* 基于随机决策森林的分类和回归</code></pre><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://oryx.io/index.html">http://oryx.io/index.html</a></li><li><a href="http://www.ivanopt.com/oryx-document%E7%BF%BB%E8%AF%91/">http://www.ivanopt.com/oryx-document%E7%BF%BB%E8%AF%91/</a></li><li><a href="http://jameskinley.tumblr.com/post/37398560534/the-lambda-architecture-principles-for">http://jameskinley.tumblr.com/post/37398560534/the-lambda-architecture-principles-for</a></li><li><a href="http://dmg.org/pmml/v4-1/GeneralStructure.html">http://dmg.org/pmml/v4-1/GeneralStructure.html</a></li><li><a href="http://blog.csdn.net/nxcjh321/article/details/24796879">http://blog.csdn.net/nxcjh321/article/details/24796879</a></li><li><a href="http://youngfor.me/post/recsys/oryx-tui-jian-xi-tong-chu-ti-yan">http://youngfor.me/post/recsys/oryx-tui-jian-xi-tong-chu-ti-yan</a></li><li><a href="https://github.com/OryxProject/oryx">https://github.com/OryxProject/oryx</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oryx2 管理员文档</title>
      <link href="/2015-12-21-Oryx2-Admin-Docs.html"/>
      <url>/2015-12-21-Oryx2-Admin-Docs.html</url>
      
        <content type="html"><![CDATA[<h3 id="Oryx-2-1-0-系统要求"><a href="#Oryx-2-1-0-系统要求" class="headerlink" title="Oryx 2.1.0 系统要求"></a>Oryx 2.1.0 系统要求</h3><ul><li>Java 7 or later (JRE only is required)</li><li>A Hadoop cluster running the following components:<ul><li>Apache Hadoop 2.6.0 or later</li><li>Apache Zookeeper 3.4.5 or later</li><li>Apache Kafka 0.8.2 or later (in 0.8.x line)</li><li>Apache Spark 1.5.0 or later</li></ul></li></ul><span id="more"></span><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>Hadoop cluster 服务</p><ul><li>HDFS</li><li>YARN</li><li>Zookeeper</li><li>Kafka</li><li>Spark (on YARN)</li></ul><p>Note that for CDH, Kafka is available as a parcel from <a href="http://www.cloudera.com/content/cloudera/en/developers/home/cloudera-labs/apache-kafka.html">Cloudera Labs</a>.</p><p>Kafka brokers 需要配置在集群中，根据实例，需要注意hosts和端口。端口一般会设置为9092，此处和ZK server的端口保持一致，缺省设置为2181。缺省端口会在随后的例子中使用。</p><p>多个hosts需要通过逗号分割，并需要提供host:port 这种方式，比如 ： your-zk-1:2181,your-zk-2:2181。</p><p>同时需要注意，你的ZK实例是否使用了chroot path。这是一个简单的路径前缀，比如 your-zk:2181/your-chroot<br>/kafka 是经常用到作为前缀的。如果没有使用chroot，就可以忽略这个。注意：如果存在多个ZK server，和一个chroot，只需要在最后添加一次chroot即可，比如 your-zk-1:2181,your-zk-2:2181/kafka</p><h3 id="配置Kafka"><a href="#配置Kafka" class="headerlink" title="配置Kafka"></a>配置Kafka</h3><p>Oryx 使用2个Kafka topics 做数据传输。</p><ul><li>一个传输输入数据到批量处理，和实时计算层</li><li>另一个同步模型更新到服务层</li></ul><p>缺省的topics的名称分别为OryxInput 和 OryxUpdate，只有Oryx服务启动后才能创建这两个topics。</p><p>输入topic的分区数目会影响消费数据的Spark Streaming 作业的分区数，甚至是并发数。比如，批量处理层读取HDFS上的历史数据分区和Kafka数据。</p><p>如果输入topic只有一个分区，且在每个时间间隔内有大量的数据涌入，这时Kafka基于的输入分区相对的需要很长的时间去处理。一个比较合适的经验值是选择一些topic分区，在一个批处理时间间隔内到达的大量数据，大约是一个HDFS块大小，缺省值是128MB。</p><p>提供的oryx-run.sh kafka设置脚本，缺省设置为4个分区，当然了，这个值之后是可以修改的。必须注意不能设置更新topic多于1个分区。</p><p>重复因子可以设置为任何值，但是建议最少是2。注意：重复因子数目不能超过Kafka brokers在集群上的数目。所以提供的设置脚本里缺省设置重复因子为1. 之后你可以通过kafka-topics –zookeeper … –alter –topic … –replication-factor N 等修改这些缺省值。</p><p>你需要为其中一个或者两个topic配置持续时间。尤其重要的是需要限制更新topic的持续时间，因为实时计算层和服务层需要从启动开始的起点获取整个topic。这个机制并不如输入数据重要，输入数据不会再次从头读取数据。</p><p>设置这个值为批量处理层更新间隔的2倍是比较合适。比如设置该值为1天（24 * 60 * 60 * 1000 = 86400000 ms），设置topic的为86400000ms。这个可以通过oryx-run.sh设置脚本自动设置。</p><p>上述两个topics会包含大量信息；尤其是更新topic包含整个序列化的PMML模型。很有可能他会超过Kafka缺省最大消息的大小（kafka消息最大1Mib）。如果有更大的数据则需要设置topic’s max.message.bytes。oryx-run.sh Kafka设置脚本设置更新topic缺省为16Mib。这也是Oryx试图吸入更新topic里的模型的最大值默认；更大的模型只会以文件的形式保存到HDFS中的路径中。请查看属性oryx.update-topic.message.max-size。</p><p>Kafka代理的message.max.bytes属性可以控制这个，但是设置这个值会影响到代理管理的所有的topics，甚至包括不良状态的topics。可以通过查看性能和资源部分了解更多。尤其是需要注意的，必须设置代理的replica.fetch.max.bytes属性，以防止重复任何非常大的消息。</p><blockquote><p>There is no per-topic equivalent to this.</p></blockquote><h3 id="Kafka配置自动设置"><a href="#Kafka配置自动设置" class="headerlink" title="Kafka配置自动设置"></a>Kafka配置自动设置</h3><p>提供的oryx-run.sh脚本可以打印ZK的当前配置，列出已经存在的Kafka中的topics，如果需要，会创建配置好的输入topics和更新topics。</p><p>你需要先创建Oryx配置文件，或者可以拷贝conf/als-example.conf。需要按照要求修改Kafka和ZK的配置文件，比如topic名称。</p><p>oryx.conf文件需要和每个层的JAR文件放在同一个目录下，然后执行：</p><pre class="line-numbers language-none"><code class="language-none">./oryx-run.sh kafka-setupInput  ZK:    your-zk:2181Input  Kafka: your-kafka:9092Input  topic: OryxInputUpdate ZK:    your-zk:2181Update Kafka: your-kafka:9092Update topic: OryxUpdateAll available topics:Input topic OryxInput does not exist. Create it? yCreating topic OryxInputCreated topic "OryxInput".Status of topic OryxInput:Topic:OryxInputPartitionCount:4ReplicationFactor:1Configs:Topic: OryxInputPartition: 0Leader: 120Replicas: 120,121Isr: 120,121Topic: OryxInputPartition: 1Leader: 121Replicas: 121,120Isr: 121,120Topic: OryxInputPartition: 2Leader: 120Replicas: 120,121Isr: 120,121Topic: OryxInputPartition: 3Leader: 121Replicas: 121,120Isr: 121,120Update topic OryxUpdate does not exist. Create it? yCreating topic OryxUpdateCreated topic "OryxUpdate".Updated config for topic "OryxUpdate".Status of topic OryxUpdate:Topic:OryxUpdatePartitionCount:1ReplicationFactor:1Configs:retention.ms=86400000,max.message.bytes=16777216Topic: OryxUpdatePartition: 0Leader: 120Replicas: 120,121Isr: 120,121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看发送到输入和更新topic，监控应用的动作，可以执行：</p><pre class="line-numbers language-none"><code class="language-none">./oryx-run.sh kafka-tailInput  ZK:    your-zk:2181Input  Kafka: your-kafka:9092Input  topic: OryxInputUpdate ZK:    your-zk:2181Update Kafka: your-kafka:9092Update topic: OryxUpdate...output...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在另外一个窗口，可以接受输入数据，比如将来自终端用户的文档data.csv加入到输入队列，并验证：</p><pre class="line-numbers language-none"><code class="language-none">./oryx-run.sh kafka-input --input-file data.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果以上全部成功了，可以关闭这些进程。集群至此已经准备好运行Oryx了。</p><h3 id="HDFS和数据层"><a href="#HDFS和数据层" class="headerlink" title="HDFS和数据层"></a>HDFS和数据层</h3><p>在Oryx中，Kafka是数据传输的途径，因此数据在Kafka中只是需要暂时存放的。然而输入数据也会持久化到HDFS中以备之后使用。同样的，模型和更新用来为Kafka的更新topic提供数据，模型也会持久化到HDFS以备之后引用。</p><p>oryx.batch.storage.data-dir定义了输入数据存放在HDFS中的位置。在这个目录下，子目录标题会以oryx-[timestamp].data形式创建，每一个会通过Spark Straming在批量处理层执行。在这里，时间戳格式格式与Unix相同，且以毫秒为单位。</p><p>实际上，和大多数Hadoop中分布式进程输出的『文件』一样，存在这样的一个子目录，包含了很多以part-开头的文件。每个文件都是序列化文件，通过Writable类序列化Kafka输入topics的键值，Writable类实现自oryx.batch.storage.key-writable-class 和 oryx.batch.storage.message-writable-class类。默认情况下，这是TextWritable，并且keys和消息是以字符串形式被记录下来的。</p><p>该目录下的数据会被删除。也就不会再次被批处理层计算使用。尤其是，设置oryx.batch.storage.max-age-data-hours为一个非负数，将会使批处理层自动删除大于给定时间的数据。</p><p>同样的，在每个批处理间隔内被批处理层选中的模型会被原始的机器学习应用（扩展子MLUpdate）输出。也会被持久化到oryx.batch.storage.model-dir定义的目录下的子目录中。在这个目录下，子目录的命名都是以时间戳形式实现的，同Unix毫秒形式。</p><p>子目录下的内容取决于应用，但是一般会包含以model.pmml命名的PMML模块，并且和模块一起存在的可选的追加文件。</p><p>这个目录之所以存在是因为需要记录PMML模块用来归档用或者被其他工具使用。也可按照规则删除其内容。</p><h3 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h3><p>最后，你可能希望停止其中一个或者几个层的运行，或者重启。服务也可能挂鸟。这到底发生了神马？为啥会这样捏？</p><h4 id="数据丢失"><a href="#数据丢失" class="headerlink" title="数据丢失"></a>数据丢失</h4><p>历史数据存放在HDFS中，理论上会存放多个副本。HDFS会确保数据被靠谱的存放着。当设置了副本，Kafka也被设计为采用副本方式应对故障。</p><p>这并没有啥鸟用，这样不能确保数据不会丢失，只能依靠HDFS和Kafka能正常可用罢了。</p><h4 id="服务器挂鸟"><a href="#服务器挂鸟" class="headerlink" title="服务器挂鸟"></a>服务器挂鸟</h4><p>通常情况下，所有的三层服务进程应该会持续的工作，如果不得不停止或者挂鸟的话，服务自己会立即重启。这个可以通过初始化脚本完美的完成或者类似机制（尚未实现鸟）</p><h5 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h5><p>服务层是无状态的。启动后，他会读取更新topics中的所有的模型和可用更新。当首个可用的模型就绪后，就可以开始应答请求。基于这个原因，需要适当的限制更新topic的持续时间。</p><p>服务层的操作不是分布式的，每个实例是独立的，启动和停止不会影响到其他部分。</p><h5 id="实时计算层"><a href="#实时计算层" class="headerlink" title="实时计算层"></a>实时计算层</h5><p>实时计算层同样也不存在状态，也会在读取全部的模型和更新topic的更新。只要存在合法的模型，就可以生成更新。同时，从最后一次偏移位置开始读取输入topics。</p><p>实时计算层使用Spark和Spark Streaming 做计算。Spark会响应计算过程中失败情况，并重试任务。</p><p>Spark Streaming的Kafka集成模块在某些情况下可以恢复接收的故障。<br>如果是整个进程死掉并被重新启动，oryx.id的值被设定以后，系统会自动从上一次Kafka记录的偏移地址开始读取。（否则，将会从上次偏移地址开始，这就意味着实时计算层没有运行的时候，到达的数据就不会生成任何更新。），同样的，如果实时计算层的模型还没有准备好的话，收到的数据也会被忽略。It effectively adopts “at most once” semantics.</p><p>由于实时计算层的作用是为最后发布的模型提供approximate, “best effort”的更新。这种行为由于其间接性一般是没有问题，且令人满意的。</p><h5 id="批处理层"><a href="#批处理层" class="headerlink" title="批处理层"></a>批处理层</h5><p>批处理层是最复杂的，因为他并生成某些状态：</p><ul><li>历史数据，总是持久化到HDFS</li><li>如果应用选择的话，模型的扩展状态和topics都可以被持久化到HDFS上</li></ul><p>对于多次或者根本不读取数据是非常敏感的，因为他本来就是生产官方下一代模型的组件</p><p>与实时计算层一起，Spark和Spark Streaming在计算过程中可以捕获很多错误情况。也可以管理存储到HDFS中的数据，负责避免两次写入相同数据。</p><p>应用负责回复各自的「状态」，一般情况下，建立在Oryx ML层的应用会将状态写入唯一的子目录中，并且重启后会在新的目录简单的产生一个新状态。前一个状态如果存在的话，也会被完整写入或者被完全忽视。</p><p>批处理层也和实时计算层一样，符合『至多一次』的规则。综上，如果整个进程死掉或者被重启，oryx.id被设置的话，则会从Kafka记录的最后一次偏移重新读取，否则会在最后一次偏移处重新读取数据。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flume-ng Structure</title>
      <link href="/2015-12-10-apache-flume-ng-structure.html"/>
      <url>/2015-12-10-apache-flume-ng-structure.html</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-flume-NG-配置"><a href="#Apache-flume-NG-配置" class="headerlink" title="Apache-flume NG 配置"></a>Apache-flume NG 配置</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  Flume NG是一个分布式、可靠、可用的系统，它能够将不同数据源的海量日志数据进行高效收集、聚合、移动，最后存储到一个中心化数据存储系统中。</p><p>  由原来的Flume OG到现在的Flume NG，进行了架构重构，并且现在NG版本完全不兼容原来的OG版本。</p><p>  经过架构重构后，Flume NG更像是一个轻量的小工具，非常简单，容易适应各种方式日志收集，并支持failover和负载均衡。</p><span id="more"></span><h3 id="架构设计要点"><a href="#架构设计要点" class="headerlink" title="架构设计要点"></a>架构设计要点</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul><li>Event：一个数据单元，带有一个可选的消息头</li><li>Flow：Event从源点到达目的点的迁移的抽象</li><li>Client：操作位于源点处的Event，将其发送到Flume Agent</li><li>Agent：一个独立的Flume进程，包含组件Source、Channel、Sink</li><li>Source：用来消费传递到该组件的Event</li><li>Channel：中转Event的一个临时存储，保存有Source组件传递过来的Event</li><li>Sink：从Channel中读取并移除Event，将Event传递到Flow Pipeline中的下一个Agent（如果有的话）</li></ul><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p>![flume-ng总体结构图](/assets/images/posts/flume-ng/flume-ng-architecture.png)</p><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><p>外部系统产生日志，直接通过Flume的Agent的Source组件将事件（如日志行）发送到中间临时的channel组件，最后传递给Sink组件，HDFS Sink组件可以直接把数据存储到HDFS集群上。</p><h4 id="单Agent"><a href="#单Agent" class="headerlink" title="单Agent"></a>单Agent</h4><p>  一个最基本Flow的配置，格式如下：</p>  <pre class="line-numbers language-none"><code class="language-none"># list the sources, sinks and channels for the agent&lt;Agent&gt;.sources = &lt;Source1&gt; &lt;Source2&gt;&lt;Agent&gt;.sinks = &lt;Sink1&gt; &lt;Sink2&gt;&lt;Agent&gt;.channels = &lt;Channel1&gt; &lt;Channel2&gt;# set channel for source&lt;Agent&gt;.sources.&lt;Source1&gt;.channels = &lt;Channel1&gt; &lt;Channel2&gt; ...&lt;Agent&gt;.sources.&lt;Source2&gt;.channels = &lt;Channel1&gt; &lt;Channel2&gt; ...# set channel for sink&lt;Agent&gt;.sinks.&lt;Sink1&gt;.channel = &lt;Channel1&gt;&lt;Agent&gt;.sinks.&lt;Sink2&gt;.channel = &lt;Channel2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  尖括号里面的，我们可以根据实际需求或业务来修改名称。</p><p>  下面详细说明：</p><ul><li><agent> 表示配置一个Agent的名称，一个Agent肯定有一个名称。</agent></li><li><source1>和<source2>是Agent的Source组件的名称，消费传递过来的Event。</source2></source1></li><li><channel1>和<channel2>是Agent的Channel组件的名称。</channel2></channel1></li><li><sink1>与<sink2>是Agent的Sink组件的名称，从Channel中消费（移除）Event。</sink2></sink1></li></ul><p>  上面配置内容中</p><ul><li>第一组中配置Source、Sink、Channel，它们的值可以有1个或者多个；</li><li>第二组中配置Source将把数据存储（Put）到哪一个Channel中，可以存储到1个或多个Channel中，<br>同一个Source将数据存储到多个Channel中，实际上是Replication；</li><li>第三组中配置Sink从哪一个Channel中取（Task）数据，一个Sink只能从一个Channel中取数据。</li></ul><h4 id="多个Agent顺序连接"><a href="#多个Agent顺序连接" class="headerlink" title="多个Agent顺序连接"></a>多个Agent顺序连接</h4><p>![flume-ng 多个Agent顺序连接](/assets/images/posts/flume-ng/flume-multiseq-agents.png)</p><p>  可以将多个Agent顺序连接起来，将最初的数据源经过收集，存储到最终的存储系统中。这是最简单的情况，一般情况下，应该控制这种顺序连接的Agent的数量，因为数据流经的路径变长了，如果不考虑failover的话，出现故障将影响整个Flow上的Agent收集服务。</p><h4 id="多个Agent的数据汇聚到同一个Agent"><a href="#多个Agent的数据汇聚到同一个Agent" class="headerlink" title="多个Agent的数据汇聚到同一个Agent"></a>多个Agent的数据汇聚到同一个Agent</h4><p>![flume-ng 多个Agent的数据汇聚到同一个Agent](/assets/images/posts/flume-ng/flume-join-agent.png)</p><p>  这种情况应用的场景比较多，比如要收集Web网站的用户行为日志，Web网站为了可用性使用的负载均衡的集群模式，每个节点都产生用户行为日志，可以为每个节点都配置一个Agent来单独收集日志数据，然后多个Agent将数据最终汇聚到一个用来存储数据存储系统，如HDFS上。</p><h4 id="多路（Multiplexing）Agent"><a href="#多路（Multiplexing）Agent" class="headerlink" title="多路（Multiplexing）Agent"></a>多路（Multiplexing）Agent</h4><p>![flume-ng 多路（Multiplexing）Agent](/assets/images/posts/flume-ng/flume-multiplexing-agent.png)</p><p>  这种模式，有两种方式</p><ul><li><p>一种是用来复制（Replication）</p><ul><li><p>Replication方式，可以将最前端的数据源复制多份，分别传递到多个channel中，每个channel接收到的数据都是相同的，配置格式</p><pre class="line-numbers language-none"><code class="language-none"># List the sources, sinks and channels for the agent&lt;Agent&gt;.sources = &lt;Source1&gt;&lt;Agent&gt;.sinks = &lt;Sink1&gt; &lt;Sink2&gt;&lt;Agent&gt;.channels = &lt;Channel1&gt; &lt;Channel2&gt;# set list of channels for source (separated by space)&lt;Agent&gt;.sources.&lt;Source1&gt;.channels = &lt;Channel1&gt; &lt;Channel2&gt;# set channel for sinks&lt;Agent&gt;.sinks.&lt;Sink1&gt;.channel = &lt;Channel1&gt;&lt;Agent&gt;.sinks.&lt;Sink2&gt;.channel = &lt;Channel2&gt;&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.type = replicating<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的Replication方式，Source1会将数据分别存储到Channel1和Channel2，这两个channel里面存储的数据是相同的，然后数据被传递到Sink1和Sink2。</p></li></ul></li><li><p>另一种是用来分流（Multiplexing）</p><ul><li><p>Multiplexing方式，selector可以根据header的值来确定数据传递到哪一个channel</p><pre class="line-numbers language-none"><code class="language-none"># Mapping for multiplexing selector&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.type = multiplexing&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.header = &lt;someHeader&gt;&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value1&gt; = &lt;Channel1&gt;&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value2&gt; = &lt;Channel1&gt; &lt;Channel2&gt;&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value3&gt; = &lt;Channel2&gt;#...&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.default = &lt;Channel2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面selector的type的值为multiplexing，同时配置selector的header信息，还配置了多个selector的mapping的值，即header的值：如果header的值为Value1、Value2，数据从Source1路由到Channel1；如果header的值为Value2、Value3，数据从Source1路由到Channel2。</p></li></ul></li></ul><h4 id="实现load-balance功能"><a href="#实现load-balance功能" class="headerlink" title="实现load balance功能"></a>实现load balance功能</h4><p>![实现load balance功能](/assets/images/posts/flume-ng/flume-load-balance-agents.png)</p><p>  Load balancing Sink Processor能够实现load balance功能，上图Agent1是一个路由节点，<br>  负责将Channel暂存的Event均衡到对应的多个Sink组件上，而每个Sink组件分别连接到一个独立的Agent上</p>  <pre class="line-numbers language-none"><code class="language-none">a1.sinkgroups = g1a1.sinkgroups.g1.sinks = k1 k2 k3a1.sinkgroups.g1.processor.type = load_balancea1.sinkgroups.g1.processor.backoff = truea1.sinkgroups.g1.processor.selector = round_robina1.sinkgroups.g1.processor.selector.maxTimeOut=10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现failover能"><a href="#实现failover能" class="headerlink" title="实现failover能"></a>实现failover能</h4><p>  Failover Sink Processor能够实现failover功能，具体流程类似load balance，<br>  但是内部处理机制与load balance完全不同：Failover Sink Processor维护一个优先级Sink组件列表，只要有一个Sink组件可用，<br>  Event就被传递到下一个组件。如果一个Sink能够成功处理Event，则会加入到一个Pool中，否则会被移出Pool并计算失败次数，设置一个惩罚因子</p>  <pre class="line-numbers language-none"><code class="language-none">a1.sinkgroups = g1a1.sinkgroups.g1.sinks = k1 k2 k3a1.sinkgroups.g1.processor.type = failovera1.sinkgroups.g1.processor.priority.k1 = 5a1.sinkgroups.g1.processor.priority.k2 = 7a1.sinkgroups.g1.processor.priority.k3 = 6a1.sinkgroups.g1.processor.maxpenalty = 20000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><pre class="line-numbers language-none"><code class="language-none"># 下载二进制包[mofun_mining@i-tev02vc1 ~]$ wget "http://apache.arvixe.com/flume/1.6.0/apache-flume-1.6.0-bin.tar.gz"[mofun_mining@i-tev02vc1 ~]$ tar xvzf apache-flume-1.6.0-bin.tar.gz[mofun_mining@i-tev02vc1 ~]$ mv apache-flume-1.6.0-bin /usr/local/# 修改配置文件[mofun_mining@i-qe32ajmq conf]$ pwd/usr/local/apache-flume-1.6.0-bin/conf[mofun_mining@i-qe32ajmq conf]$ sudo cp flume-conf.properties.template flume-conf.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>采用 Avro Source+Memory Channel+HDFS Sink 方式</p><ul><li>服务器（日志汇总服务器agent）端配置文件</li></ul>  <pre class="line-numbers language-none"><code class="language-none">[mofun_mining@i-tev02vc1 ~]$ cd /usr/local/apache-flume-1.6.0-bin/conf/[mofun_mining@i-tev02vc1 conf]$ lsflume-conf.properties  flume-conf.properties.template  flume-env.ps1.template  flume-env.sh  flume-env.sh.template  log4j.properties[mofun_mining@i-tev02vc1 conf]$ pwd/usr/local/apache-flume-1.6.0-bin/conf[mofun_mining@i-tev02vc1 conf]$ sudo vim flume-conf.properties# example.conf: A single-node Flume configuration# Name the components on this agentagent1.sources = r1agent1.sinks = k1agent1.channels = c1# Describe/configure the sourceagent1.sources.r1.type = avroagent1.sources.r1.bind = 192.168.1.33agent1.sources.r1.port = 41414agent1.sources.r1.channels = c1# Describe the sinkagent1.sinks.k1.type = hdfsagent1.sinks.k1.channel = c1agent1.sinks.k1.hdfs.fileType = DataStreamagent1.sinks.k1.hdfs.useLocalTimeStamp = trueagent1.sinks.k1.hdfs.path = /flume/events/%Y-%m-%d#agent1.sinks.k1.hdfs.round = true#agent1.sinks.k1.hdfs.roundValue = 10#agent1.sinks.k1.hdfs.roundUnit = minuteagent1.sinks.k1.hdfs.rollCount = 5000agent1.sinks.k1.hdfs.rollSize = 0agent1.sinks.k1.hdfs.rollInterval= 0# Use a channel which buffers events in memoryagent1.channels.c1.type = memoryagent1.channels.c1.capacity = 10000agent1.channels.c1.transactionCapacity = 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端（日志收集agent）</li></ul>  <pre class="line-numbers language-none"><code class="language-none">[reason@i-qunray9x conf]$ cd /usr/local/apache-flume-1.6.0-bin/conf/[reason@i-qunray9x conf]$ pwd/usr/local/apache-flume-1.6.0-bin/conf[reason@i-qunray9x conf]$ sudo vim flume-conf.properties# example.conf: A single-node Flume configuration# Name the components on this agentagent1.sources = r1agent1.sinks = k1agent1.channels = c1# Describe/configure the sourceagent1.sources.r1.type = execagent1.sources.r1.command = tail -n 0 -F /home/reason/1.txtagent1.sources.r1.channels = c1# Describe the sinkagent1.sinks.k1.type = avroagent1.sinks.k1.channel = c1agent1.sinks.k1.hdfs.useLocalTimeStamp = trueagent1.sinks.k1.hdfs.path = /flume/events/%Y-%m-%dagent1.sinks.k1.hostname=192.168.1.33agent1.sinks.k1.port = 41414# Use a channel which buffers events in memoryagent1.channels.c1.type = memoryagent1.channels.c1.capacity = 5000agent1.channels.c1.transactionCapacity = 500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动服务器</li></ul>  <pre class="line-numbers language-none"><code class="language-none">[mofun_mining@i-tev02vc1 conf]$/usr/local/apache-flume-1.6.0-bin/bin/flume-ng agent -c ./conf/ -f /usr/local/apache-flume-1.6.0-bin/conf/flume-conf.properties -n agent1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动客户端</li></ul>  <pre class="line-numbers language-none"><code class="language-none">[reason@i-qunray9x conf]$/usr/local/apache-flume-1.6.0-bin/bin/flume-ng agent -c conf -f /usr/local/apache-flume-1.6.0-bin/conf/flume-conf.properties -n agent1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>测试</li></ul>  <pre class="line-numbers language-none"><code class="language-none">[mofun_mining@i-r6cuv8iq ~]$ hdfs dfs -ls /flume/events/2015-12-15Found 40 items-rw-r--r--   2 mofun_mining supergroup      34844 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340281-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340282-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340283-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340284-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340285-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340286-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340287-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340288-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39 /flume/events/2015-12-15/FlumeData.1450172340289-rw-r--r--   2 mofun_mining supergroup      34850 2015-12-15 17:39...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  此时，通过nginx实时产生的日志，即可实时插入到hdfs中了。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://shiyanjun.cn/archives/915.html">http://shiyanjun.cn/archives/915.html</a></li><li><a href="http://my.oschina.net/leejun2005/blog/288136">http://my.oschina.net/leejun2005/blog/288136</a></li><li><a href="http://tech.meituan.com/mt-log-system-optimization.html">http://tech.meituan.com/mt-log-system-optimization.html</a></li><li><a href="http://www.ixirong.com/2015/05/18/how-to-install-flume-ng/">http://www.ixirong.com/2015/05/18/how-to-install-flume-ng/</a></li><li><a href="https://flume.apache.org/FlumeUserGuide.html#setting-up-an-agent">https://flume.apache.org/FlumeUserGuide.html#setting-up-an-agent</a></li><li><a href="http://m.blog.csdn.net/blog/xueliang1029/24039459">http://m.blog.csdn.net/blog/xueliang1029/24039459</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Kafka Structure</title>
      <link href="/2015-12-08-apache-kafka-structure.html"/>
      <url>/2015-12-08-apache-kafka-structure.html</url>
      
        <content type="html"><![CDATA[<h4 id="Apache-Kafka消息服务"><a href="#Apache-Kafka消息服务" class="headerlink" title="Apache Kafka消息服务"></a>Apache Kafka消息服务</h4><ul><li>参考地址 <a href="http://kafka.apache.org/documentation.html#brokerconfigs">http://kafka.apache.org/documentation.html</a></li></ul><span id="more"></span><ul><li><p>消息队列的分类</p><ul><li><p>点对点</p><p>生产者生产消息发送到Queue中，消费者消费Queue中的消息，其中：</p><ul><li>Queue中不再存储已经被消费的消息</li><li>Queue支持多个消费者，但是同一个消息，只能被一个消费者消费</li></ul></li><li><p>发布/订阅</p><p>生产者（生产）将消息发布到topic中，同时多个消费者（消费）订阅该消息。和点对点方式不同的是，发布到topic的消息会被所有订阅者消费</p></li></ul></li><li><p>简介</p><p>背景 Kafka使用Scala语言编写，是一个分布式，分区的，支持多副本，多订阅者的日志系统。</p><p>目前支持Java，Python，C++， PHP等</p><ul><li>总体结构</li></ul></li></ul><p>![kafka总体结构图](/assets/images/posts/kafka.0.9.0/structure.png)</p><ul><li><p>名词解释</p><ul><li><p>Producer</p><p>  消息生产者，就是向kafka broker发消息的客户端</p></li><li><p>Consumer</p><p>  消息消费者，向kafka broker取消息的客户端</p></li><li><p>Topic</p><p>  是一个消息队列？</p></li><li><p>Consumer Group （CG）</p><ul><li><p>这是Kafka用来实现一个Topic消息的广播（发给所有的Consumer）和单播（发给任意一个Consumer）的手段</p></li><li><p>一个Topic可以有多个CG</p></li><li><p>Topic的消息会复制（不是真的复制，是概念上的）到所有的CG，但每个CG只会把消息发给该CG中的一个consumer</p></li><li><p>如果需要实现广播，只要每个Consumer有一个独立的CG就可以了</p></li><li><p>要实现单播只要所有的Consumer在同一个CG</p></li><li><p>用CG还可以将Consumer进行自由的分组而不需要多次发送消息到不同的topic</p></li><li><p>Broker</p><ul><li>一台Kafka服务器就是一个Broker</li><li>一个集群由多个Broker组成。一个Broker可以容纳多个Topic</li></ul></li><li><p>Partition</p><p>为了实现扩展性，一个非常大的Topic可以分布到多个Broker（即服务器）上，一个Topic可以分为多个Partition，每个Partition是一个有序的队列。Prtition中的每条消息都会被分配一个有序的id（Offset）。Kafka只保证按一个Partition中的顺序将消息发给Consumer，不保证一个Topic的整体（多个Partition间）的顺序。</p></li><li><p>Offset</p><ul><li>kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找</li><li>例如你想找位于2049的位置，只要找到2048.kafka的文件即可，当然the first offset就是00000000000.kafka</li></ul></li></ul></li></ul></li><li><p>特性</p><ul><li>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能</li><li>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数十万的消息</li><li>支持 <em>同步</em> 和 <em>异步</em> 复制两种HA</li><li>Consumer客户端<ul><li>pull</li><li>随机读</li><li>利用sendfile系统调用</li><li>zero-copy</li><li>批量拉数据</li></ul></li><li>消费状态保存在客户端</li><li>消息存储顺序写</li><li>数据迁移、扩容对用户透明</li><li>支持Hadoop并行数据加载</li><li>支持online和offline的场景</li><li>持久化：通过将数据持久化到硬盘以及replication防止数据丢失</li><li>scale out：无需停机即可扩展机器</li><li>定期删除机制，支持设定partitions的segment file保留时间</li></ul></li><li><p>可靠性（一致性)</p><p>传统的MQ系统通常都是通过broker和consumer间的确认（ack）机制实现的，并在broker保存消息分发的状态，即使这样一致性也是很难保证的。</p><p>Kafka的做法是由consumer自己保存状态，也不要任何确认。这样虽然consumer负担更重，但其实更灵活了。因为不管consumer上任何原因导致需要重新处理消息，都可以再次从broker获得。</p></li><li><p>可扩展性</p><p>Kafka 使用Zookeeper实现动态的集群扩展，不需要更改客户端（生产者和消费者）的配置。broker会在ZK注册并保持相关的元数据更新。而客户端会在ZK上注册相关的watcher，一旦ZK发生变化，客户端能及时做出相应调整。这样可以保证变更broker时，各个broker之间能自动实现负载均衡。</p></li><li><p>设计目标</p><p>高吞吐量</p><ul><li>数据磁盘持久化：消息不在内存中cache，直接写入到磁盘，充分利用磁盘的顺序读写性能</li><li>zero-copy：减少IO操作步骤</li><li>支持数据批量发送和拉取</li><li>支持数据压缩</li><li>Topic划分为多个partition，提高并行处理能力</li></ul></li><li><p>Producer负载均衡和HA机制</p><ul><li>producer根据用户指定的算法，将消息发送到指定的partition。</li><li>存在多个partiiton，每个partition有自己的replica，每个replica分布在不同的Broker节点上。</li><li>多个partition需要选取出lead partition，lead partition负责读写，并由zookeeper负责fail over。</li><li>通过zookeeper管理broker与consumer的动态加入与离开。</li></ul></li><li><p>Consumer的pull机制</p><p>由于broker会持久化数据，broker没有cache压力，因此，consumer比较适合才去pull的方式消费数据：</p><ul><li>简化kafka设计，降低了难度</li><li>Consumer根据消费能力自主控制消息拉取速度</li><li>Consumer根据自身情况自主选择消费模式，例如批量，重复消费，从制定partition或位置(offset)开始消费等</li></ul></li><li><p>Consumer与Topic关系以及机制</p><p>每个group包含多个consumer。对于topic中的一条特定消息，只会被订阅此Topic每个group中的一个consumer消费，那么一个group中的所有consumer将会交错的消费整个Topic。</p><p>如果所有的consumer都具有相同的group（类似JMS queue），消息将有所有的consumer负载均衡</p><p>如果所有的consumer都具有不同的group，那么这就是『发布-订阅』，消息将会广播给所有消费者</p><p>在Kafka中，一个partition中的消息只会被group中的一个consumer消费（同一时刻）；每个group中consumer消息消费互相独立；<br>一个group是一个『订阅』者，一个Topic中的每个partition只会被一个『订阅』者中的一个consumer消费，但是一个consumer可以同事消费多个partitions中的消息。</p><p>Kafka只能保证一个partition中的消息被某个consumer消费是顺序的，但是从Topic角度，当有多个partitions时，消息仍不是全局有序的</p><p>一个group中包含多个consumer，这样的话不仅能提高topic中消息的并发消费能力，还能提高『故障容错』性，如果group中的某个consumer失效，那么其消费的partition将会被其他consumer接管</p><p>Kafka的设计原理决定，对于一个Topic，同一个group中不能有多于partition个数的consumer同时消费，否则将意味着某些consumer将无法得到消息</p></li><li><p>Producer均衡算法</p><p>Kafka集群中的任何一个broker，都可以向producer提供metadata，这些metadata中包含『集群中存货的servers/partition leaders』，当producer获取到metadata后，会和topic下所有的partition leader保持socker连接；消息由producer直接通过socker发送到broker</p><blockquote><p>中间不会经过任何『路由层』，即，消息被路由到哪个partition上，是有producer决定的<br>在producer端的配置文件中，可以指定partition的路由方式：『random』，『key-hash』等</p></blockquote></li><li><p>Consumer均衡算法</p><p>当一个group中，有consumer加入或者离开时，会触发partitions均衡。均衡的最终目的，是提升topic的并发消费能力。</p><ul><li>假如topic1,具有如下partitions: P0,P1,P2,P3</li><li>加入group中,有如下consumer: C0,C1</li><li>首先根据partition索引号对partitions排序: P0,P1,P2,P3</li><li>根据consumer.id排序: C0,C1</li><li>计算倍数: M = [P0,P1,P2,P3].size / [C0,C1].size,本例值M=2(向上取整)</li><li>然后依次分配partitions: C0 = [P0,P1],C1=[P2,P3],即Ci = [P(i * M),P((i + 1) * M -1)]</li></ul></li><li><p>Broker集群内broker之间replica机制</p><p>replication策略是基于partiton，而不是topic</p><blockquote><p>kafka将每个partition复制到多个server上<br>任何一个partition有一个leader和任意数量的follower<br>备份的数量可以由broker配置文件设定<br>leader处理所有的read-write请求，负责跟踪所有的follower状态，<br>如果follower『落后』太多或者失效，leader会把它从replicas同步列表中删除<br>follower需要和leader保持同步，follower就像一个consumer，消费信息并保存在本地日志中<br>当所有的follower都将一个消息保存成功，此消息才能被认为是『committed』，<br>此时consumer才能消费它，这种策略要求leader和follower之间保持良好的网络环境<br>只要ZK集群存活，即使只存活一个replica，仍可以保证消息的正常发送和接收</p></blockquote><ul><li>Kafka判定一个follower存活的条件<ul><li>和ZK保持良好的链接</li><li>及时跟进leader，不能落后太多</li></ul></li></ul><blockquote><p>如果此replicas落后太多，它会继续在leader中fetch数据，然后加入同步列表中，<br>Kafka不会更换宿主，只有这样才能保证replicas足够快，才能保证producer发布消息时接收ACK的延迟较小</p></blockquote><ul><li>当leader失效，需要考虑负载均衡，partition leader较少的broker更有可能成为新的leader，因为<ul><li>不能采用『投票多数派』的算法，因为这种算法对于『网络稳定性/投票参与者数量』要求较高</li><li>Kafka集群设计中，容忍N-1个replicas失效</li><li>每个partiton中所有的replica信息都可以在ZK中获得，那么选择leader是非常简单的</li><li>选择follower时需要注意：避免新的leader server上承载的partiton leader的个数过多，否则此server将承受更多的IO压力</li></ul></li></ul></li><li><p>总结</p><ul><li>Producer端直接连接broker列表，从列表中返回TopicMetadataResponse，该Metadata包含Topic下每个partition leader建立socket连接并发送消息。</li><li>Broker端使用ZK用来注册broker信息，以及监控partition leader存活性。</li><li>Consumer端使用ZK用来注册consumer信息，其中包括consumer消费的partition列表等，同时也用来发现broker列表，并和partition leader建立socket连接，并获取消息。</li></ul></li></ul><h4 id="Kafka在Zookeeper中存储结构"><a href="#Kafka在Zookeeper中存储结构" class="headerlink" title="Kafka在Zookeeper中存储结构"></a>Kafka在Zookeeper中存储结构</h4><ul><li>结构图</li></ul><p>![kafka在ZK中的存储结构图](/assets/images/posts/kafka.0.9.0/kafka_in_zk.png)</p><h4 id="Kafka-安装和配置"><a href="#Kafka-安装和配置" class="headerlink" title="Kafka 安装和配置"></a>Kafka 安装和配置</h4><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="http://blog.csdn.net/zhongwen7710/article/details/41252649">http://blog.csdn.net/zhongwen7710/article/details/41252649</a></li><li><a href="http://kafka.apache.org/documentation.html#brokerconfigs">http://kafka.apache.org/documentation.html#brokerconfigs</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux shell 获得以前日期</title>
      <link href="/2015-12-05-linux-shell-generate-date.html"/>
      <url>/2015-12-05-linux-shell-generate-date.html</url>
      
        <content type="html"><![CDATA[<h3 id="在linux-shell里，我想获得以前的日期"><a href="#在linux-shell里，我想获得以前的日期" class="headerlink" title="在linux shell里，我想获得以前的日期"></a>在linux shell里，我想获得以前的日期</h3><p>1、比如，去年的上个月的昨天的日期：（今天是2009年2月2日，也就是2008年1月1日）</p><pre class="line-numbers language-none"><code class="language-none">reasonpun@reasonpun:~$ logRecordDate="`date -d "-1 year -1 month -1 day" "+%Y_%m_%d"`"reasonpun@reasonpun:~$ echo $logRecordDate2008_01_01reasonpun@reasonpun:~$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><!--more--><p>2、上个月的今天：</p><pre class="line-numbers language-none"><code class="language-none">reasonpun@reasonpun:~$ logRecordDate="`date -d "-1 month" "+%Y_%m_%d"`"reasonpun@reasonpun:~$ echo $logRecordDate2009_01_02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、去年的今天：</p><pre class="line-numbers language-none"><code class="language-none">reasonpun@reasonpun:~$ logRecordDate="`date -d "-1 year" "+%Y_%m_%d"`"reasonpun@reasonpun:~$ echo $logRecordDate2008_02_02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、上个月的昨天：</p><pre class="line-numbers language-none"><code class="language-none">reasonpun@reasonpun:~$ logRecordDate="`date -d "-1 month -1 day" "+%Y_%m_%d"`"reasonpun@reasonpun:~$ echo $logRecordDate2009_01_01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、根据时间戳转换成日期</p><pre class="line-numbers language-none"><code class="language-none">[mofun_mining@i-qe32ajmq ~]$ date -d @1434847028 "+%Y-%m-%d"2015-06-21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他的类推～～呵呵，还是希望大家给测测其他日期会不会出错呵呵。多谢～～～<br>鼓捣之环境：ubuntu8.04</p><p>update @ 2016-12-19 15:48</p><h3 id="PHP获取后一天日期的写法"><a href="#PHP获取后一天日期的写法" class="headerlink" title="PHP获取后一天日期的写法"></a>PHP获取后一天日期的写法</h3><pre class="line-numbers language-none"><code class="language-none">$date = "04-15-2013";$date1 = str_replace('-', '/', $date);$tomorrow = date('m-d-Y', strtotime($date1 . "+1 days"));echo $tomorrow;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="另附上windows下获得前一天的日期："><a href="#另附上windows下获得前一天的日期：" class="headerlink" title="另附上windows下获得前一天的日期："></a>另附上windows下获得前一天的日期：</h3><pre class="line-numbers language-none"><code class="language-none">@echo offset td=%date:~2,2%%date:~5,2%%date:~8,2%set dy=%date:~0,4%set dm=%date:~5,2%set dd=%date:~8,2%set da=%date:~8,2%if %dm%%dd%==0101 goto L01if %dm%%dd%==0201 goto L02if %dm%%dd%==0301 goto L07if %dm%%dd%==0401 goto L02if %dm%%dd%==0501 goto L04if %dm%%dd%==0601 goto L02if %dm%%dd%==0701 goto L04if %dm%%dd%==0801 goto L02if %dm%%dd%==0901 goto L02if %dm%%dd%==1001 goto L05if %dm%%dd%==1101 goto L03if %dm%%dd%==1201 goto L06if %dd%==02 goto L10if %dd%==03 goto L10if %dd%==04 goto L10if %dd%==05 goto L10if %dd%==06 goto L10if %dd%==07 goto L10if %dd%==08 goto L10if %dd%==09 goto L10if %dd%==10 goto L11set /A dd=dd-1set dt=%dy%-%dm%-%dd%goto END:L10set /A dd=%dd:~1,1%-1set dt=%dy%-%dm%-0%dd%goto END:L11set dt=%dy%-%dm%-09goto END:L02set /A dm=%dm:~1,1%-1set dt=%dy%-0%dm%-31goto END:L04set /A dm=dm-1set dt=%dy%-0%dm%-30goto END:L05set dt=%dy%-09-30goto END:L03set dt=%dy%-10-31goto END:L06set dt=%dy%-11-30goto END:L01set /A dy=dy-1set dt=%dy%-12-31goto END:L07set /A "dd=dy%%4"if not %dd%==0 goto L08set /A "dd=dy%%100"if not %dd%==0 goto L09set /A "dd=dy%%400"if %dd%==0 goto L09:L08set dt=%dy%-02-28goto END:L09set dt=%dy%-02-29goto END:ENDset dateTime=20%dt:~2,2%%dt:~5,2%%dt:~8,2%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker中搭建Spark计算框架</title>
      <link href="/2015-12-04-spark-in-docker.html"/>
      <url>/2015-12-04-spark-in-docker.html</url>
      
        <content type="html"><![CDATA[<h4 id="安装好Docker之后"><a href="#安装好Docker之后" class="headerlink" title="安装好Docker之后"></a>安装好Docker之后</h4><h4 id="先拉取一个官方的基本镜像ubuntu"><a href="#先拉取一个官方的基本镜像ubuntu" class="headerlink" title="先拉取一个官方的基本镜像ubuntu"></a>先拉取一个官方的基本镜像ubuntu</h4><p>docker pull ubuntu</p><p>我们将在这个基础镜像上运行容器，将这个容器当成一个普通的ubuntu虚拟机来操作部署spark，最后将配置好的容器commit为一个镜像，之后就可以通过这个镜像运行n个节点来完成集群的搭建</p><!--more--><h4 id="下载完ubuntu镜像之后运行"><a href="#下载完ubuntu镜像之后运行" class="headerlink" title="下载完ubuntu镜像之后运行"></a>下载完ubuntu镜像之后运行</h4><pre class="line-numbers language-none"><code class="language-none">[reason@localhost ~]$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZEmofun/spark         v2.0                b2dacac3e132        About an hour ago   1.508 GBmofun/spark         v1.3                4d2f33ca61ee        18 hours ago        1.506 GBubuntu              latest              0a17decee413        6 days ago          188.3 MBdocker/whalesay     latest              ded5e192a685        4 months ago        247 MB[reason@localhost ~]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行ubuntu容器"><a href="#运行ubuntu容器" class="headerlink" title="运行ubuntu容器"></a>运行ubuntu容器</h4><pre class="line-numbers language-none"><code class="language-none">[reason@localhost ~]$ docker run -v /home/docker/software/:/software -it ubunturoot@f4c0a9d42852:/#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="在容器中安装ssh"><a href="#在容器中安装ssh" class="headerlink" title="在容器中安装ssh"></a>在容器中安装ssh</h4><pre class="line-numbers language-none"><code class="language-none">[reason@localhost ~]$ docker run -v /home/docker/software/:/software -it ubunturoot@3970c1e5466e:/# apt-get install sshReading package lists... DoneBuilding dependency treeReading state information... Done# ssh默认配置root无法登陆root@3970c1e5466e:~/.ssh# vim /etc/ssh/sshd_configroot@3970c1e5466e:~/.ssh## 将 /etc/ssh/sshd_config中PermitRootLogin no/without_passwd 改为yes# 生成访问密钥root@3970c1e5466e:~# ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsaGenerating public/private rsa key pair.Created directory '/root/.ssh'.Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:b5:d1:e1:dd:98:7d:be:cc:55:69:c6:e7:67:80:d8:d3 root@3970c1e5466eThe key's randomart image is:+--[ RSA 2048]----+|            .    ||           = =.=.||          + * E=*||         . o .o++||        S .     *||              o.+||               + ||                 ||                 |+-----------------+root@3970c1e5466e:~#root@3970c1e5466e:~# cd ~/.ssh/root@3970c1e5466e:~/.ssh# cat id_rsa.pub &gt;&gt; authorized_keysroot@3970c1e5466e:~/.ssh#root@3970c1e5466e:~/.ssh# vim ~/.bashrc#加入/usr/sbin/sshd#如果在启动容器的时候还是无法启动ssh的话，# 在/etc/rc.local文件中也加入root@3970c1e5466e:~/.ssh# vim /etc/rc.local#加入root@3970c1e5466e:~/.ssh# /usr/sbin/sshdMissing privilege separation directory: /var/run/sshdroot@3970c1e5466e:~/.ssh# mkdir /var/run/sshdroot@3970c1e5466e:~/.ssh# /usr/sbin/sshdroot@3970c1e5466e:~/.ssh## 开启ssh服务后验证是否可以使用，打印出当前时间root@3970c1e5466e:~/.ssh# ssh localhost dateThe authenticity of host 'localhost (::1)' can't be established.ECDSA key fingerprint is ab:43:27:e6:1c:44:be:2c:f1:17:27:90:6d:2c:68:86.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'localhost' (ECDSA) to the list of known hosts.Mon Oct 19 05:57:44 UTC 2015root@3970c1e5466e:~/.ssh## ssh安装完毕<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>可以使用apt-get方式直接下载安装jdk（不推荐，下载速度慢，有可能还会失败）<br>这里选择从网上下载完jdk-8u60-linux-xx.bin之后<br>将其传到Ubuntu宿主机中，在运行容器的时候使用-v参数将宿主机上的目录映射到容器中，这样在容器中就可以访问到宿主机中的文件了</p><pre class="line-numbers language-none"><code class="language-none">如果提示不能安装.bin文件，使用以下命令即可解决root@3970c1e5466e:~/.ssh# apt-get updateroot@3970c1e5466e:~/.ssh# apt-getinstall g++-multilib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="安装Zookeeper"><a href="#安装Zookeeper" class="headerlink" title="安装Zookeeper"></a>安装Zookeeper</h4><pre class="line-numbers language-none"><code class="language-none">将下载好的zookeeper-3.4.6.tar.gz上传root@3970c1e5466e:~/.ssh# mv /software/zookeeper-3.4.6.tar.gz /usr/local/zookeeper-3.4.6root@3970c1e5466e:~/.ssh# tar -zxvf zookeeper-3.4.6.tar.gzroot@3970c1e5466e:~/.ssh# cd /usr/local/zookeeper-3.4.6/conf/root@3970c1e5466e:~/.ssh# cp zoo_sample.cfgzoo.cfgvim zoo.cfgroot@3970c1e5466e:~/.ssh# vim zoo.cfg#修改：dataDir=/root/zookeeper/tmp#在最后添加：server.1=cloud4:2888:3888server.2=cloud5:2888:3888server.3=cloud6:2888:3888#保存退出，然后创建一个tmp文件夹root@3970c1e5466e:~/.ssh# mkdir /data/zookeeper/tmp#再创建一个空文件root@3970c1e5466e:~/.ssh# touch /data/zookeeper/tmp/myid#最后向该文件写入IDroot@3970c1e5466e:~/.ssh# echo 1&gt; /data/zookeeper/tmp/myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:~/.ssh# mv /software/hadoop-2.6.1.tar.gz /usr/local/root@3970c1e5466e:~/.ssh# tar -zxvf hadoop-2.2.0-64bit.tar.gzroot@3970c1e5466e:~/.ssh# cd /usr/local/hadoop/etc/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更改hadoop-env.sh</p><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:/data/test# cd /usr/local/hadoop-2.6.1/root@3970c1e5466e:/usr/local/hadoop-2.6.1# lsLICENSE.txt  NOTICE.txt  README.txt  bin  etc  include  lib  libexec  logs  sbin  shareroot@3970c1e5466e:/usr/local/hadoop-2.6.1# cd etc/hadoop/root@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# vim hadoop-env.sh#加入java环境变量export JAVA_HOME=/usr/local/jdk1.8.0_60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改core-site.xml</p><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# vim core-site.xml&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;&lt;configuration&gt;&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;/name&gt;&lt;value&gt;hdfs://ns1&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;&lt;value&gt;/data/hadoop/tmp&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;&lt;value&gt;cloud4:2181,cloud5:2182,cloud6:2183&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改hdfs-site.xml, mapred-site.xml, yarn-site.xml</p><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# vim hdfs-site.xml&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;&lt;configuration&gt;&lt;property&gt;&lt;name&gt;dfs.nameservices&lt;/name&gt;&lt;value&gt;ns1&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.ha.namenodes.ns1&lt;/name&gt;&lt;value&gt;nn1,nn2&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.rpc-address.ns1.nn1&lt;/name&gt;&lt;value&gt;cloud1:9000&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.http-address.ns1.nn1&lt;/name&gt;&lt;value&gt;cloud1:50070&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.rpc-address.ns1.nn2&lt;/name&gt;&lt;value&gt;cloud2:9000&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.http-address.ns1.nn2&lt;/name&gt;&lt;value&gt;cloud2:50070&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;&lt;value&gt;qjournal://cloud4:8485;cloud5:8485;cloud6:8485/ns1&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;&lt;value&gt;/data/hadoop/journal&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.client.failover.proxy.provider.ns1&lt;/name&gt;&lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;&lt;value&gt;sshfence&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;&lt;value&gt;30000&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;        &lt;value&gt;file:///data/hadoop/workspace/hdfs/name&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;        &lt;value&gt;file:///data/hadoop/workspace/hdfs/data&lt;/value&gt;&lt;/property&gt;&lt;property&gt;       &lt;name&gt;dfs.replication&lt;/name&gt;       &lt;value&gt;2&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# mv mapred-site.xml.template mapred-site.xmlroot@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# vim mapred-site.xml&lt;?xml version="1.0"?&gt;&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;&lt;configuration&gt;&lt;property&gt;&lt;name&gt;mapreduce.framework.name&lt;/name&gt;&lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# vim yarn-site.xml&lt;?xml version="1.0"?&gt;&lt;configuration&gt;&lt;property&gt;&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;&lt;value&gt;cloud3&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;&lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:/usr/local/hadoop-2.6.1/etc/hadoop# vim slavescloud1cloud2cloud3cloud4cloud5cloud6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装Spark"><a href="#安装Spark" class="headerlink" title="安装Spark"></a>安装Spark</h4><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:~/.ssh# mv /software/scala-2.11.7 /usr/local/root@3970c1e5466e:~/.ssh# tar -zxvf scala-2.11.7.tgzroot@3970c1e5466e:~/.ssh# vim ~/.bashrcexport JAVA_HOME=/usr/local/jdk1.8.0_60export HADOOP_HOME=/usr/local/hadoop-2.6.1export SCALA_HOME=/usr/local/scala-2.11.7export SPARK_HOME=/usr/local/spark-1.5.1-bin-hadoop2.6export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$SCALA_HOME/bin:$SPARK_HOME/binroot@3970c1e5466e:~/.ssh# mv /software/spark-1.5.1-bin-hadoop2.6.tgz /usr/local/root@3970c1e5466e:~/.ssh# tar -zxvf spark-1.5.1-bin-hadoop2.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑配置文件</p><pre class="line-numbers language-none"><code class="language-none">root@3970c1e5466e:~/.ssh# cd /usr/local/spark-1.5.1-bin-hadoop2.6/root@3970c1e5466e:/usr/local/spark-1.5.1-bin-hadoop2.6# cd conf/root@3970c1e5466e:/usr/local/spark-1.5.1-bin-hadoop2.6# vim slavescloud1cloud2cloud3cloud4cloud5cloud6root@3970c1e5466e:/usr/local/spark-1.5.1-bin-hadoop2.6# mv spark-env.sh.template spark-env.shroot@3970c1e5466e:/usr/local/spark-1.5.1-bin-hadoop2.6# vim ~/spark/conf/spark-env.shexport SPARK_MASTER_IP=cloud1export SPARK_WORKER_MEMORY=128mexport JAVA_HOME=/usr/local/jdk1.8.0_60export SCALA_HOME=/usr/local/scala-2.11.7export SPARK_HOME=/usr/local/spark-1.5.1-bin-hadoop2.6export HADOOP_CONF_DIR=/usr/local/hadoop-2.6.1/etc/hadoopexport SPARK_LIBRARY_PATH=$$SPARK_HOME/libexport SCALA_LIBRARY_PATH=$SPARK_LIBRARY_PATHexport SPARK_WORKER_CORES=1export SPARK_WORKER_INSTANCES=1export SPARK_MASTER_PORT=7077<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时配置已经基本完成，所以需要__保存镜像__</p><pre class="line-numbers language-none"><code class="language-none">[reason@localhost ~]$ sudo docker commit -m "mofun spark first commit" -a "reason" cloud1 mofun/spark:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看执行过的镜像</p><pre class="line-numbers language-none"><code class="language-none">[reason@localhost ~]$ sudo docker ps -aCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                         PORTS               NAMESd4e581ba6af8        mofun/spark:v1.0   "/bin/bash"              11 seconds ago      Exited (0) 7 seconds ago                           hungry_pasteur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动容器</p><pre class="line-numbers language-none"><code class="language-none"># 后台模式运行[reason@localhost ~]$ docker run -d --name cloud2 -h cloud2 -it mofun/spark:v2.0 /bin/bash需要使用刚才制作的镜像启动6个容器[reason@localhost ~]$ docker run --name cloud1 -h cloud1 -it mofun/spark:v2.0 /bin/bash[reason@localhost ~]$ docker run --name cloud2 -h cloud2 -it mofun/spark:v2.0 /bin/bash[reason@localhost ~]$ docker run --name cloud3 -h cloud3 -it mofun/spark:v2.0 /bin/bash[reason@localhost ~]$ docker run --name cloud4 -h cloud4 -it mofun/spark:v2.0 /bin/bash[reason@localhost ~]$ docker run --name cloud5 -h cloud5 -it mofun/spark:v2.0 /bin/bash[reason@localhost ~]$ docker run --name cloud6 -h cloud6 -it mofun/spark:v2.0 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做最后的修改</p><pre class="line-numbers language-none"><code class="language-none">#在cloud5~cloud6中分别手动修改myidroot@cloud5:~# echo 2 &gt;  /data/zookeeper/myidroot@cloud5:~# echo 2 &gt; /usr/local/zookeeper-3.4.6/tmp/myidroot@cloud6:~# echo 3 &gt;  /data/zookeeper/myidroot@cloud6:~# echo 3 &gt; /usr/local/zookeeper-3.4.6/tmp/myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动zookeeper集群</p><pre class="line-numbers language-none"><code class="language-none"># 启动zookeeper集群（分别在cloud4、cloud5、cloud6上启动zk）# 全部节点启动后，再执行zkServer.sh status# 返回正常# root@cloud6:/usr/local/zookeeper-3.4.6/bin# ./zkServer.sh status# JMX enabled by default# Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg# Mode: followerroot@cloud5:~# /usr/local/zookeeper-3.4.6/bin/zkServer.sh start# 当3个节点服务正常启动后# 使用status查看是否启动root@cloud5:~# /usr/local/zookeeper-3.4.6/bin/zkServer.sh statusJMX enabled by defaultUsing config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfgMode: followerroot@cloud5:~#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入cloud1，开启hadoop和spark服务</p><pre class="line-numbers language-none"><code class="language-none"># 启动journalnode（在cloud1上启动所有journalnode，注意：是调用的hadoop-daemons.sh这个脚本，注意是复数s的那个脚本）# 运行jps命令检验，cloud4、cloud5、cloud6上多了JournalNode进程root@cloud1:/usr/local/hadoop-2.6.1/sbin# pwd/usr/local/hadoop-2.6.1/sbinroot@cloud1:/usr/local/hadoop-2.6.1/sbin#root@cloud1:/usr/local/hadoop-2.6.1/sbin# hadoop-daemons.sh start journalnode# 格式化ZK(在cloud1上执行即可，在bin目录下)root@cloud1:/usr/local/hadoop-2.6.1/bin# hdfs zkfc -formatZK# 进入节点cloud4，查看zookeeper信息root@cloud4:/usr/local/zookeeper-3.4.6/bin# pwd/usr/local/zookeeper-3.4.6/binroot@cloud4:/usr/local/zookeeper-3.4.6/bin# lsREADME.txt  zkCleanup.sh  zkCli.cmd  zkCli.sh  zkEnv.cmd  zkEnv.sh  zkServer.cmd  zkServer.sh  zookeeper.outroot@cloud4:/usr/local/zookeeper-3.4.6/bin#root@cloud4:/usr/local/zookeeper-3.4.6/bin# ./zkCli.shConnecting to localhost:21812015-10-21 09:34:34,485 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT2015-10-21 09:34:34,487 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=cloud42015-10-21 09:34:34,487 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_......[zk: localhost:2181(CONNECTED) 2] ls /hadoop-ha[ns1][zk: localhost:2181(CONNECTED) 3]# 格式化HDFS(在bin目录下),在cloud1上执行命令:root@cloud1:/usr/local/hadoop-2.6.1/bin# hdfs namenode -format# 首先启动active节点，执行如下命令(在cloud1上执行)root@cloud1:/usr/local/hadoop-2.6.1/sbin# hadoop-daemon.sh start namenode  # 进入cloud2，需要启动standy模式root@cloud2:/usr/local/hadoop-2.6.1/bin# pwd/usr/local/hadoop-2.6.1/binroot@cloud2:/usr/local/hadoop-2.6.1/bin# ./hdfs namenode -bootstrapStandbyroot@cloud2:/usr/local/hadoop-2.6.1/sbin# pwd/usr/local/hadoop-2.6.1/sbin# 这条命令可以等到hadoop-daemons.sh start zkfc 成功以后执行# 貌似是zkfc的启动慢导致standby模式启动出错？root@cloud1:/usr/local/spark-1.5.1-bin-hadoop2.6/bin# jps1522 NameNode2546 Jps1859 DFSZKFailoverController1109 Worker104 JournalNode426 DataNode558 NodeManager943 Master# 仔细观察DFSZKFailoverController 这个进程的存在情况root@cloud2:/usr/local/hadoop-2.6.1/sbin# ./hadoop-daemon.sh start namenode# 重新进入cloud1 ，启动datanoderoot@cloud4:/usr/local/hadoop-2.6.1/sbin# pwd/usr/local/hadoop-2.6.1/sbinroot@cloud4:/usr/local/hadoop-2.6.1/sbin# ./hadoop-daemons.sh start datanode# 在cloud3上执行start-yarn.shroot@cloud3:/usr/local/hadoop-2.6.1/sbin# start-yarn.sh# 启动ZKFCroot@cloud1:/usr/local/hadoop-2.6.1/sbin# ./hadoop-daemons.sh start zkfc# 启动spark集群root@cloud1:/usr/local/hadoop-2.6.1/sbin# cd /usr/local/spark-1.5.1-bin-hadoop2.6/sbin/root@cloud1:/usr/local/spark-1.5.1-bin-hadoop2.6/sbin# start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可以通过CURL访问服务了，如果宿主机中的hosts文件没有配置docker容器的主机名和IP地址映射关系的话要换成用IP访问</p><pre class="line-numbers language-none"><code class="language-none">[reason@localhost ~]$ curl http://172.17.0.56:50070[reason@localhost ~]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre class="line-numbers language-none"><code class="language-none"># 删除镜像[reason@localhost ~]$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZEmofun/spark         v2.0                b2dacac3e132        3 hours ago         1.508 GBmofun/spark         v1.3                4d2f33ca61ee        21 hours ago        1.506 GBubuntu              latest              0a17decee413        6 days ago          188.3 MBdocker/whalesay     latest              ded5e192a685        4 months ago        247 MB[reason@localhost ~]$ sudo docker rmi 4d2f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 删除容器[reason@localhost ~]$ docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES8258875263be        ubuntu              "/bin/bash"         3 minutes ago       Exited (127) 3 minutes ago                        mad_mestorf[reason@localhost ~]$ sudo docker rm 8258875263be8258875263be[reason@localhost ~]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 删除(NULL) 容器root@iZ28ikebrg6Z:/var/run# docker images  REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  &lt;none&gt;                 &lt;none&gt;              def2e0b08cbc        About an hour ago   1.37 GB  sameersbn/redmine      latest              f0bec095f291        2 hours ago         614.6 MB  root@iZ28ikebrg6Z:/var/run# docker ps -a  CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                     PORTS               NAMES  5d6373cb79e6        224b40d4b89f             "/bin/sh -c 'apt-get   25 hours ago        Exited (0) 25 hours ago                        distracted_blackwell    root@iZ28ikebrg6Z:/var/run# docker rm 5d63  5d63<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 镜像导出[reason@localhost ~]$ sudo docker ps -aCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                         PORTS               NAMESd4e581ba6af8        mofun/spark_rc:v1.0   "/bin/bash"              11 seconds ago      Exited (0) 7 seconds ago                           hungry_pasteur[reason@localhost ~]$ sudo docker export d4e581ba6af8 &gt; mofunspark_v1.0.tar# 和导入恢复[reason@localhost ~]$ cat mofunspark_v1.0.tar | sudo docker import - mofun/spark:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行Scala交互模式时出错时，需要检查</p><pre class="line-numbers language-none"><code class="language-none">root@cloud1:/usr/local/jdk1.8.0_60/jre/lib/ext# ls -latotal 25632drwxr-xr-x.  3  501 staff     4096 Oct 19 02:35 .drwxr-xr-x. 15  501 staff     4096 Oct 18 03:34 ..-rw-r--r--.  1  501 staff  3860522 Aug  4 19:29 cldrdata.jar-rw-r--r--.  1  501 staff     8286 Aug  4 19:29 dnsns.jar-rw-r--r--.  1  501 staff    44516 Aug  4 19:29 jaccess.jar-rwxr-xr-x.  1  501 staff 18464934 Aug  3 17:58 jfxrt.jar-rw-r--r--.  1  501 staff  1178935 Aug  4 19:29 localedata.jar-rw-r--r--.  1  501 staff     1269 Aug  4 19:29 meta-index-rw-r--r--.  1  501 staff  2014239 Aug  4 19:29 nashorn.jar-rw-r--r--.  1  501 staff    39771 Aug  4 19:29 sunec.jar-rw-r--r--.  1  501 staff   278680 Aug  4 19:29 sunjce_provider.jar-rw-r--r--.  1  501 staff   250826 Aug  4 19:29 sunpkcs11.jardrwxr-xr-x.  2 root root      4096 Oct 19 02:35 tmp-rw-r--r--.  1  501 staff    68848 Aug  4 19:29 zipfs.jarroot@cloud1:/usr/local/jdk1.8.0_60/jre/lib/ext## 该目录下出现了很多类似._jfxrt.jar 的包，直接予以删除即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="http://eksliang.iteye.com/blog/2226986">http://eksliang.iteye.com/blog/2226986</a></li><li><a href="http://dockerpool.com/static/books/docker_practice/container/daemon.html">http://dockerpool.com/static/books/docker_practice/container/daemon.html</a></li><li><a href="http://dockerpool.com/static/books/docker_practice/install/ubuntu.html">http://dockerpool.com/static/books/docker_practice/install/ubuntu.html</a></li><li><a href="http://dockerpool.com/static/books/docker_practice/image/create.html">http://dockerpool.com/static/books/docker_practice/image/create.html</a></li><li><a href="http://dockerpool.com/static/books/docker_practice/image/save_load.html">http://dockerpool.com/static/books/docker_practice/image/save_load.html</a></li><li><a href="http://dockerpool.com/static/books/docker_practice/container/rm.html">http://dockerpool.com/static/books/docker_practice/container/rm.html</a></li><li><a href="http://blog.csdn.net/qq1010885678/article/details/46353101">http://blog.csdn.net/qq1010885678/article/details/46353101</a></li><li><a href="http://cn.soulmachine.me/blog/20131027/">http://cn.soulmachine.me/blog/20131027/</a></li><li><a href="http://my.oschina.net/zjzhai/blog/225112">http://my.oschina.net/zjzhai/blog/225112</a></li><li><a href="http://blog.csdn.net/minimicall/article/details/40188251">http://blog.csdn.net/minimicall/article/details/40188251</a></li><li><a href="http://www.scala-lang.org/documentation/">http://www.scala-lang.org/documentation/</a>  </li><li><a href="https://github.com/apache/spark/blob/master/examples/src/main/scala/org/apache/spark/examples/streaming/NetworkWordCount.scala">https://github.com/apache/spark/blob/master/examples/src/main/scala/org/apache/spark/examples/streaming/NetworkWordCount.scala</a></li><li><a href="http://spark.apache.org/docs/latest/">http://spark.apache.org/docs/latest/</a></li><li><a href="https://docs.sigmoidanalytics.com/index.php/Error:_Failed_to_initialize_compiler:_object_scala_not_found.">https://docs.sigmoidanalytics.com/index.php/Error:_Failed_to_initialize_compiler:_object_scala_not_found.</a></li><li><a href="http://docs.docker.com/linux/step_one/">http://docs.docker.com/linux/step_one/</a></li><li><a href="http://blog.sequenceiq.com/blog/2015/01/09/spark-1-2-0-docker/">http://blog.sequenceiq.com/blog/2015/01/09/spark-1-2-0-docker/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Logrotate</title>
      <link href="/2015-12-04-nginx-logrotate.html"/>
      <url>/2015-12-04-nginx-logrotate.html</url>
      
        <content type="html"><![CDATA[<h3 id="Centos-Logrotate"><a href="#Centos-Logrotate" class="headerlink" title="Centos Logrotate"></a>Centos Logrotate</h3><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p><em>logrotate</em> is  designed to ease administration of systems that generatelarge numbers of log files.  It allows automatic rotation, compression,removal, and mailing of log files.  Each log file may be handled daily,weekly, monthly, or when it grows too large. (<a href="http://linuxcommand.org/man_pages/logrotate8.html">Logrotate man page</a>)</p><!--more--><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="内容示例"><a href="#内容示例" class="headerlink" title="内容示例"></a>内容示例</h5><pre class="line-numbers language-none"><code class="language-none">[reason@online_http:/etc/logrotate.d]$ cat nginx.logrotate.d## author: reason@mofunsky.com# date:   2015-03-31 10:15# cron:#       59 23 * * * /usr/sbin/logrotate /etc/logrotate.conf &gt; /dev/null## location:#       /etc/logrotate.d/nginx.logrotate.d#/local/nginx*.log {    daily    rotate 10    missingok    compress    notifempty    sharedscripts    postrotate        /bin/kill -USR1 $(cat /var/nginx.pid 2&gt;/dev/null) 2&gt;/dev/null || :    endscript}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h5><pre class="line-numbers language-none"><code class="language-none">[reason@online_http:/etc/logrotate.d]$ pwd/etc/logrotate.d[reason@online_http:/etc/logrotate.d]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="执行方式和时间"><a href="#执行方式和时间" class="headerlink" title="执行方式和时间"></a>执行方式和时间</h5><pre class="line-numbers language-none"><code class="language-none"># add by reason @ 2015-04-05 20:41# logrotate nginx log daily59      23      *       *       *       root /usr/sbin/logrotate /etc/logrotate.conf &gt;/dev/null 2&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h5><pre class="line-numbers language-none"><code class="language-none"># 会按照日期，在每天的23：59分将改天日志转储压缩为*.gz文件[reason@online_http:/local/nginx_access_log]$ ls -lshtotal 5.1G427M -rwxrwxrwx 1 nginx nginx 427M Oct 11 12:01 nginx_me_access.log259M -rwxrwxrwx 1 nginx nginx 259M Oct  1 23:59 nginx_me_access.log-20151001.gz233M -rwxrwxrwx 1 nginx nginx 233M Oct  2 23:59 nginx_me_access.log-20151002.gz228M -rwxrwxrwx 1 nginx nginx 228M Oct  3 23:59 nginx_me_access.log-20151003.gz225M -rwxrwxrwx 1 nginx nginx 225M Oct  4 23:59 nginx_me_access.log-20151004.gz232M -rwxrwxrwx 1 nginx nginx 232M Oct  5 23:59 nginx_me_access.log-20151005.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="另外一种执行方式"><a href="#另外一种执行方式" class="headerlink" title="另外一种执行方式"></a>另外一种执行方式</h5><p>logrotate 是linux系统的缺省安装命令，初始化状态下即存在缺省的配置信息，其中包括执行文件和时间</p><pre class="line-numbers language-none"><code class="language-none">[reason@online_http:/local/nginx_access_log]$ cd /etc/logrotate.d/[reason@online_http:/etc/logrotate.d]$ lsnginx.logrotate.d[reason@online_http:/etc/logrotate.d]$ pwd/etc/logrotate.d[reason@online_http:/etc/logrotate.d]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如在/etc/logrotate.d目录下会缺省放置一批需要转储的日志服务对应的配置文件，比如httpd，exim等，logrotate会按照配置文件信息按照既定时间对其产生的日志数据进行转储操作。</p><pre class="line-numbers language-none"><code class="language-none">[reason@online_http:/etc/logrotate.d]$ pwd/etc/logrotate.d[reason@online_http:/etc/logrotate.d]$ cat yum/var/log/yum.log {    missingok    notifempty    size 30k    yearly    create 0600 root root}[reason@online_http:/etc/logrotate.d]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体参数涵义可参考<a href="http://linuxcommand.org/man_pages/logrotate8.html">Logrotate man page</a></p><p>缺省状态下，logrotate的自动执行分别被放入了如下几个文件中</p><ul><li>cron.daily</li><li>cron.weekly</li><li>cron.monthly</li></ul><p>而对于不同的linux发行版本以上脚本可能被放置在/etc/crontab中<br>或者</p><pre class="line-numbers language-none"><code class="language-none">[root@i-bntub2bp logrotate.d]# cat /etc/anacrontab# /etc/anacrontab: configuration file for anacron# See anacron(8) and anacrontab(5) for details.SHELL=/bin/shPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# the maximal random delay added to the base delay of the jobsRANDOM_DELAY=45# the jobs will be started during the following hours onlySTART_HOURS_RANGE=3-22#period in days   delay in minutes   job-identifier   command1       5       cron.daily              nice run-parts /etc/cron.daily7       25      cron.weekly             nice run-parts /etc/cron.weekly@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly[root@i-bntub2bp logrotate.d]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对</p><pre class="line-numbers language-none"><code class="language-none">[root@i-bntub2bp logrotate.d]# cat /etc/redhat-releaseCentOS release 6.6 (Final)[root@i-bntub2bp logrotate.d]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而言，可以直接在/etc/<a href="https://www.centos.org/docs/2/rhl-cg-en-7.2/anacron.html">anacrontab</a>中找到如上信息。</p><p>大体解释下anacrontab的部分参数涵义</p><pre class="line-numbers language-none"><code class="language-none">START_HOURS_RANGE=3-22  # 执行时间为3点到22点之间RANDOM_DELAY=45 # 时间处于可执行区间内随机延迟45分钟之内任意时间1       5       cron.daily              nice run-parts /etc/cron.daily# 执行时间为3点到22点之间执行/etc/cron.daily脚本 (after reboot and after the machine has been up for 5 minutes^^), 如果没有重启服务，则会在3：05之后执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="http://huoding.com/2013/04/21/246">http://huoding.com/2013/04/21/246</a></li><li><a href="http://serverfault.com/questions/135906/when-does-cron-daily-run">http://serverfault.com/questions/135906/when-does-cron-daily-run</a></li><li><a href="http://www.cyberciti.biz/faq/linux-when-does-cron-daily-weekly-monthly-run/">http://www.cyberciti.biz/faq/linux-when-does-cron-daily-weekly-monthly-run/</a></li><li><a href="http://linuxcommand.org/man_pages/logrotate8.html">http://linuxcommand.org/man_pages/logrotate8.html</a></li><li><a href="https://www.centos.org/docs/2/rhl-cg-en-7.2/anacron.html">https://www.centos.org/docs/2/rhl-cg-en-7.2/anacron.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> logrotate </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
